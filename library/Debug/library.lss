
library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005aee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000366  00800060  00005aee  00005b82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008003c6  008003c6  00005ee8  2**0
                  ALLOC
  3 .stab         00005598  00000000  00000000  00005ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001703  00000000  00000000  0000b480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000cb83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000cce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ce72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000eeb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001137e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 2a 	call	0x551e	; 0x551e <main>
      8a:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 2c 	jmp	0x5882	; 0x5882 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e8       	ldi	r22, 0x88	; 136
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 61 2c 	jmp	0x58c2	; 0x58c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 2c 	jmp	0x5892	; 0x5892 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vidSetPortxDir>:
 *	1 -> OUTPUT
 */

/* PORTx Direction only*/
void DIO_vidSetPortxDir(u8 PortName, u8 PortDir)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vidSetPortxDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vidSetPortxDir+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortName)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	09 f1       	breq	.+66     	; 0xd04 <DIO_vidSetPortxDir+0x66>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_vidSetPortxDir+0x38>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_vidSetPortxDir+0x4e>
     cd4:	3a c0       	rjmp	.+116    	; 0xd4a <DIO_vidSetPortxDir+0xac>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	f1 f0       	breq	.+60     	; 0xd1c <DIO_vidSetPortxDir+0x7e>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	29 f1       	breq	.+74     	; 0xd34 <DIO_vidSetPortxDir+0x96>
     cea:	2f c0       	rjmp	.+94     	; 0xd4a <DIO_vidSetPortxDir+0xac>
	{
		// PORTA in AVR MICROCONTROLLER
		case PORTA:
			if(PortDir == INPUT)
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	88 23       	and	r24, r24
     cf0:	21 f4       	brne	.+8      	; 0xcfa <DIO_vidSetPortxDir+0x5c>
			{
				// DDR for register is all input directed
				DDRA_REG = 0x00;
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	10 82       	st	Z, r1
     cf8:	28 c0       	rjmp	.+80     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRA_REG = 0xff;
     cfa:	ea e3       	ldi	r30, 0x3A	; 58
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	80 83       	st	Z, r24
     d02:	23 c0       	rjmp	.+70     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTB in AVR MICROCONTROLLER
		case PORTB:
			if(PortDir == INPUT)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	88 23       	and	r24, r24
     d08:	21 f4       	brne	.+8      	; 0xd12 <DIO_vidSetPortxDir+0x74>
			{
				// DDR for register is all input directed
				DDRB_REG = 0x00;
     d0a:	e7 e3       	ldi	r30, 0x37	; 55
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
     d10:	1c c0       	rjmp	.+56     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRB_REG = 0xff;
     d12:	e7 e3       	ldi	r30, 0x37	; 55
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	80 83       	st	Z, r24
     d1a:	17 c0       	rjmp	.+46     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PARTC in AVR MICROCONTROLLER
		case PORTC:
			if(PortDir == INPUT)
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	88 23       	and	r24, r24
     d20:	21 f4       	brne	.+8      	; 0xd2a <DIO_vidSetPortxDir+0x8c>
			{
				// DDR for register is all input directed
				DDRC_REG = 0x00;
     d22:	e4 e3       	ldi	r30, 0x34	; 52
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
     d28:	10 c0       	rjmp	.+32     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRC_REG = 0xff;
     d2a:	e4 e3       	ldi	r30, 0x34	; 52
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	80 83       	st	Z, r24
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			break;

		// PORTD in AVR MICROCONTROLLER
		case PORTD:
			if(PortDir == INPUT)
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	88 23       	and	r24, r24
     d38:	21 f4       	brne	.+8      	; 0xd42 <DIO_vidSetPortxDir+0xa4>
			{
				// DDR for register is all input directed
				DDRD_REG = 0x00;
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <DIO_vidSetPortxDir+0xac>
			}
			else
			{
				// DDR for register is all output directed
				DDRD_REG = 0xff;
     d42:	e1 e3       	ldi	r30, 0x31	; 49
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	80 83       	st	Z, r24
			break;

		default:
			break;
	}
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <DIO_vidSetPortValue>:

// PORTx VALUE
void DIO_vidSetPortValue(u8 Portname, u8 Value)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <DIO_vidSetPortValue+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <DIO_vidSetPortValue+0x8>
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	6a 83       	std	Y+2, r22	; 0x02
	switch(Portname)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	d1 f0       	breq	.+52     	; 0xdb0 <DIO_vidSetPortValue+0x58>
     d7c:	2b 81       	ldd	r18, Y+3	; 0x03
     d7e:	3c 81       	ldd	r19, Y+4	; 0x04
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_vidSetPortValue+0x38>
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	9c 81       	ldd	r25, Y+4	; 0x04
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	61 f0       	breq	.+24     	; 0xda6 <DIO_vidSetPortValue+0x4e>
     d8e:	1e c0       	rjmp	.+60     	; 0xdcc <DIO_vidSetPortValue+0x74>
     d90:	2b 81       	ldd	r18, Y+3	; 0x03
     d92:	3c 81       	ldd	r19, Y+4	; 0x04
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	81 f0       	breq	.+32     	; 0xdba <DIO_vidSetPortValue+0x62>
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	9c 81       	ldd	r25, Y+4	; 0x04
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	81 f0       	breq	.+32     	; 0xdc4 <DIO_vidSetPortValue+0x6c>
     da4:	13 c0       	rjmp	.+38     	; 0xdcc <DIO_vidSetPortValue+0x74>
	{
		case PORTA:
			PORTA_REG = Value;
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	80 83       	st	Z, r24
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTB:
			PORTB_REG = Value;
     db0:	e8 e3       	ldi	r30, 0x38	; 56
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	80 83       	st	Z, r24
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTC:
			PORTC_REG = Value;
     dba:	e5 e3       	ldi	r30, 0x35	; 53
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	80 83       	st	Z, r24
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <DIO_vidSetPortValue+0x74>
			break;
		case PORTD:
			PORTD_REG = Value;
     dc4:	e2 e3       	ldi	r30, 0x32	; 50
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <DIO_vidSetPinxDir>:

// PORTx.n Direction
void DIO_vidSetPinxDir(u8 portname, u8 pin_number, u8 state)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_vidSetPinxDir+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_vidSetPinxDir+0x8>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	6a 83       	std	Y+2, r22	; 0x02
     dec:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	3d 83       	std	Y+5, r19	; 0x05
     df6:	2c 83       	std	Y+4, r18	; 0x04
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_vidSetPinxDir+0x2a>
     e02:	59 c0       	rjmp	.+178    	; 0xeb6 <DIO_vidSetPinxDir+0xdc>
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	22 30       	cpi	r18, 0x02	; 2
     e0a:	31 05       	cpc	r19, r1
     e0c:	2c f4       	brge	.+10     	; 0xe18 <DIO_vidSetPinxDir+0x3e>
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	71 f0       	breq	.+28     	; 0xe32 <DIO_vidSetPinxDir+0x58>
     e16:	13 c1       	rjmp	.+550    	; 0x103e <DIO_vidSetPinxDir+0x264>
     e18:	2c 81       	ldd	r18, Y+4	; 0x04
     e1a:	3d 81       	ldd	r19, Y+5	; 0x05
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <DIO_vidSetPinxDir+0x4a>
     e22:	8b c0       	rjmp	.+278    	; 0xf3a <DIO_vidSetPinxDir+0x160>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	91 05       	cpc	r25, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <DIO_vidSetPinxDir+0x56>
     e2e:	c7 c0       	rjmp	.+398    	; 0xfbe <DIO_vidSetPinxDir+0x1e4>
     e30:	06 c1       	rjmp	.+524    	; 0x103e <DIO_vidSetPinxDir+0x264>
	{
		case PORTA:
			if (state == OUTPUT)
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	a1 f4       	brne	.+40     	; 0xe60 <DIO_vidSetPinxDir+0x86>
				set_bit(DDRA_REG, pin_number);
     e38:	aa e3       	ldi	r26, 0x3A	; 58
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ea e3       	ldi	r30, 0x3A	; 58
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_vidSetPinxDir+0x7c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_vidSetPinxDir+0x78>
     e5a:	84 2b       	or	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	ef c0       	rjmp	.+478    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <DIO_vidSetPinxDir+0x8e>
     e66:	eb c0       	rjmp	.+470    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				// DDR IS INPUT
				clr_bit(DDRA_REG, pin_number);
     e68:	aa e3       	ldi	r26, 0x3A	; 58
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_vidSetPinxDir+0xaa>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	2a 95       	dec	r18
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_vidSetPinxDir+0xa6>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTA_REG, pin_number);
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_vidSetPinxDir+0xd2>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_vidSetPinxDir+0xce>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	c4 c0       	rjmp	.+392    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	a1 f4       	brne	.+40     	; 0xee4 <DIO_vidSetPinxDir+0x10a>
				set_bit(DDRB_REG, pin_number);
     ebc:	a7 e3       	ldi	r26, 0x37	; 55
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e3       	ldi	r30, 0x37	; 55
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_vidSetPinxDir+0x100>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_vidSetPinxDir+0xfc>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	ad c0       	rjmp	.+346    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 23       	and	r24, r24
     ee8:	09 f0       	breq	.+2      	; 0xeec <DIO_vidSetPinxDir+0x112>
     eea:	a9 c0       	rjmp	.+338    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRB_REG, pin_number);
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_vidSetPinxDir+0x12e>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	2a 95       	dec	r18
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_vidSetPinxDir+0x12a>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTB_REG, pin_number);
     f12:	a8 e3       	ldi	r26, 0x38	; 56
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e3       	ldi	r30, 0x38	; 56
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_vidSetPinxDir+0x156>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_vidSetPinxDir+0x152>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	82 c0       	rjmp	.+260    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <DIO_vidSetPinxDir+0x18e>
				set_bit(DDRC_REG, pin_number);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_vidSetPinxDir+0x184>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_vidSetPinxDir+0x180>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	6b c0       	rjmp	.+214    	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	88 23       	and	r24, r24
     f6c:	09 f0       	breq	.+2      	; 0xf70 <DIO_vidSetPinxDir+0x196>
     f6e:	67 c0       	rjmp	.+206    	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				clr_bit(DDRC_REG, pin_number);
     f70:	a4 e3       	ldi	r26, 0x34	; 52
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e4 e3       	ldi	r30, 0x34	; 52
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_vidSetPinxDir+0x1b2>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	2a 95       	dec	r18
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_vidSetPinxDir+0x1ae>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTC_REG, pin_number);
     f96:	a5 e3       	ldi	r26, 0x35	; 53
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e3       	ldi	r30, 0x35	; 53
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_vidSetPinxDir+0x1da>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_vidSetPinxDir+0x1d6>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	40 c0       	rjmp	.+128    	; 0x103e <DIO_vidSetPinxDir+0x264>
			}
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <DIO_vidSetPinxDir+0x212>
				set_bit(DDRD_REG, pin_number);
     fc4:	a1 e3       	ldi	r26, 0x31	; 49
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e1 e3       	ldi	r30, 0x31	; 49
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_vidSetPinxDir+0x208>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_vidSetPinxDir+0x204>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	29 c0       	rjmp	.+82     	; 0x103e <DIO_vidSetPinxDir+0x264>
			else if(state == INPUT)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	31 f5       	brne	.+76     	; 0x103e <DIO_vidSetPinxDir+0x264>
			{
				// CLEAR
				clr_bit(DDRD_REG, pin_number);
     ff2:	a1 e3       	ldi	r26, 0x31	; 49
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_vidSetPinxDir+0x234>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	2a 95       	dec	r18
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_vidSetPinxDir+0x230>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
				// PORT IS PULLED UP
				set_bit(PORTD_REG, pin_number);
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_vidSetPinxDir+0x25c>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_vidSetPinxDir+0x258>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <DIO_vidSetPinValue>:

// PINx Whole value
void DIO_vidSetPinValue(u8 portname, u8 value)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <DIO_vidSetPinValue+0x6>
    1054:	00 d0       	rcall	.+0      	; 0x1056 <DIO_vidSetPinValue+0x8>
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3c 83       	std	Y+4, r19	; 0x04
    1066:	2b 83       	std	Y+3, r18	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <DIO_vidSetPinValue+0x58>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <DIO_vidSetPinValue+0x38>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 f0       	breq	.+24     	; 0x109c <DIO_vidSetPinValue+0x4e>
    1084:	1e c0       	rjmp	.+60     	; 0x10c2 <DIO_vidSetPinValue+0x74>
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	81 f0       	breq	.+32     	; 0x10b0 <DIO_vidSetPinValue+0x62>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <DIO_vidSetPinValue+0x6c>
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <DIO_vidSetPinValue+0x74>
	{
		case PORTA:
			PINA_REG = value;
    109c:	e9 e3       	ldi	r30, 0x39	; 57
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTB:
			PINB_REG = value;
    10a6:	e6 e3       	ldi	r30, 0x36	; 54
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTC:
			PINC_REG = value;
    10b0:	e3 e3       	ldi	r30, 0x33	; 51
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <DIO_vidSetPinValue+0x74>
			break;
		case PORTD:
			PIND_REG = value;
    10ba:	e0 e3       	ldi	r30, 0x30	; 48
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <DIO_u8GetPinBitValue>:

// GET PIN VALUE
u8 DIO_u8GetPinBitValue(u8 Portname, u8 Pin_number)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_u8GetPinBitValue+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8GetPinBitValue+0x8>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	switch(Portname)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3d 83       	std	Y+5, r19	; 0x05
    10ec:	2c 83       	std	Y+4, r18	; 0x04
    10ee:	4c 81       	ldd	r20, Y+4	; 0x04
    10f0:	5d 81       	ldd	r21, Y+5	; 0x05
    10f2:	41 30       	cpi	r20, 0x01	; 1
    10f4:	51 05       	cpc	r21, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_u8GetPinBitValue+0x7e>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	34 f4       	brge	.+12     	; 0x110e <DIO_u8GetPinBitValue+0x3e>
    1102:	2c 81       	ldd	r18, Y+4	; 0x04
    1104:	3d 81       	ldd	r19, Y+5	; 0x05
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	69 f0       	breq	.+26     	; 0x1126 <DIO_u8GetPinBitValue+0x56>
    110c:	5b c0       	rjmp	.+182    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
    110e:	4c 81       	ldd	r20, Y+4	; 0x04
    1110:	5d 81       	ldd	r21, Y+5	; 0x05
    1112:	42 30       	cpi	r20, 0x02	; 2
    1114:	51 05       	cpc	r21, r1
    1116:	79 f1       	breq	.+94     	; 0x1176 <DIO_u8GetPinBitValue+0xa6>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_u8GetPinBitValue+0x54>
    1122:	3d c0       	rjmp	.+122    	; 0x119e <DIO_u8GetPinBitValue+0xce>
    1124:	4f c0       	rjmp	.+158    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
	{
		case PORTA:
			tmp = PINA_REG;
    1126:	e9 e3       	ldi	r30, 0x39	; 57
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8GetPinBitValue+0x72>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8GetPinBitValue+0x6e>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	3b c0       	rjmp	.+118    	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTB:
			tmp = PINB_REG;
    114e:	e6 e3       	ldi	r30, 0x36	; 54
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8GetPinBitValue+0x9a>
    1166:	55 95       	asr	r21
    1168:	47 95       	ror	r20
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8GetPinBitValue+0x96>
    116e:	ca 01       	movw	r24, r20
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	27 c0       	rjmp	.+78     	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTC:
			tmp = PINC_REG;
    1176:	e3 e3       	ldi	r30, 0x33	; 51
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8GetPinBitValue+0xc2>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8GetPinBitValue+0xbe>
    1196:	ca 01       	movw	r24, r20
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	13 c0       	rjmp	.+38     	; 0x11c4 <DIO_u8GetPinBitValue+0xf4>
			break;

		case PORTD:
			tmp = PIND_REG;
    119e:	e0 e3       	ldi	r30, 0x30	; 48
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8GetPinBitValue+0xea>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8GetPinBitValue+0xe6>
    11be:	ca 01       	movw	r24, r20
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_vidSetPortBitValue>:

// PORTx Bit value
void DIO_vidSetPortBitValue(u8 portname, u8 port_number, u8 state)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_vidSetPortBitValue+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_vidSetPortBitValue+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	3d 83       	std	Y+5, r19	; 0x05
    11f2:	2c 83       	std	Y+4, r18	; 0x04
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_vidSetPortBitValue+0x2a>
    11fe:	47 c0       	rjmp	.+142    	; 0x128e <DIO_vidSetPortBitValue+0xb8>
    1200:	2c 81       	ldd	r18, Y+4	; 0x04
    1202:	3d 81       	ldd	r19, Y+5	; 0x05
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	2c f4       	brge	.+10     	; 0x1214 <DIO_vidSetPortBitValue+0x3e>
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	71 f0       	breq	.+28     	; 0x122e <DIO_vidSetPortBitValue+0x58>
    1212:	cb c0       	rjmp	.+406    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_vidSetPortBitValue+0x4a>
    121e:	67 c0       	rjmp	.+206    	; 0x12ee <DIO_vidSetPortBitValue+0x118>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_vidSetPortBitValue+0x56>
    122a:	91 c0       	rjmp	.+290    	; 0x134e <DIO_vidSetPortBitValue+0x178>
    122c:	be c0       	rjmp	.+380    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	a1 f4       	brne	.+40     	; 0x125c <DIO_vidSetPortBitValue+0x86>
				set_bit(PORTA_REG, port_number);
    1234:	ab e3       	ldi	r26, 0x3B	; 59
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	eb e3       	ldi	r30, 0x3B	; 59
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_vidSetPortBitValue+0x7c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_vidSetPortBitValue+0x78>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	a7 c0       	rjmp	.+334    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	88 23       	and	r24, r24
    1260:	09 f0       	breq	.+2      	; 0x1264 <DIO_vidSetPortBitValue+0x8e>
    1262:	a3 c0       	rjmp	.+326    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTA_REG, port_number);
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_vidSetPortBitValue+0xac>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_vidSetPortBitValue+0xa8>
    1286:	80 95       	com	r24
    1288:	84 23       	and	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	8e c0       	rjmp	.+284    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	a1 f4       	brne	.+40     	; 0x12bc <DIO_vidSetPortBitValue+0xe6>
				set_bit(PORTB_REG, port_number);
    1294:	a8 e3       	ldi	r26, 0x38	; 56
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_vidSetPortBitValue+0xdc>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_vidSetPortBitValue+0xd8>
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	77 c0       	rjmp	.+238    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 23       	and	r24, r24
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <DIO_vidSetPortBitValue+0xee>
    12c2:	73 c0       	rjmp	.+230    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTB_REG, port_number);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_vidSetPortBitValue+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_vidSetPortBitValue+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	5e c0       	rjmp	.+188    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <DIO_vidSetPortBitValue+0x146>
				set_bit(PORTC_REG, port_number);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_vidSetPortBitValue+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_vidSetPortBitValue+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 23       	and	r24, r24
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_vidSetPortBitValue+0x14e>
    1322:	43 c0       	rjmp	.+134    	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTC_REG, port_number);
    1324:	a5 e3       	ldi	r26, 0x35	; 53
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_vidSetPortBitValue+0x16c>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_vidSetPortBitValue+0x168>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	2e c0       	rjmp	.+92     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <DIO_vidSetPortBitValue+0x1a6>
				set_bit(PORTD_REG, port_number);
    1354:	a2 e3       	ldi	r26, 0x32	; 50
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_vidSetPortBitValue+0x19c>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_vidSetPortBitValue+0x198>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	17 c0       	rjmp	.+46     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
			else if(state == INPUT)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	88 23       	and	r24, r24
    1380:	a1 f4       	brne	.+40     	; 0x13aa <DIO_vidSetPortBitValue+0x1d4>
				clr_bit(PORTD_REG, port_number);
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_vidSetPortBitValue+0x1ca>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_vidSetPortBitValue+0x1c6>
    13a4:	80 95       	com	r24
    13a6:	84 23       	and	r24, r20
    13a8:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <DIO_vidSetPintBitValue>:



// PINx Bit value
void DIO_vidSetPintBitValue(u8 portname, u8 port_number, u8 state)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_vidSetPintBitValue+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_vidSetPintBitValue+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	6a 83       	std	Y+2, r22	; 0x02
    13cc:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3d 83       	std	Y+5, r19	; 0x05
    13d6:	2c 83       	std	Y+4, r18	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_vidSetPintBitValue+0x2a>
    13e2:	47 c0       	rjmp	.+142    	; 0x1472 <DIO_vidSetPintBitValue+0xb8>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <DIO_vidSetPintBitValue+0x3e>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	71 f0       	breq	.+28     	; 0x1412 <DIO_vidSetPintBitValue+0x58>
    13f6:	cb c0       	rjmp	.+406    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_vidSetPintBitValue+0x4a>
    1402:	67 c0       	rjmp	.+206    	; 0x14d2 <DIO_vidSetPintBitValue+0x118>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <DIO_vidSetPintBitValue+0x56>
    140e:	91 c0       	rjmp	.+290    	; 0x1532 <DIO_vidSetPintBitValue+0x178>
    1410:	be c0       	rjmp	.+380    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
	{
		case PORTA:
			if (state == OUTPUT)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	a1 f4       	brne	.+40     	; 0x1440 <DIO_vidSetPintBitValue+0x86>
				set_bit(PINA_REG, port_number);
    1418:	a9 e3       	ldi	r26, 0x39	; 57
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e9 e3       	ldi	r30, 0x39	; 57
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_vidSetPintBitValue+0x7c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_vidSetPintBitValue+0x78>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	a7 c0       	rjmp	.+334    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 23       	and	r24, r24
    1444:	09 f0       	breq	.+2      	; 0x1448 <DIO_vidSetPintBitValue+0x8e>
    1446:	a3 c0       	rjmp	.+326    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINA_REG, port_number);
    1448:	a9 e3       	ldi	r26, 0x39	; 57
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_vidSetPintBitValue+0xac>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_vidSetPintBitValue+0xa8>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	8e c0       	rjmp	.+284    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTB:
			if (state == OUTPUT)
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	a1 f4       	brne	.+40     	; 0x14a0 <DIO_vidSetPintBitValue+0xe6>
				set_bit(PINB_REG, port_number);
    1478:	a6 e3       	ldi	r26, 0x36	; 54
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e6 e3       	ldi	r30, 0x36	; 54
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_vidSetPintBitValue+0xdc>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_vidSetPintBitValue+0xd8>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	77 c0       	rjmp	.+238    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <DIO_vidSetPintBitValue+0xee>
    14a6:	73 c0       	rjmp	.+230    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINB_REG, port_number);
    14a8:	a6 e3       	ldi	r26, 0x36	; 54
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_vidSetPintBitValue+0x10c>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_vidSetPintBitValue+0x108>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	5e c0       	rjmp	.+188    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTC:
			if (state == OUTPUT)
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <DIO_vidSetPintBitValue+0x146>
				set_bit(PINC_REG, port_number);
    14d8:	a3 e3       	ldi	r26, 0x33	; 51
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e3       	ldi	r30, 0x33	; 51
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_vidSetPintBitValue+0x13c>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_vidSetPintBitValue+0x138>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	47 c0       	rjmp	.+142    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <DIO_vidSetPintBitValue+0x14e>
    1506:	43 c0       	rjmp	.+134    	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PINC_REG, port_number);
    1508:	a3 e3       	ldi	r26, 0x33	; 51
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e3       	ldi	r30, 0x33	; 51
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_vidSetPintBitValue+0x16c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_vidSetPintBitValue+0x168>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	2e c0       	rjmp	.+92     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else;
			break;

		case PORTD:
			if (state == OUTPUT)
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	a1 f4       	brne	.+40     	; 0x1560 <DIO_vidSetPintBitValue+0x1a6>
				set_bit(PIND_REG, port_number);
    1538:	a0 e3       	ldi	r26, 0x30	; 48
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e0 e3       	ldi	r30, 0x30	; 48
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_vidSetPintBitValue+0x19c>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <DIO_vidSetPintBitValue+0x198>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	17 c0       	rjmp	.+46     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
			else if(state == INPUT)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 23       	and	r24, r24
    1564:	a1 f4       	brne	.+40     	; 0x158e <DIO_vidSetPintBitValue+0x1d4>
				clr_bit(PIND_REG, port_number);
    1566:	a0 e3       	ldi	r26, 0x30	; 48
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e0 e3       	ldi	r30, 0x30	; 48
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_vidSetPintBitValue+0x1ca>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_vidSetPintBitValue+0x1c6>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
			break;

		default:
			break;
	}
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <DIO_GetPortValue>:

u8 DIO_GetPortValue(u8 portname)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_GetPortValue+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_GetPortValue+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 tmp = 0;
    15ac:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3c 83       	std	Y+4, r19	; 0x04
    15b6:	2b 83       	std	Y+3, r18	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	91 05       	cpc	r25, r1
    15c0:	d1 f0       	breq	.+52     	; 0x15f6 <DIO_GetPortValue+0x58>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <DIO_GetPortValue+0x38>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 f0       	breq	.+24     	; 0x15ec <DIO_GetPortValue+0x4e>
    15d4:	1e c0       	rjmp	.+60     	; 0x1612 <DIO_GetPortValue+0x74>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <DIO_GetPortValue+0x62>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	91 05       	cpc	r25, r1
    15e8:	81 f0       	breq	.+32     	; 0x160a <DIO_GetPortValue+0x6c>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <DIO_GetPortValue+0x74>
	{
		case PORTA:
			tmp = PORTA_REG;
    15ec:	eb e3       	ldi	r30, 0x3B	; 59
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTB:
			tmp = PORTB_REG;
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTC:
			tmp = PORTC_REG;
    1600:	e5 e3       	ldi	r30, 0x35	; 53
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <DIO_GetPortValue+0x74>
			break;

		case PORTD:
			tmp = PORTD_REG;
    160a:	e2 e3       	ldi	r30, 0x32	; 50
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 portname)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_GetPinValue+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_GetPinValue+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = 0;
    1630:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3c 83       	std	Y+4, r19	; 0x04
    163a:	2b 83       	std	Y+3, r18	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	d1 f0       	breq	.+52     	; 0x167a <DIO_GetPinValue+0x58>
    1646:	2b 81       	ldd	r18, Y+3	; 0x03
    1648:	3c 81       	ldd	r19, Y+4	; 0x04
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	2c f4       	brge	.+10     	; 0x165a <DIO_GetPinValue+0x38>
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	61 f0       	breq	.+24     	; 0x1670 <DIO_GetPinValue+0x4e>
    1658:	1e c0       	rjmp	.+60     	; 0x1696 <DIO_GetPinValue+0x74>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	81 f0       	breq	.+32     	; 0x1684 <DIO_GetPinValue+0x62>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	91 05       	cpc	r25, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <DIO_GetPinValue+0x6c>
    166e:	13 c0       	rjmp	.+38     	; 0x1696 <DIO_GetPinValue+0x74>
	{
		case PORTA:
			value = PINA_REG;
    1670:	e9 e3       	ldi	r30, 0x39	; 57
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	0e c0       	rjmp	.+28     	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTB:
			value = PINB_REG;
    167a:	e6 e3       	ldi	r30, 0x36	; 54
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTC:
			value = PINC_REG;
    1684:	e3 e3       	ldi	r30, 0x33	; 51
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <DIO_GetPinValue+0x74>
			break;

		case PORTD:
			value = PIND_REG;
    168e:	e0 e3       	ldi	r30, 0x30	; 48
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return value;
    1696:	89 81       	ldd	r24, Y+1	; 0x01
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <DIO_u8GetPortBitValue>:

u8 DIO_u8GetPortBitValue(u8 portname, u8 Pin_number)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO_u8GetPortBitValue+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_u8GetPortBitValue+0x8>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	8a 83       	std	Y+2, r24	; 0x02
    16b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 tmp = 0;
    16b8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3d 83       	std	Y+5, r19	; 0x05
    16c2:	2c 83       	std	Y+4, r18	; 0x04
    16c4:	4c 81       	ldd	r20, Y+4	; 0x04
    16c6:	5d 81       	ldd	r21, Y+5	; 0x05
    16c8:	41 30       	cpi	r20, 0x01	; 1
    16ca:	51 05       	cpc	r21, r1
    16cc:	59 f1       	breq	.+86     	; 0x1724 <DIO_u8GetPortBitValue+0x7e>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	91 05       	cpc	r25, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <DIO_u8GetPortBitValue+0x3e>
    16d8:	2c 81       	ldd	r18, Y+4	; 0x04
    16da:	3d 81       	ldd	r19, Y+5	; 0x05
    16dc:	21 15       	cp	r18, r1
    16de:	31 05       	cpc	r19, r1
    16e0:	69 f0       	breq	.+26     	; 0x16fc <DIO_u8GetPortBitValue+0x56>
    16e2:	5b c0       	rjmp	.+182    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
    16e4:	4c 81       	ldd	r20, Y+4	; 0x04
    16e6:	5d 81       	ldd	r21, Y+5	; 0x05
    16e8:	42 30       	cpi	r20, 0x02	; 2
    16ea:	51 05       	cpc	r21, r1
    16ec:	79 f1       	breq	.+94     	; 0x174c <DIO_u8GetPortBitValue+0xa6>
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	83 30       	cpi	r24, 0x03	; 3
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <DIO_u8GetPortBitValue+0x54>
    16f8:	3d c0       	rjmp	.+122    	; 0x1774 <DIO_u8GetPortBitValue+0xce>
    16fa:	4f c0       	rjmp	.+158    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
	{
		case PORTA:
			tmp = PORTA_REG;
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_u8GetPortBitValue+0x72>
    1714:	55 95       	asr	r21
    1716:	47 95       	ror	r20
    1718:	8a 95       	dec	r24
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_u8GetPortBitValue+0x6e>
    171c:	ca 01       	movw	r24, r20
    171e:	81 70       	andi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	3b c0       	rjmp	.+118    	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTB:
			tmp = PORTB_REG;
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_u8GetPortBitValue+0x9a>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_u8GetPortBitValue+0x96>
    1744:	ca 01       	movw	r24, r20
    1746:	81 70       	andi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	27 c0       	rjmp	.+78     	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTC:
			tmp = PORTC_REG;
    174c:	e5 e3       	ldi	r30, 0x35	; 53
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a9 01       	movw	r20, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_u8GetPortBitValue+0xc2>
    1764:	55 95       	asr	r21
    1766:	47 95       	ror	r20
    1768:	8a 95       	dec	r24
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_u8GetPortBitValue+0xbe>
    176c:	ca 01       	movw	r24, r20
    176e:	81 70       	andi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	13 c0       	rjmp	.+38     	; 0x179a <DIO_u8GetPortBitValue+0xf4>
			break;

		case PORTD:
			tmp = PORTD_REG;
    1774:	e2 e3       	ldi	r30, 0x32	; 50
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	89 83       	std	Y+1, r24	; 0x01
			tmp = get_bit(tmp,Pin_number);
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_u8GetPortBitValue+0xea>
    178c:	55 95       	asr	r21
    178e:	47 95       	ror	r20
    1790:	8a 95       	dec	r24
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_u8GetPortBitValue+0xe6>
    1794:	ca 01       	movw	r24, r20
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	89 83       	std	Y+1, r24	; 0x01
			break;

		default:
			break;
	}
	return tmp;
    179a:	89 81       	ldd	r24, Y+1	; 0x01
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <KeyPad_vidInitialize>:

u8 lcd_stage1 = 0, lcd_stage2 = 0, lcd_stage3 = 0;

// Columns are input, Rows are output
void KeyPad_vidInitialize(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	// Set low nibble columns are input and pulled up
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL1, INPUT);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL2, INPUT);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL3, INPUT);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	62 e0       	ldi	r22, 0x02	; 2
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, COL4, INPUT);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>

	// Set high nibble rows as output
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW1, OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	64 e0       	ldi	r22, 0x04	; 4
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW2, OUTPUT);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	65 e0       	ldi	r22, 0x05	; 5
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW3, OUTPUT);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	66 e0       	ldi	r22, 0x06	; 6
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>
	DIO_vidSetPinxDir(KEY_PAD_PORT, ROW4, OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	67 e0       	ldi	r22, 0x07	; 7
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 ed 06 	call	0xdda	; 0xdda <DIO_vidSetPinxDir>

	// Rows are all  zeros
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	64 e0       	ldi	r22, 0x04	; 4
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	65 e0       	ldi	r22, 0x05	; 5
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	67 e0       	ldi	r22, 0x07	; 7
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

	KeyPad_vidKey_Pressed();
    182c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <KeyPad_vidKey_Pressed>

}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <KeyPad_vidKey_Pressed>:


u8 KeyPad_vidKey_Pressed(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	6c 97       	sbiw	r28, 0x1c	; 28
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	{
		// 1st stage Make sure key is released
		do
		{
			// Rows are all  zeros
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	65 e0       	ldi	r22, 0x05	; 5
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	66 e0       	ldi	r22, 0x06	; 6
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	67 e0       	ldi	r22, 0x07	; 7
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	8f 70       	andi	r24, 0x0F	; 15
    187e:	90 70       	andi	r25, 0x00	; 0
    1880:	8f 30       	cpi	r24, 0x0F	; 15
    1882:	91 05       	cpc	r25, r1
    1884:	11 f7       	brne	.-60     	; 0x184a <KeyPad_vidKey_Pressed+0x14>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 ea       	ldi	r26, 0xA0	; 160
    188c:	b1 e4       	ldi	r27, 0x41	; 65
    188e:	89 8f       	std	Y+25, r24	; 0x19
    1890:	9a 8f       	std	Y+26, r25	; 0x1a
    1892:	ab 8f       	std	Y+27, r26	; 0x1b
    1894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	69 8d       	ldd	r22, Y+25	; 0x19
    1898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    189a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    189c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a ef       	ldi	r20, 0xFA	; 250
    18a4:	54 e4       	ldi	r21, 0x44	; 68
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <KeyPad_vidKey_Pressed+0xa2>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9c 8b       	std	Y+20, r25	; 0x14
    18d4:	8b 8b       	std	Y+19, r24	; 0x13
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <KeyPad_vidKey_Pressed+0x120>
	else if (__tmp > 65535)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <KeyPad_vidKey_Pressed+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <KeyPad_vidKey_Pressed+0x102>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1922:	89 89       	ldd	r24, Y+17	; 0x11
    1924:	9a 89       	ldd	r25, Y+18	; 0x12
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <KeyPad_vidKey_Pressed+0xf0>
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <KeyPad_vidKey_Pressed+0xe4>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <KeyPad_vidKey_Pressed+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	98 89       	ldd	r25, Y+16	; 0x10
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <KeyPad_vidKey_Pressed+0x12c>
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
			do
			{
				// delay for  noise
				_delay_ms(20);
			}
			while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	8f 70       	andi	r24, 0x0F	; 15
    1976:	90 70       	andi	r25, 0x00	; 0
    1978:	8f 30       	cpi	r24, 0x0F	; 15
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <KeyPad_vidKey_Pressed+0x14a>
    197e:	83 cf       	rjmp	.-250    	; 0x1886 <KeyPad_vidKey_Pressed+0x50>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 ea       	ldi	r26, 0xA0	; 160
    1986:	b1 e4       	ldi	r27, 0x41	; 65
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <KeyPad_vidKey_Pressed+0x19c>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <KeyPad_vidKey_Pressed+0x21a>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <KeyPad_vidKey_Pressed+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <KeyPad_vidKey_Pressed+0x1fc>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <KeyPad_vidKey_Pressed+0x1ea>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <KeyPad_vidKey_Pressed+0x1de>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <KeyPad_vidKey_Pressed+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <KeyPad_vidKey_Pressed+0x226>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01

			// Delay for De_bounce
			_delay_ms(20);
		}
		while((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0f);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	8f 30       	cpi	r24, 0x0F	; 15
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <KeyPad_vidKey_Pressed+0x244>
    1a78:	06 cf       	rjmp	.-500    	; 0x1886 <KeyPad_vidKey_Pressed+0x50>


		while(1)
		{
			// 3rd stage
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 0);
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	64 e0       	ldi	r22, 0x04	; 4
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	65 e0       	ldi	r22, 0x05	; 5
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	66 e0       	ldi	r22, 0x06	; 6
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	67 e0       	ldi	r22, 0x07	; 7
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	8f 70       	andi	r24, 0x0F	; 15
    1aae:	90 70       	andi	r25, 0x00	; 0
    1ab0:	8f 30       	cpi	r24, 0x0F	; 15
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	29 f0       	breq	.+10     	; 0x1ac0 <KeyPad_vidKey_Pressed+0x28a>
			{
				location = X;		//0
    1ab6:	80 91 c8 03 	lds	r24, 0x03C8
    1aba:	80 93 c7 03 	sts	0x03C7, r24
    1abe:	6c c0       	rjmp	.+216    	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 0);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	65 e0       	ldi	r22, 0x05	; 5
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	66 e0       	ldi	r22, 0x06	; 6
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	8f 70       	andi	r24, 0x0F	; 15
    1af4:	90 70       	andi	r25, 0x00	; 0
    1af6:	8f 30       	cpi	r24, 0x0F	; 15
    1af8:	91 05       	cpc	r25, r1
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <KeyPad_vidKey_Pressed+0x2d2>
			{
				location = X + 1;		//1
    1afc:	80 91 c8 03 	lds	r24, 0x03C8
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 c7 03 	sts	0x03C7, r24
    1b06:	48 c0       	rjmp	.+144    	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	65 e0       	ldi	r22, 0x05	; 5
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 0);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	66 e0       	ldi	r22, 0x06	; 6
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 1);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	67 e0       	ldi	r22, 0x07	; 7
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	8f 70       	andi	r24, 0x0F	; 15
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	8f 30       	cpi	r24, 0x0F	; 15
    1b40:	91 05       	cpc	r25, r1
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <KeyPad_vidKey_Pressed+0x31a>
			{
				location = X + 2;		//2
    1b44:	80 91 c8 03 	lds	r24, 0x03C8
    1b48:	8e 5f       	subi	r24, 0xFE	; 254
    1b4a:	80 93 c7 03 	sts	0x03C7, r24
    1b4e:	24 c0       	rjmp	.+72     	; 0x1b98 <KeyPad_vidKey_Pressed+0x362>
				break;
			}

			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW1, 1);
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	64 e0       	ldi	r22, 0x04	; 4
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW2, 1);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	65 e0       	ldi	r22, 0x05	; 5
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW3, 1);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	66 e0       	ldi	r22, 0x06	; 6
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
			DIO_vidSetPortBitValue(KEY_PAD_PORT, ROW4, 0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	67 e0       	ldi	r22, 0x07	; 7
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>

			if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) != 0x0f)
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8f 70       	andi	r24, 0x0F	; 15
    1b84:	90 70       	andi	r25, 0x00	; 0
    1b86:	8f 30       	cpi	r24, 0x0F	; 15
    1b88:	91 05       	cpc	r25, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <KeyPad_vidKey_Pressed+0x358>
    1b8c:	76 cf       	rjmp	.-276    	; 0x1a7a <KeyPad_vidKey_Pressed+0x244>
			{
				location = X + 3;		//3
    1b8e:	80 91 c8 03 	lds	r24, 0x03C8
    1b92:	8d 5f       	subi	r24, 0xFD	; 253
    1b94:	80 93 c7 03 	sts	0x03C7, r24

		}


		// Check for column location
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) == 0x0E)
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	8f 70       	andi	r24, 0x0F	; 15
    1ba4:	90 70       	andi	r25, 0x00	; 0
    1ba6:	8e 30       	cpi	r24, 0x0E	; 14
    1ba8:	91 05       	cpc	r25, r1
    1baa:	71 f4       	brne	.+28     	; 0x1bc8 <KeyPad_vidKey_Pressed+0x392>
			result = character[location][COL1];
    1bac:	80 91 c7 03 	lds	r24, 0x03C7
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ea 56       	subi	r30, 0x6A	; 106
    1bc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 93 c9 03 	sts	0x03C9, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0D)
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	8f 70       	andi	r24, 0x0F	; 15
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	8d 30       	cpi	r24, 0x0D	; 13
    1bd8:	91 05       	cpc	r25, r1
    1bda:	71 f4       	brne	.+28     	; 0x1bf8 <KeyPad_vidKey_Pressed+0x3c2>
			result = character[location][COL2];
    1bdc:	80 91 c7 03 	lds	r24, 0x03C7
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	fc 01       	movw	r30, r24
    1bee:	e9 56       	subi	r30, 0x69	; 105
    1bf0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 93 c9 03 	sts	0x03C9, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x0B)
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	8b 30       	cpi	r24, 0x0B	; 11
    1c08:	91 05       	cpc	r25, r1
    1c0a:	79 f4       	brne	.+30     	; 0x1c2a <KeyPad_vidKey_Pressed+0x3f4>
			result = character[location][COL3];
    1c0c:	80 91 c7 03 	lds	r24, 0x03C7
    1c10:	88 2f       	mov	r24, r24
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	fc 01       	movw	r30, r24
    1c20:	ea 56       	subi	r30, 0x6A	; 106
    1c22:	fc 4f       	sbci	r31, 0xFC	; 252
    1c24:	80 81       	ld	r24, Z
    1c26:	80 93 c9 03 	sts	0x03C9, r24
		if((DIO_GetPinValue(KEY_PAD_PORT) & 0x0f) ==  0x07)
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	87 30       	cpi	r24, 0x07	; 7
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <KeyPad_vidKey_Pressed+0x424>
			result = character[location][COL4];
    1c3e:	80 91 c7 03 	lds	r24, 0x03C7
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e7 56       	subi	r30, 0x67	; 103
    1c52:	fc 4f       	sbci	r31, 0xFC	; 252
    1c54:	80 81       	ld	r24, Z
    1c56:	80 93 c9 03 	sts	0x03C9, r24


		// change charcters by a button
		if (result == character[(X + 3) % 12][3])
    1c5a:	80 91 c8 03 	lds	r24, 0x03C8
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	03 96       	adiw	r24, 0x03	; 3
    1c64:	2c e0       	ldi	r18, 0x0C	; 12
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	0e 94 26 2c 	call	0x584c	; 0x584c <__divmodhi4>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	fc 01       	movw	r30, r24
    1c78:	e7 56       	subi	r30, 0x67	; 103
    1c7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7c:	90 81       	ld	r25, Z
    1c7e:	80 91 c9 03 	lds	r24, 0x03C9
    1c82:	98 17       	cp	r25, r24
    1c84:	69 f4       	brne	.+26     	; 0x1ca0 <KeyPad_vidKey_Pressed+0x46a>
		{
			// Change keyPad on Demand
			X = (X + 4) % 12;
    1c86:	80 91 c8 03 	lds	r24, 0x03C8
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	04 96       	adiw	r24, 0x04	; 4
    1c90:	2c e0       	ldi	r18, 0x0C	; 12
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	b9 01       	movw	r22, r18
    1c96:	0e 94 26 2c 	call	0x584c	; 0x584c <__divmodhi4>
    1c9a:	80 93 c8 03 	sts	0x03C8, r24
    1c9e:	d5 cd       	rjmp	.-1110   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
		}
		else if (result == character[11][1])
    1ca0:	90 91 c3 03 	lds	r25, 0x03C3
    1ca4:	80 91 c9 03 	lds	r24, 0x03C9
    1ca8:	98 17       	cp	r25, r24
    1caa:	21 f4       	brne	.+8      	; 0x1cb4 <KeyPad_vidKey_Pressed+0x47e>
		{
			// Change keyPad on Demand

			DEAD_SIGNAL_TERMINATE = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 c6 03 	sts	0x03C6, r24
    1cb2:	cb cd       	rjmp	.-1130   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
		}

		// Submit using equal button
		else if (result == character[(X + 3) % 12][2])
    1cb4:	80 91 c8 03 	lds	r24, 0x03C8
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	03 96       	adiw	r24, 0x03	; 3
    1cbe:	2c e0       	ldi	r18, 0x0C	; 12
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	0e 94 26 2c 	call	0x584c	; 0x584c <__divmodhi4>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	ea 56       	subi	r30, 0x6A	; 106
    1cd6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cd8:	90 81       	ld	r25, Z
    1cda:	80 91 c9 03 	lds	r24, 0x03C9
    1cde:	98 17       	cp	r25, r24
    1ce0:	f9 f4       	brne	.+62     	; 0x1d20 <KeyPad_vidKey_Pressed+0x4ea>
		{
			// Change keyPad on Demand
			LCD_vidClearOnDemand(1, 16);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	60 e1       	ldi	r22, 0x10	; 16
    1ce6:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

			// Incase of being at the beginning of the program
			if(!operation_flag)
    1cea:	80 91 14 04 	lds	r24, 0x0414
    1cee:	88 23       	and	r24, r24
    1cf0:	a1 f4       	brne	.+40     	; 0x1d1a <KeyPad_vidKey_Pressed+0x4e4>
			{
				if(BREAK_CODE)
    1cf2:	80 91 17 04 	lds	r24, 0x0417
    1cf6:	88 23       	and	r24, r24
    1cf8:	69 f0       	breq	.+26     	; 0x1d14 <KeyPad_vidKey_Pressed+0x4de>
				{
					BREAK_CODE = 0;
    1cfa:	10 92 17 04 	sts	0x0417, r1
			LCD_vidInstruction(result, write_operation, DR);
		}


	}
	return result;
    1cfe:	80 91 c9 03 	lds	r24, 0x03C9
}
    1d02:	6c 96       	adiw	r28, 0x1c	; 28
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret
				if(BREAK_CODE)
				{
					BREAK_CODE = 0;
					break;
				}
				LCD_OperateResult();
    1d14:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <LCD_OperateResult>
    1d18:	98 cd       	rjmp	.-1232   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
			}
			else
			{
					KEY_PAD_vidOperations();
    1d1a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <KEY_PAD_vidOperations>
    1d1e:	95 cd       	rjmp	.-1238   	; 0x184a <KeyPad_vidKey_Pressed+0x14>
			}
		}
		else
		{
			KeyPad_CharAccumulateString(result);
    1d20:	80 91 c9 03 	lds	r24, 0x03C9
    1d24:	0e 94 e7 10 	call	0x21ce	; 0x21ce <KeyPad_CharAccumulateString>
			LCD_vidInstruction(result, write_operation, DR);
    1d28:	80 91 c9 03 	lds	r24, 0x03C9
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    1d34:	8a cd       	rjmp	.-1260   	; 0x184a <KeyPad_vidKey_Pressed+0x14>

00001d36 <LCD_OperateResult>:
	return result;
}

// 1st stage for LCD
void LCD_OperateResult(void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <LCD_OperateResult+0x6>
    1d3c:	0f 92       	push	r0
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	u8 j = General_Purpose_String[0];
    1d42:	80 91 cb 03 	lds	r24, 0x03CB
    1d46:	89 83       	std	Y+1, r24	; 0x01
	GPS_Index = 0;
    1d48:	10 92 da 03 	sts	0x03DA, r1

	switch(j)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3b 83       	std	Y+3, r19	; 0x03
    1d54:	2a 83       	std	Y+2, r18	; 0x02
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	84 33       	cpi	r24, 0x34	; 52
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <LCD_OperateResult+0x2c>
    1d60:	4b c0       	rjmp	.+150    	; 0x1df8 <LCD_OperateResult+0xc2>
    1d62:	2a 81       	ldd	r18, Y+2	; 0x02
    1d64:	3b 81       	ldd	r19, Y+3	; 0x03
    1d66:	25 33       	cpi	r18, 0x35	; 53
    1d68:	31 05       	cpc	r19, r1
    1d6a:	84 f4       	brge	.+32     	; 0x1d8c <LCD_OperateResult+0x56>
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	82 33       	cpi	r24, 0x32	; 50
    1d72:	91 05       	cpc	r25, r1
    1d74:	49 f1       	breq	.+82     	; 0x1dc8 <LCD_OperateResult+0x92>
    1d76:	2a 81       	ldd	r18, Y+2	; 0x02
    1d78:	3b 81       	ldd	r19, Y+3	; 0x03
    1d7a:	23 33       	cpi	r18, 0x33	; 51
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	84 f5       	brge	.+96     	; 0x1de0 <LCD_OperateResult+0xaa>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	81 33       	cpi	r24, 0x31	; 49
    1d86:	91 05       	cpc	r25, r1
    1d88:	99 f0       	breq	.+38     	; 0x1db0 <LCD_OperateResult+0x7a>
    1d8a:	5e c0       	rjmp	.+188    	; 0x1e48 <LCD_OperateResult+0x112>
    1d8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d90:	26 33       	cpi	r18, 0x36	; 54
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <LCD_OperateResult+0x62>
    1d96:	44 c0       	rjmp	.+136    	; 0x1e20 <LCD_OperateResult+0xea>
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	86 33       	cpi	r24, 0x36	; 54
    1d9e:	91 05       	cpc	r25, r1
    1da0:	bc f1       	brlt	.+110    	; 0x1e10 <LCD_OperateResult+0xda>
    1da2:	2a 81       	ldd	r18, Y+2	; 0x02
    1da4:	3b 81       	ldd	r19, Y+3	; 0x03
    1da6:	27 33       	cpi	r18, 0x37	; 55
    1da8:	31 05       	cpc	r19, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <LCD_OperateResult+0x78>
    1dac:	41 c0       	rjmp	.+130    	; 0x1e30 <LCD_OperateResult+0xfa>
    1dae:	4c c0       	rjmp	.+152    	; 0x1e48 <LCD_OperateResult+0x112>
	{
		case '1':
			LCD_String("NAME:");
    1db0:	80 e6       	ldi	r24, 0x60	; 96
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit(Insert_new_book);
    1db8:	81 e3       	ldi	r24, 0x31	; 49
    1dba:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
			LCD_vidGoTo(1, 2);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
    1dc2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1dc6:	4c c0       	rjmp	.+152    	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		case '2':
			LCD_String("ID:");
    1dc8:	86 e6       	ldi	r24, 0x66	; 102
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit(Insert_new_member);
    1dd0:	82 e3       	ldi	r24, 0x32	; 50
    1dd2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
			LCD_vidGoTo(1, 2);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1dde:	40 c0       	rjmp	.+128    	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		case '3':
			LCD_String("ID:");
    1de0:	86 e6       	ldi	r24, 0x66	; 102
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit(Borrow);
    1de8:	83 e3       	ldi	r24, 0x33	; 51
    1dea:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
			LCD_vidGoTo(1, 2);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1df6:	34 c0       	rjmp	.+104    	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		case '4':
			LCD_String("ID:");
    1df8:	86 e6       	ldi	r24, 0x66	; 102
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit(Return);
    1e00:	84 e3       	ldi	r24, 0x34	; 52
    1e02:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1e0e:	28 c0       	rjmp	.+80     	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		case '5':
			LCD_String("Book Confirm OP:");
    1e10:	8a e6       	ldi	r24, 0x6A	; 106
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit('5');
    1e18:	85 e3       	ldi	r24, 0x35	; 53
    1e1a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
    1e1e:	20 c0       	rjmp	.+64     	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		case '6':
			LCD_String("Member Confirm OP:");
    1e20:	8b e7       	ldi	r24, 0x7B	; 123
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit('6');
    1e28:	86 e3       	ldi	r24, 0x36	; 54
    1e2a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
    1e2e:	18 c0       	rjmp	.+48     	; 0x1e60 <LCD_OperateResult+0x12a>

			break;

		case '7':
			LCD_String("search ID:");
    1e30:	8e e8       	ldi	r24, 0x8E	; 142
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			Operation_submit('7');
    1e38:	87 e3       	ldi	r24, 0x37	; 55
    1e3a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <Operation_submit>
			LCD_vidGoTo(1, 2);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	62 e0       	ldi	r22, 0x02	; 2
    1e42:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <LCD_OperateResult+0x12a>
			break;

		default:
			LCD_String("Invalid Operation");
    1e48:	89 e9       	ldi	r24, 0x99	; 153
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_vidClearOnDemand(1, 32);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	60 e2       	ldi	r22, 0x20	; 32
    1e54:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
			LCD_vidGoTo(1, 1);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			break;
	}
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <KEY_PAD_vidOperations>:


// 2nd stage for LCD
// Pass string to the correspoinding field inside its operation
void KEY_PAD_vidOperations(void)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <KEY_PAD_vidOperations+0x6>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	// Detect operations
	switch(operation)
    1e76:	80 91 16 04 	lds	r24, 0x0416
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	3a 83       	std	Y+2, r19	; 0x02
    1e80:	29 83       	std	Y+1, r18	; 0x01
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	9a 81       	ldd	r25, Y+2	; 0x02
    1e86:	84 33       	cpi	r24, 0x34	; 52
    1e88:	91 05       	cpc	r25, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <KEY_PAD_vidOperations+0x22>
    1e8c:	19 c1       	rjmp	.+562    	; 0x20c0 <KEY_PAD_vidOperations+0x254>
    1e8e:	29 81       	ldd	r18, Y+1	; 0x01
    1e90:	3a 81       	ldd	r19, Y+2	; 0x02
    1e92:	25 33       	cpi	r18, 0x35	; 53
    1e94:	31 05       	cpc	r19, r1
    1e96:	94 f4       	brge	.+36     	; 0x1ebc <KEY_PAD_vidOperations+0x50>
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	82 33       	cpi	r24, 0x32	; 50
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <KEY_PAD_vidOperations+0x38>
    1ea2:	82 c0       	rjmp	.+260    	; 0x1fa8 <KEY_PAD_vidOperations+0x13c>
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea8:	23 33       	cpi	r18, 0x33	; 51
    1eaa:	31 05       	cpc	r19, r1
    1eac:	0c f0       	brlt	.+2      	; 0x1eb0 <KEY_PAD_vidOperations+0x44>
    1eae:	c2 c0       	rjmp	.+388    	; 0x2034 <KEY_PAD_vidOperations+0x1c8>
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	81 33       	cpi	r24, 0x31	; 49
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	a1 f0       	breq	.+40     	; 0x1ee2 <KEY_PAD_vidOperations+0x76>
    1eba:	80 c1       	rjmp	.+768    	; 0x21bc <KEY_PAD_vidOperations+0x350>
    1ebc:	29 81       	ldd	r18, Y+1	; 0x01
    1ebe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec0:	26 33       	cpi	r18, 0x36	; 54
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <KEY_PAD_vidOperations+0x5c>
    1ec6:	49 c1       	rjmp	.+658    	; 0x215a <KEY_PAD_vidOperations+0x2ee>
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	86 33       	cpi	r24, 0x36	; 54
    1ece:	91 05       	cpc	r25, r1
    1ed0:	0c f4       	brge	.+2      	; 0x1ed4 <KEY_PAD_vidOperations+0x68>
    1ed2:	3c c1       	rjmp	.+632    	; 0x214c <KEY_PAD_vidOperations+0x2e0>
    1ed4:	29 81       	ldd	r18, Y+1	; 0x01
    1ed6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed8:	27 33       	cpi	r18, 0x37	; 55
    1eda:	31 05       	cpc	r19, r1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <KEY_PAD_vidOperations+0x74>
    1ede:	44 c1       	rjmp	.+648    	; 0x2168 <KEY_PAD_vidOperations+0x2fc>
    1ee0:	6d c1       	rjmp	.+730    	; 0x21bc <KEY_PAD_vidOperations+0x350>
	{
		case Insert_new_book:
			// Sequential insertion
			
			if(!Name_General_flag)
    1ee2:	80 91 12 04 	lds	r24, 0x0412
    1ee6:	88 23       	and	r24, r24
    1ee8:	a1 f4       	brne	.+40     	; 0x1f12 <KEY_PAD_vidOperations+0xa6>
			{
				// Call to insert name and submit the string
				CopyString(Name);
    1eea:	8e ee       	ldi	r24, 0xEE	; 238
    1eec:	93 e0       	ldi	r25, 0x03	; 3
    1eee:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				Name_General_flag = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 12 04 	sts	0x0412, r24

				LCD_String("ISBN");
    1ef8:	8b ea       	ldi	r24, 0xAB	; 171
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1f00:	81 e1       	ldi	r24, 0x11	; 17
    1f02:	60 e2       	ldi	r22, 0x20	; 32
    1f04:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1f10:	46 c0       	rjmp	.+140    	; 0x1f9e <KEY_PAD_vidOperations+0x132>
			}
			else if(!ISBN_flag)
    1f12:	80 91 11 04 	lds	r24, 0x0411
    1f16:	88 23       	and	r24, r24
    1f18:	a1 f4       	brne	.+40     	; 0x1f42 <KEY_PAD_vidOperations+0xd6>
			{
				// Call to submit ISBN and submit the string
				CopyString(serial);
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	94 e0       	ldi	r25, 0x04	; 4
    1f1e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				ISBN_flag = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 11 04 	sts	0x0411, r24

				LCD_String("COPIES:");
    1f28:	80 eb       	ldi	r24, 0xB0	; 176
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1f30:	81 e1       	ldi	r24, 0x11	; 17
    1f32:	60 e2       	ldi	r22, 0x20	; 32
    1f34:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1f40:	2e c0       	rjmp	.+92     	; 0x1f9e <KEY_PAD_vidOperations+0x132>
			}
			else if(!copies_flag)
    1f42:	80 91 13 04 	lds	r24, 0x0413
    1f46:	88 23       	and	r24, r24
    1f48:	a1 f4       	brne	.+40     	; 0x1f72 <KEY_PAD_vidOperations+0x106>
			{
				// Call to submit copies and submit the string
				copies = StringToInt();
    1f4a:	0e 94 07 11 	call	0x220e	; 0x220e <StringToInt>
    1f4e:	80 93 e0 03 	sts	0x03E0, r24
				copies_flag = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 13 04 	sts	0x0413, r24

				LCD_String("Confirm");
    1f58:	88 eb       	ldi	r24, 0xB8	; 184
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1f60:	81 e1       	ldi	r24, 0x11	; 17
    1f62:	60 e2       	ldi	r22, 0x20	; 32
    1f64:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	62 e0       	ldi	r22, 0x02	; 2
    1f6c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1f70:	16 c0       	rjmp	.+44     	; 0x1f9e <KEY_PAD_vidOperations+0x132>
			}
			else
			{
				// Make sure you checked for 3 inputs
				BOOKS_vidInsertion(serial, Name, copies);
    1f72:	20 91 e0 03 	lds	r18, 0x03E0
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	94 e0       	ldi	r25, 0x04	; 4
    1f7a:	4e ee       	ldi	r20, 0xEE	; 238
    1f7c:	53 e0       	ldi	r21, 0x03	; 3
    1f7e:	ba 01       	movw	r22, r20
    1f80:	42 2f       	mov	r20, r18
    1f82:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
					
				// Reset for recheck
				Name_General_flag = 0;
    1f86:	10 92 12 04 	sts	0x0412, r1
				copies_flag = 0;
    1f8a:	10 92 13 04 	sts	0x0413, r1
				ISBN_flag = 0;
    1f8e:	10 92 11 04 	sts	0x0411, r1
				LCD_vidClearOnDemand(17, 32);
    1f92:	81 e1       	ldi	r24, 0x11	; 17
    1f94:	60 e2       	ldi	r22, 0x20	; 32
    1f96:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				Operation_Reset();
    1f9a:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>

			}
			
			GPS_Index = 0;
    1f9e:	10 92 da 03 	sts	0x03DA, r1
			GPS_Reset();
    1fa2:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
    1fa6:	0e c1       	rjmp	.+540    	; 0x21c4 <KEY_PAD_vidOperations+0x358>
			
			
		case Insert_new_member:
			// Sequential insertion

			if(!id_flag)
    1fa8:	80 91 0f 04 	lds	r24, 0x040F
    1fac:	88 23       	and	r24, r24
    1fae:	a1 f4       	brne	.+40     	; 0x1fd8 <KEY_PAD_vidOperations+0x16c>
			{
				// return to insert id and submit the string 
				CopyString(id);
    1fb0:	8b ed       	ldi	r24, 0xDB	; 219
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				id_flag = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 0f 04 	sts	0x040F, r24

				LCD_String("NAME:");
    1fbe:	80 e6       	ldi	r24, 0x60	; 96
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1fc6:	81 e1       	ldi	r24, 0x11	; 17
    1fc8:	60 e2       	ldi	r22, 0x20	; 32
    1fca:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    1fd6:	29 c0       	rjmp	.+82     	; 0x202a <KEY_PAD_vidOperations+0x1be>
			}
			else if(!Name_General_flag)
    1fd8:	80 91 12 04 	lds	r24, 0x0412
    1fdc:	88 23       	and	r24, r24
    1fde:	a1 f4       	brne	.+40     	; 0x2008 <KEY_PAD_vidOperations+0x19c>
			{
				// return to submit ISBN and submit the string
				CopyString(Name);
    1fe0:	8e ee       	ldi	r24, 0xEE	; 238
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				Name_General_flag = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 12 04 	sts	0x0412, r24

				LCD_String("Confirm");
    1fee:	88 eb       	ldi	r24, 0xB8	; 184
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    1ff6:	81 e1       	ldi	r24, 0x11	; 17
    1ff8:	60 e2       	ldi	r22, 0x20	; 32
    1ffa:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	62 e0       	ldi	r22, 0x02	; 2
    2002:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    2006:	11 c0       	rjmp	.+34     	; 0x202a <KEY_PAD_vidOperations+0x1be>
			}
			else
			{
				LinkedList_vidInsertion(id, Name);
    2008:	8b ed       	ldi	r24, 0xDB	; 219
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	2e ee       	ldi	r18, 0xEE	; 238
    200e:	33 e0       	ldi	r19, 0x03	; 3
    2010:	b9 01       	movw	r22, r18
    2012:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>

				// Reset for recheck
				id_flag = 0;
    2016:	10 92 0f 04 	sts	0x040F, r1
				Name_General_flag = 0;
    201a:	10 92 12 04 	sts	0x0412, r1
				LCD_vidClearOnDemand(17, 32);
    201e:	81 e1       	ldi	r24, 0x11	; 17
    2020:	60 e2       	ldi	r22, 0x20	; 32
    2022:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

				Operation_Reset();
    2026:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
			}
			
			GPS_Index = 0;
    202a:	10 92 da 03 	sts	0x03DA, r1
			GPS_Reset();
    202e:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
    2032:	c8 c0       	rjmp	.+400    	; 0x21c4 <KEY_PAD_vidOperations+0x358>


		case Borrow:
			// Sequential insertion

			if(!id_flag)
    2034:	80 91 0f 04 	lds	r24, 0x040F
    2038:	88 23       	and	r24, r24
    203a:	a1 f4       	brne	.+40     	; 0x2064 <KEY_PAD_vidOperations+0x1f8>
			{
				// return to insert id and submit the string 
				CopyString(id);
    203c:	8b ed       	ldi	r24, 0xDB	; 219
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				id_flag = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 0f 04 	sts	0x040F, r24

				LCD_String("ISBN");
    204a:	8b ea       	ldi	r24, 0xAB	; 171
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2052:	81 e1       	ldi	r24, 0x11	; 17
    2054:	60 e2       	ldi	r22, 0x20	; 32
    2056:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	62 e0       	ldi	r22, 0x02	; 2
    205e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    2062:	29 c0       	rjmp	.+82     	; 0x20b6 <KEY_PAD_vidOperations+0x24a>
			}
			else if(!ISBN_flag)
    2064:	80 91 11 04 	lds	r24, 0x0411
    2068:	88 23       	and	r24, r24
    206a:	a1 f4       	brne	.+40     	; 0x2094 <KEY_PAD_vidOperations+0x228>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	94 e0       	ldi	r25, 0x04	; 4
    2070:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				ISBN_flag = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	80 93 11 04 	sts	0x0411, r24

				LCD_String("Confirm");
    207a:	88 eb       	ldi	r24, 0xB8	; 184
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2082:	81 e1       	ldi	r24, 0x11	; 17
    2084:	60 e2       	ldi	r22, 0x20	; 32
    2086:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <KEY_PAD_vidOperations+0x24a>
			}
			else
			{
				Borrow_vid(id, serial);
    2094:	8b ed       	ldi	r24, 0xDB	; 219
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	22 e0       	ldi	r18, 0x02	; 2
    209a:	34 e0       	ldi	r19, 0x04	; 4
    209c:	b9 01       	movw	r22, r18
    209e:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <Borrow_vid>
			
				// Reset for checking
				id_flag = 0;
    20a2:	10 92 0f 04 	sts	0x040F, r1
				ISBN_flag = 0;
    20a6:	10 92 11 04 	sts	0x0411, r1
				LCD_vidClearOnDemand(17, 32);
    20aa:	81 e1       	ldi	r24, 0x11	; 17
    20ac:	60 e2       	ldi	r22, 0x20	; 32
    20ae:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				Operation_Reset();
    20b2:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
			}

			GPS_Index = 0;
    20b6:	10 92 da 03 	sts	0x03DA, r1
			GPS_Reset();
    20ba:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
    20be:	82 c0       	rjmp	.+260    	; 0x21c4 <KEY_PAD_vidOperations+0x358>
			break;

		case Return:
			// Sequential insertion
		
			if(!id_flag)
    20c0:	80 91 0f 04 	lds	r24, 0x040F
    20c4:	88 23       	and	r24, r24
    20c6:	a1 f4       	brne	.+40     	; 0x20f0 <KEY_PAD_vidOperations+0x284>
			{
				// return to insert id and submit the string 
				CopyString(id);
    20c8:	8b ed       	ldi	r24, 0xDB	; 219
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				id_flag = 1;	
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 0f 04 	sts	0x040F, r24

				LCD_String("ISBN");
    20d6:	8b ea       	ldi	r24, 0xAB	; 171
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    20de:	81 e1       	ldi	r24, 0x11	; 17
    20e0:	60 e2       	ldi	r22, 0x20	; 32
    20e2:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    20ee:	29 c0       	rjmp	.+82     	; 0x2142 <KEY_PAD_vidOperations+0x2d6>
			}
			else if(!ISBN_flag)
    20f0:	80 91 11 04 	lds	r24, 0x0411
    20f4:	88 23       	and	r24, r24
    20f6:	a1 f4       	brne	.+40     	; 0x2120 <KEY_PAD_vidOperations+0x2b4>
			{
				// return to submit ISBN and submit the string
				CopyString(serial);
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	94 e0       	ldi	r25, 0x04	; 4
    20fc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				ISBN_flag = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 93 11 04 	sts	0x0411, r24

				LCD_String("Confirm");
    2106:	88 eb       	ldi	r24, 0xB8	; 184
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    210e:	81 e1       	ldi	r24, 0x11	; 17
    2110:	60 e2       	ldi	r22, 0x20	; 32
    2112:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    211e:	11 c0       	rjmp	.+34     	; 0x2142 <KEY_PAD_vidOperations+0x2d6>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				RETURN_vid(id, serial);
    2120:	8b ed       	ldi	r24, 0xDB	; 219
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	22 e0       	ldi	r18, 0x02	; 2
    2126:	34 e0       	ldi	r19, 0x04	; 4
    2128:	b9 01       	movw	r22, r18
    212a:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <RETURN_vid>
				id_flag = 0;
    212e:	10 92 0f 04 	sts	0x040F, r1
				ISBN_flag = 0;
    2132:	10 92 11 04 	sts	0x0411, r1
				LCD_vidClearOnDemand(17, 32);
    2136:	81 e1       	ldi	r24, 0x11	; 17
    2138:	60 e2       	ldi	r22, 0x20	; 32
    213a:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				Operation_Reset();
    213e:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
			}
			
			GPS_Index = 0;
    2142:	10 92 da 03 	sts	0x03DA, r1
			GPS_Reset();
    2146:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
    214a:	3c c0       	rjmp	.+120    	; 0x21c4 <KEY_PAD_vidOperations+0x358>
			break;
			
		// Shows all books in library
		case '5':
			BOOKS_show();
    214c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <BOOKS_show>
			GPS_Index = 0;
    2150:	10 92 da 03 	sts	0x03DA, r1
			Operation_Reset();
    2154:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
    2158:	35 c0       	rjmp	.+106    	; 0x21c4 <KEY_PAD_vidOperations+0x358>

			break;

		// Shows all member
		case '6':
			LinkedList_show();
    215a:	0e 94 44 25 	call	0x4a88	; 0x4a88 <LinkedList_show>
			GPS_Index = 0;
    215e:	10 92 da 03 	sts	0x03DA, r1
			Operation_Reset();
    2162:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
    2166:	2e c0       	rjmp	.+92     	; 0x21c4 <KEY_PAD_vidOperations+0x358>
			break;

		// Gives info about specific member
		case '7':
			if(!id_flag)
    2168:	80 91 0f 04 	lds	r24, 0x040F
    216c:	88 23       	and	r24, r24
    216e:	a1 f4       	brne	.+40     	; 0x2198 <KEY_PAD_vidOperations+0x32c>
			{
				// return to submit ID
				CopyString(id);
    2170:	8b ed       	ldi	r24, 0xDB	; 219
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	0e 94 71 11 	call	0x22e2	; 0x22e2 <CopyString>
				id_flag = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 0f 04 	sts	0x040F, r24

				LCD_String("Confirm");
    217e:	88 eb       	ldi	r24, 0xB8	; 184
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				LCD_vidClearOnDemand(17, 32);
    2186:	81 e1       	ldi	r24, 0x11	; 17
    2188:	60 e2       	ldi	r22, 0x20	; 32
    218a:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				LCD_vidGoTo(1, 2);
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <KEY_PAD_vidOperations+0x346>
			}
			else
			{
				// Insert into the list and set ready to overwrite
				LinkedList_vidSearch(id, 1);
    2198:	8b ed       	ldi	r24, 0xDB	; 219
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	0e 94 85 21 	call	0x430a	; 0x430a <LinkedList_vidSearch>
				id_flag = 0;
    21a2:	10 92 0f 04 	sts	0x040F, r1
				LCD_vidClearOnDemand(17, 32);
    21a6:	81 e1       	ldi	r24, 0x11	; 17
    21a8:	60 e2       	ldi	r22, 0x20	; 32
    21aa:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
				Operation_Reset();
    21ae:	0e 94 a7 11 	call	0x234e	; 0x234e <Operation_Reset>
			}

			GPS_Index = 0;
    21b2:	10 92 da 03 	sts	0x03DA, r1
			GPS_Reset();
    21b6:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <KEY_PAD_vidOperations+0x358>
			break;

		default:
			GPS_Reset();
    21bc:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
			GPS_Index = 0;
    21c0:	10 92 da 03 	sts	0x03DA, r1
			break;
	}
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <KeyPad_CharAccumulateString>:


// Fetch string for every new input
void KeyPad_CharAccumulateString(u8 result)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	89 83       	std	Y+1, r24	; 0x01
	// For new inputs remeber to set GPS_Index = 0
	General_Purpose_String[GPS_Index] = result;
    21da:	80 91 da 03 	lds	r24, 0x03DA
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	fc 01       	movw	r30, r24
    21e4:	e5 53       	subi	r30, 0x35	; 53
    21e6:	fc 4f       	sbci	r31, 0xFC	; 252
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	80 83       	st	Z, r24
	GPS_Index++;
    21ec:	80 91 da 03 	lds	r24, 0x03DA
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	80 93 da 03 	sts	0x03DA, r24
	General_Purpose_String[GPS_Index] = '\0';
    21f6:	80 91 da 03 	lds	r24, 0x03DA
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	fc 01       	movw	r30, r24
    2200:	e5 53       	subi	r30, 0x35	; 53
    2202:	fc 4f       	sbci	r31, 0xFC	; 252
    2204:	10 82       	st	Z, r1

}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <StringToInt>:


// From string of chars to int
short int StringToInt(void)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <StringToInt+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <StringToInt+0x8>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	u8 j = 0, times = 1;
    221a:	1c 82       	std	Y+4, r1	; 0x04
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	8b 83       	std	Y+3, r24	; 0x03
	u16 sum = 0;
    2220:	1a 82       	std	Y+2, r1	; 0x02
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	18 c0       	rjmp	.+48     	; 0x2256 <StringToInt+0x48>

	// Get string length
	while(General_Purpose_String[j] != '\0')
	{
		if(!j)
    2226:	8c 81       	ldd	r24, Y+4	; 0x04
    2228:	88 23       	and	r24, r24
    222a:	21 f4       	brne	.+8      	; 0x2234 <StringToInt+0x26>
		{
			j++;
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	8c 83       	std	Y+4, r24	; 0x04
    2232:	11 c0       	rjmp	.+34     	; 0x2256 <StringToInt+0x48>
		}
		else
		{
			j++;
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	8c 83       	std	Y+4, r24	; 0x04
			times *= 10;
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c 01       	movw	r18, r24
    2242:	22 0f       	add	r18, r18
    2244:	33 1f       	adc	r19, r19
    2246:	c9 01       	movw	r24, r18
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	82 0f       	add	r24, r18
    2252:	93 1f       	adc	r25, r19
    2254:	8b 83       	std	Y+3, r24	; 0x03
{
	u8 j = 0, times = 1;
	u16 sum = 0;

	// Get string length
	while(General_Purpose_String[j] != '\0')
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	fc 01       	movw	r30, r24
    225e:	e5 53       	subi	r30, 0x35	; 53
    2260:	fc 4f       	sbci	r31, 0xFC	; 252
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	f9 f6       	brne	.-66     	; 0x2226 <StringToInt+0x18>
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    2268:	1c 82       	std	Y+4, r1	; 0x04
    226a:	29 c0       	rjmp	.+82     	; 0x22be <StringToInt+0xb0>
	{
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	e5 53       	subi	r30, 0x35	; 53
    2276:	fc 4f       	sbci	r31, 0xFC	; 252
    2278:	80 81       	ld	r24, Z
    227a:	90 e3       	ldi	r25, 0x30	; 48
    227c:	69 2f       	mov	r22, r25
    227e:	0e 94 06 2c 	call	0x580c	; 0x580c <__udivmodqi4>
    2282:	89 2f       	mov	r24, r25
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	ac 01       	movw	r20, r24
    2290:	24 9f       	mul	r18, r20
    2292:	c0 01       	movw	r24, r0
    2294:	25 9f       	mul	r18, r21
    2296:	90 0d       	add	r25, r0
    2298:	34 9f       	mul	r19, r20
    229a:	90 0d       	add	r25, r0
    229c:	11 24       	eor	r1, r1
    229e:	9c 01       	movw	r18, r24
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	82 0f       	add	r24, r18
    22a6:	93 1f       	adc	r25, r19
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
		times /=10;
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9a e0       	ldi	r25, 0x0A	; 10
    22b0:	69 2f       	mov	r22, r25
    22b2:	0e 94 06 2c 	call	0x580c	; 0x580c <__udivmodqi4>
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		}
	}


	// Get serial number from string
	for(j = 0; General_Purpose_String[j] != '\0'; j--)
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	81 50       	subi	r24, 0x01	; 1
    22bc:	8c 83       	std	Y+4, r24	; 0x04
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	fc 01       	movw	r30, r24
    22c6:	e5 53       	subi	r30, 0x35	; 53
    22c8:	fc 4f       	sbci	r31, 0xFC	; 252
    22ca:	80 81       	ld	r24, Z
    22cc:	88 23       	and	r24, r24
    22ce:	71 f6       	brne	.-100    	; 0x226c <StringToInt+0x5e>
		// Serial is global variable
		sum += (General_Purpose_String[j] % 48)* times;
		times /=10;
	}

	return sum;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <CopyString>:


// Copy string
void CopyString(char *ptr)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <CopyString+0x6>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	9b 83       	std	Y+3, r25	; 0x03
    22f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 j = 0;
    22f2:	19 82       	std	Y+1, r1	; 0x01

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	13 c0       	rjmp	.+38     	; 0x231e <CopyString+0x3c>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	dc 01       	movw	r26, r24
    2304:	a2 0f       	add	r26, r18
    2306:	b3 1f       	adc	r27, r19
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	fc 01       	movw	r30, r24
    2310:	e5 53       	subi	r30, 0x35	; 53
    2312:	fc 4f       	sbci	r31, 0xFC	; 252
    2314:	80 81       	ld	r24, Z
    2316:	8c 93       	st	X, r24
void CopyString(char *ptr)
{
	u8 j = 0;

	// Get Name
	for(j = 0; General_Purpose_String[j] != '\0'; j++)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	8f 5f       	subi	r24, 0xFF	; 255
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	fc 01       	movw	r30, r24
    2326:	e5 53       	subi	r30, 0x35	; 53
    2328:	fc 4f       	sbci	r31, 0xFC	; 252
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	21 f7       	brne	.-56     	; 0x22f8 <CopyString+0x16>
	{
		// Serial is global variable
		ptr[j] = (General_Purpose_String[j]);

	}
	ptr[j] = '\0';
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	10 82       	st	Z, r1
}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <Operation_Reset>:


// Reset after executing the current operation
void Operation_Reset(void)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	// Reset operation fields
	operation = 0;
    2356:	10 92 16 04 	sts	0x0416, r1
	operation_flag = 0;
    235a:	10 92 14 04 	sts	0x0414, r1
	GPS_Reset();
    235e:	0e 94 b7 11 	call	0x236e	; 0x236e <GPS_Reset>
	BREAK_CODE = 1;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 17 04 	sts	0x0417, r24

}
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <GPS_Reset>:


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    2378:	19 82       	std	Y+1, r1	; 0x01
    237a:	0b c0       	rjmp	.+22     	; 0x2392 <GPS_Reset+0x24>
	{
		General_Purpose_String[i] = '0';
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	fc 01       	movw	r30, r24
    2384:	e5 53       	subi	r30, 0x35	; 53
    2386:	fc 4f       	sbci	r31, 0xFC	; 252
    2388:	80 e3       	ldi	r24, 0x30	; 48
    238a:	80 83       	st	Z, r24


// Reset General_Purpose_string with '0' for operation's not to accumulate
void GPS_Reset(void)
{
	for(u8 i = 0; i < sizeof(General_Purpose_String); i++)
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	8f 5f       	subi	r24, 0xFF	; 255
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	8f 30       	cpi	r24, 0x0F	; 15
    2396:	90 f3       	brcs	.-28     	; 0x237c <GPS_Reset+0xe>
	{
		General_Purpose_String[i] = '0';
	}
}
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <Operation_submit>:


// Submit operation to execute in the next loop
void Operation_submit(char x)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	0f 92       	push	r0
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	89 83       	std	Y+1, r24	; 0x01
	// Clear Display
	LCD_vidClearOnDemand(17, 32);
    23ac:	81 e1       	ldi	r24, 0x11	; 17
    23ae:	60 e2       	ldi	r22, 0x20	; 32
    23b0:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

	// Submit operation global variable
	operation = x;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	80 93 16 04 	sts	0x0416, r24
	operation_flag = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	80 93 14 04 	sts	0x0414, r24
}
    23c0:	0f 90       	pop	r0
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <LCD_vidInitialize>:
  */


// INITIALIZATION, always start an LCD with
void LCD_vidInitialize(void)
{
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	c6 55       	subi	r28, 0x56	; 86
    23d6:	d0 40       	sbci	r29, 0x00	; 0
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
	// Set PORTD, PORTC as output by default
	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);	// PORTC
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
	DIO_vidSetPortxDir(LCD_PORT_CONTROL, 1);	// PORTD
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>

	// RS and RW = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>


	// Function Set, F = 0, DL = 1, N = 1
	LCD_vidInstruction(0X38, write_operation, IR);
    2406:	88 e3       	ldi	r24, 0x38	; 56
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    2410:	fe 01       	movw	r30, r28
    2412:	ed 5a       	subi	r30, 0xAD	; 173
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e3       	ldi	r26, 0x30	; 48
    241c:	b1 e4       	ldi	r27, 0x41	; 65
    241e:	80 83       	st	Z, r24
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	a2 83       	std	Z+2, r26	; 0x02
    2424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2426:	8e 01       	movw	r16, r28
    2428:	01 5b       	subi	r16, 0xB1	; 177
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	ed 5a       	subi	r30, 0xAD	; 173
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	2b ea       	ldi	r18, 0xAB	; 171
    243c:	3a ea       	ldi	r19, 0xAA	; 170
    243e:	4a e2       	ldi	r20, 0x2A	; 42
    2440:	50 e4       	ldi	r21, 0x40	; 64
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	80 83       	st	Z, r24
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	a2 83       	std	Z+2, r26	; 0x02
    2452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2454:	fe 01       	movw	r30, r28
    2456:	e1 5b       	subi	r30, 0xB1	; 177
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	34 f4       	brge	.+12     	; 0x247e <LCD_vidInitialize+0xb6>
		__ticks = 1;
    2472:	fe 01       	movw	r30, r28
    2474:	e2 5b       	subi	r30, 0xB2	; 178
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	80 83       	st	Z, r24
    247c:	e0 c0       	rjmp	.+448    	; 0x263e <LCD_vidInitialize+0x276>
	else if (__tmp > 255)
    247e:	fe 01       	movw	r30, r28
    2480:	e1 5b       	subi	r30, 0xB1	; 177
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	53 e4       	ldi	r21, 0x43	; 67
    2494:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	0c f0       	brlt	.+2      	; 0x249e <LCD_vidInitialize+0xd6>
    249c:	c0 c0       	rjmp	.+384    	; 0x261e <LCD_vidInitialize+0x256>
	{
		_delay_ms(__us / 1000.0);
    249e:	fe 01       	movw	r30, r28
    24a0:	ed 5a       	subi	r30, 0xAD	; 173
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a e7       	ldi	r20, 0x7A	; 122
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	fe 01       	movw	r30, r28
    24be:	e6 5b       	subi	r30, 0xB6	; 182
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	8e 01       	movw	r16, r28
    24cc:	0a 5b       	subi	r16, 0xBA	; 186
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	fe 01       	movw	r30, r28
    24d2:	e6 5b       	subi	r30, 0xB6	; 182
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a ef       	ldi	r20, 0xFA	; 250
    24e4:	54 e4       	ldi	r21, 0x44	; 68
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	f8 01       	movw	r30, r16
    24f0:	80 83       	st	Z, r24
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	a2 83       	std	Z+2, r26	; 0x02
    24f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f8:	fe 01       	movw	r30, r28
    24fa:	ea 5b       	subi	r30, 0xBA	; 186
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	44 f4       	brge	.+16     	; 0x2526 <LCD_vidInitialize+0x15e>
		__ticks = 1;
    2516:	fe 01       	movw	r30, r28
    2518:	ec 5b       	subi	r30, 0xBC	; 188
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	64 c0       	rjmp	.+200    	; 0x25ee <LCD_vidInitialize+0x226>
	else if (__tmp > 65535)
    2526:	fe 01       	movw	r30, r28
    2528:	ea 5b       	subi	r30, 0xBA	; 186
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	0c f0       	brlt	.+2      	; 0x2546 <LCD_vidInitialize+0x17e>
    2544:	43 c0       	rjmp	.+134    	; 0x25cc <LCD_vidInitialize+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2546:	fe 01       	movw	r30, r28
    2548:	e6 5b       	subi	r30, 0xB6	; 182
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8e 01       	movw	r16, r28
    2566:	0c 5b       	subi	r16, 0xBC	; 188
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
    257c:	1f c0       	rjmp	.+62     	; 0x25bc <LCD_vidInitialize+0x1f4>
    257e:	fe 01       	movw	r30, r28
    2580:	ee 5b       	subi	r30, 0xBE	; 190
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	88 ec       	ldi	r24, 0xC8	; 200
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	fe 01       	movw	r30, r28
    258e:	ee 5b       	subi	r30, 0xBE	; 190
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_vidInitialize+0x1ce>
    259a:	fe 01       	movw	r30, r28
    259c:	ee 5b       	subi	r30, 0xBE	; 190
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a4:	de 01       	movw	r26, r28
    25a6:	ac 5b       	subi	r26, 0xBC	; 188
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	ec 5b       	subi	r30, 0xBC	; 188
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	11 96       	adiw	r26, 0x01	; 1
    25b8:	9c 93       	st	X, r25
    25ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	fe 01       	movw	r30, r28
    25be:	ec 5b       	subi	r30, 0xBC	; 188
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	d1 f6       	brne	.-76     	; 0x257e <LCD_vidInitialize+0x1b6>
    25ca:	42 c0       	rjmp	.+132    	; 0x2650 <LCD_vidInitialize+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	8e 01       	movw	r16, r28
    25ce:	0c 5b       	subi	r16, 0xBC	; 188
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	ea 5b       	subi	r30, 0xBA	; 186
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	f8 01       	movw	r30, r16
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	de 01       	movw	r26, r28
    25f0:	a0 5c       	subi	r26, 0xC0	; 192
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	ec 5b       	subi	r30, 0xBC	; 188
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	11 96       	adiw	r26, 0x01	; 1
    2600:	9c 93       	st	X, r25
    2602:	8e 93       	st	-X, r24
    2604:	fe 01       	movw	r30, r28
    2606:	e0 5c       	subi	r30, 0xC0	; 192
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_vidInitialize+0x246>
    2612:	fe 01       	movw	r30, r28
    2614:	e0 5c       	subi	r30, 0xC0	; 192
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
    261c:	19 c0       	rjmp	.+50     	; 0x2650 <LCD_vidInitialize+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    261e:	8e 01       	movw	r16, r28
    2620:	02 5b       	subi	r16, 0xB2	; 178
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	fe 01       	movw	r30, r28
    2626:	e1 5b       	subi	r30, 0xB1	; 177
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	80 83       	st	Z, r24
    263e:	fe 01       	movw	r30, r28
    2640:	e2 5b       	subi	r30, 0xB2	; 178
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2648:	8f ad       	ldd	r24, Y+63	; 0x3f
    264a:	8a 95       	dec	r24
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_vidInitialize+0x282>
    264e:	8f af       	std	Y+63, r24	; 0x3f

	// Delay > 39us
	_delay_us(11);

	// Display ON/OFF Control D = 1, C = 1, B = 0
	LCD_vidInstruction(0X0c, write_operation, IR);
    2650:	8c e0       	ldi	r24, 0x0C	; 12
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e3       	ldi	r26, 0x30	; 48
    2660:	b1 e4       	ldi	r27, 0x41	; 65
    2662:	8b af       	std	Y+59, r24	; 0x3b
    2664:	9c af       	std	Y+60, r25	; 0x3c
    2666:	ad af       	std	Y+61, r26	; 0x3d
    2668:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    266a:	6b ad       	ldd	r22, Y+59	; 0x3b
    266c:	7c ad       	ldd	r23, Y+60	; 0x3c
    266e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2670:	9e ad       	ldd	r25, Y+62	; 0x3e
    2672:	2b ea       	ldi	r18, 0xAB	; 171
    2674:	3a ea       	ldi	r19, 0xAA	; 170
    2676:	4a e2       	ldi	r20, 0x2A	; 42
    2678:	50 e4       	ldi	r21, 0x40	; 64
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8f ab       	std	Y+55, r24	; 0x37
    2684:	98 af       	std	Y+56, r25	; 0x38
    2686:	a9 af       	std	Y+57, r26	; 0x39
    2688:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    268a:	6f a9       	ldd	r22, Y+55	; 0x37
    268c:	78 ad       	ldd	r23, Y+56	; 0x38
    268e:	89 ad       	ldd	r24, Y+57	; 0x39
    2690:	9a ad       	ldd	r25, Y+58	; 0x3a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	1c f4       	brge	.+6      	; 0x26a8 <LCD_vidInitialize+0x2e0>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	8e ab       	std	Y+54, r24	; 0x36
    26a6:	91 c0       	rjmp	.+290    	; 0x27ca <LCD_vidInitialize+0x402>
	else if (__tmp > 255)
    26a8:	6f a9       	ldd	r22, Y+55	; 0x37
    26aa:	78 ad       	ldd	r23, Y+56	; 0x38
    26ac:	89 ad       	ldd	r24, Y+57	; 0x39
    26ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	53 e4       	ldi	r21, 0x43	; 67
    26b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	0c f0       	brlt	.+2      	; 0x26c2 <LCD_vidInitialize+0x2fa>
    26c0:	7b c0       	rjmp	.+246    	; 0x27b8 <LCD_vidInitialize+0x3f0>
	{
		_delay_ms(__us / 1000.0);
    26c2:	6b ad       	ldd	r22, Y+59	; 0x3b
    26c4:	7c ad       	ldd	r23, Y+60	; 0x3c
    26c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8a ab       	std	Y+50, r24	; 0x32
    26dc:	9b ab       	std	Y+51, r25	; 0x33
    26de:	ac ab       	std	Y+52, r26	; 0x34
    26e0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	6a a9       	ldd	r22, Y+50	; 0x32
    26e4:	7b a9       	ldd	r23, Y+51	; 0x33
    26e6:	8c a9       	ldd	r24, Y+52	; 0x34
    26e8:	9d a9       	ldd	r25, Y+53	; 0x35
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a ef       	ldi	r20, 0xFA	; 250
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8e a7       	std	Y+46, r24	; 0x2e
    26fc:	9f a7       	std	Y+47, r25	; 0x2f
    26fe:	a8 ab       	std	Y+48, r26	; 0x30
    2700:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2702:	6e a5       	ldd	r22, Y+46	; 0x2e
    2704:	7f a5       	ldd	r23, Y+47	; 0x2f
    2706:	88 a9       	ldd	r24, Y+48	; 0x30
    2708:	99 a9       	ldd	r25, Y+49	; 0x31
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <LCD_vidInitialize+0x35c>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9d a7       	std	Y+45, r25	; 0x2d
    2720:	8c a7       	std	Y+44, r24	; 0x2c
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <LCD_vidInitialize+0x3da>
	else if (__tmp > 65535)
    2724:	6e a5       	ldd	r22, Y+46	; 0x2e
    2726:	7f a5       	ldd	r23, Y+47	; 0x2f
    2728:	88 a9       	ldd	r24, Y+48	; 0x30
    272a:	99 a9       	ldd	r25, Y+49	; 0x31
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <LCD_vidInitialize+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	6a a9       	ldd	r22, Y+50	; 0x32
    273e:	7b a9       	ldd	r23, Y+51	; 0x33
    2740:	8c a9       	ldd	r24, Y+52	; 0x34
    2742:	9d a9       	ldd	r25, Y+53	; 0x35
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9d a7       	std	Y+45, r25	; 0x2d
    2762:	8c a7       	std	Y+44, r24	; 0x2c
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <LCD_vidInitialize+0x3bc>
    2766:	88 ec       	ldi	r24, 0xC8	; 200
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9b a7       	std	Y+43, r25	; 0x2b
    276c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    276e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2770:	9b a5       	ldd	r25, Y+43	; 0x2b
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <LCD_vidInitialize+0x3aa>
    2776:	9b a7       	std	Y+43, r25	; 0x2b
    2778:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8c a5       	ldd	r24, Y+44	; 0x2c
    277c:	9d a5       	ldd	r25, Y+45	; 0x2d
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9d a7       	std	Y+45, r25	; 0x2d
    2782:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8c a5       	ldd	r24, Y+44	; 0x2c
    2786:	9d a5       	ldd	r25, Y+45	; 0x2d
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <LCD_vidInitialize+0x39e>
    278c:	24 c0       	rjmp	.+72     	; 0x27d6 <LCD_vidInitialize+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2790:	7f a5       	ldd	r23, Y+47	; 0x2f
    2792:	88 a9       	ldd	r24, Y+48	; 0x30
    2794:	99 a9       	ldd	r25, Y+49	; 0x31
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9d a7       	std	Y+45, r25	; 0x2d
    27a0:	8c a7       	std	Y+44, r24	; 0x2c
    27a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    27a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    27a6:	99 a7       	std	Y+41, r25	; 0x29
    27a8:	88 a7       	std	Y+40, r24	; 0x28
    27aa:	88 a5       	ldd	r24, Y+40	; 0x28
    27ac:	99 a5       	ldd	r25, Y+41	; 0x29
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_vidInitialize+0x3e6>
    27b2:	99 a7       	std	Y+41, r25	; 0x29
    27b4:	88 a7       	std	Y+40, r24	; 0x28
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <LCD_vidInitialize+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27b8:	6f a9       	ldd	r22, Y+55	; 0x37
    27ba:	78 ad       	ldd	r23, Y+56	; 0x38
    27bc:	89 ad       	ldd	r24, Y+57	; 0x39
    27be:	9a ad       	ldd	r25, Y+58	; 0x3a
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8e ab       	std	Y+54, r24	; 0x36
    27ca:	8e a9       	ldd	r24, Y+54	; 0x36
    27cc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27ce:	8f a1       	ldd	r24, Y+39	; 0x27
    27d0:	8a 95       	dec	r24
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_vidInitialize+0x408>
    27d4:	8f a3       	std	Y+39, r24	; 0x27

	// Delay > 39us
	_delay_us(11);

	// Display Clear
	LCD_vidInstruction(0x01, write_operation, IR);
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e0       	ldi	r26, 0x00	; 0
    27e6:	b0 e4       	ldi	r27, 0x40	; 64
    27e8:	8b a3       	std	Y+35, r24	; 0x23
    27ea:	9c a3       	std	Y+36, r25	; 0x24
    27ec:	ad a3       	std	Y+37, r26	; 0x25
    27ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b a1       	ldd	r22, Y+35	; 0x23
    27f2:	7c a1       	ldd	r23, Y+36	; 0x24
    27f4:	8d a1       	ldd	r24, Y+37	; 0x25
    27f6:	9e a1       	ldd	r25, Y+38	; 0x26
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 8f       	std	Y+31, r24	; 0x1f
    280a:	98 a3       	std	Y+32, r25	; 0x20
    280c:	a9 a3       	std	Y+33, r26	; 0x21
    280e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2810:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2812:	78 a1       	ldd	r23, Y+32	; 0x20
    2814:	89 a1       	ldd	r24, Y+33	; 0x21
    2816:	9a a1       	ldd	r25, Y+34	; 0x22
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_vidInitialize+0x46a>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 8f       	std	Y+30, r25	; 0x1e
    282e:	8d 8f       	std	Y+29, r24	; 0x1d
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_vidInitialize+0x4e8>
	else if (__tmp > 65535)
    2832:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2834:	78 a1       	ldd	r23, Y+32	; 0x20
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	9a a1       	ldd	r25, Y+34	; 0x22
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_vidInitialize+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b a1       	ldd	r22, Y+35	; 0x23
    284c:	7c a1       	ldd	r23, Y+36	; 0x24
    284e:	8d a1       	ldd	r24, Y+37	; 0x25
    2850:	9e a1       	ldd	r25, Y+38	; 0x26
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	8d 8f       	std	Y+29, r24	; 0x1d
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_vidInitialize+0x4ca>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 8f       	std	Y+28, r25	; 0x1c
    287a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    287c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_vidInitialize+0x4b8>
    2884:	9c 8f       	std	Y+28, r25	; 0x1c
    2886:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 8d       	ldd	r24, Y+29	; 0x1d
    288a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 8f       	std	Y+30, r25	; 0x1e
    2890:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2894:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_vidInitialize+0x4ac>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_vidInitialize+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    289e:	78 a1       	ldd	r23, Y+32	; 0x20
    28a0:	89 a1       	ldd	r24, Y+33	; 0x21
    28a2:	9a a1       	ldd	r25, Y+34	; 0x22
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 8f       	std	Y+30, r25	; 0x1e
    28ae:	8d 8f       	std	Y+29, r24	; 0x1d
    28b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	89 8f       	std	Y+25, r24	; 0x19
    28b8:	89 8d       	ldd	r24, Y+25	; 0x19
    28ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_vidInitialize+0x4f4>
    28c0:	9a 8f       	std	Y+26, r25	; 0x1a
    28c2:	89 8f       	std	Y+25, r24	; 0x19

	// Delay > 1.53ms
	_delay_ms(2);

	// Entry Mode Set
	LCD_vidInstruction(0x06, write_operation, IR);
    28c4:	86 e0       	ldi	r24, 0x06	; 6
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e3       	ldi	r26, 0x30	; 48
    28d4:	b1 e4       	ldi	r27, 0x41	; 65
    28d6:	8d 8b       	std	Y+21, r24	; 0x15
    28d8:	9e 8b       	std	Y+22, r25	; 0x16
    28da:	af 8b       	std	Y+23, r26	; 0x17
    28dc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28de:	6d 89       	ldd	r22, Y+21	; 0x15
    28e0:	7e 89       	ldd	r23, Y+22	; 0x16
    28e2:	8f 89       	ldd	r24, Y+23	; 0x17
    28e4:	98 8d       	ldd	r25, Y+24	; 0x18
    28e6:	2b ea       	ldi	r18, 0xAB	; 171
    28e8:	3a ea       	ldi	r19, 0xAA	; 170
    28ea:	4a e2       	ldi	r20, 0x2A	; 42
    28ec:	50 e4       	ldi	r21, 0x40	; 64
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	89 8b       	std	Y+17, r24	; 0x11
    28f8:	9a 8b       	std	Y+18, r25	; 0x12
    28fa:	ab 8b       	std	Y+19, r26	; 0x13
    28fc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28fe:	69 89       	ldd	r22, Y+17	; 0x11
    2900:	7a 89       	ldd	r23, Y+18	; 0x12
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	1c f4       	brge	.+6      	; 0x291c <LCD_vidInitialize+0x554>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	88 8b       	std	Y+16, r24	; 0x10
    291a:	91 c0       	rjmp	.+290    	; 0x2a3e <LCD_vidInitialize+0x676>
	else if (__tmp > 255)
    291c:	69 89       	ldd	r22, Y+17	; 0x11
    291e:	7a 89       	ldd	r23, Y+18	; 0x12
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	53 e4       	ldi	r21, 0x43	; 67
    292c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	0c f0       	brlt	.+2      	; 0x2936 <LCD_vidInitialize+0x56e>
    2934:	7b c0       	rjmp	.+246    	; 0x2a2c <LCD_vidInitialize+0x664>
	{
		_delay_ms(__us / 1000.0);
    2936:	6d 89       	ldd	r22, Y+21	; 0x15
    2938:	7e 89       	ldd	r23, Y+22	; 0x16
    293a:	8f 89       	ldd	r24, Y+23	; 0x17
    293c:	98 8d       	ldd	r25, Y+24	; 0x18
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	4a e7       	ldi	r20, 0x7A	; 122
    2944:	54 e4       	ldi	r21, 0x44	; 68
    2946:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	8c 87       	std	Y+12, r24	; 0x0c
    2950:	9d 87       	std	Y+13, r25	; 0x0d
    2952:	ae 87       	std	Y+14, r26	; 0x0e
    2954:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6c 85       	ldd	r22, Y+12	; 0x0c
    2958:	7d 85       	ldd	r23, Y+13	; 0x0d
    295a:	8e 85       	ldd	r24, Y+14	; 0x0e
    295c:	9f 85       	ldd	r25, Y+15	; 0x0f
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	88 87       	std	Y+8, r24	; 0x08
    2970:	99 87       	std	Y+9, r25	; 0x09
    2972:	aa 87       	std	Y+10, r26	; 0x0a
    2974:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2976:	68 85       	ldd	r22, Y+8	; 0x08
    2978:	79 85       	ldd	r23, Y+9	; 0x09
    297a:	8a 85       	ldd	r24, Y+10	; 0x0a
    297c:	9b 85       	ldd	r25, Y+11	; 0x0b
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <LCD_vidInitialize+0x5d0>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
    2996:	3f c0       	rjmp	.+126    	; 0x2a16 <LCD_vidInitialize+0x64e>
	else if (__tmp > 65535)
    2998:	68 85       	ldd	r22, Y+8	; 0x08
    299a:	79 85       	ldd	r23, Y+9	; 0x09
    299c:	8a 85       	ldd	r24, Y+10	; 0x0a
    299e:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	3f ef       	ldi	r19, 0xFF	; 255
    29a4:	4f e7       	ldi	r20, 0x7F	; 127
    29a6:	57 e4       	ldi	r21, 0x47	; 71
    29a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ac:	18 16       	cp	r1, r24
    29ae:	4c f5       	brge	.+82     	; 0x2a02 <LCD_vidInitialize+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    29b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    29b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    29b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9f 83       	std	Y+7, r25	; 0x07
    29d6:	8e 83       	std	Y+6, r24	; 0x06
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <LCD_vidInitialize+0x630>
    29da:	88 ec       	ldi	r24, 0xC8	; 200
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9d 83       	std	Y+5, r25	; 0x05
    29e0:	8c 83       	std	Y+4, r24	; 0x04
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	9d 81       	ldd	r25, Y+5	; 0x05
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_vidInitialize+0x61e>
    29ea:	9d 83       	std	Y+5, r25	; 0x05
    29ec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ee:	8e 81       	ldd	r24, Y+6	; 0x06
    29f0:	9f 81       	ldd	r25, Y+7	; 0x07
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	9f 83       	std	Y+7, r25	; 0x07
    29f6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	8e 81       	ldd	r24, Y+6	; 0x06
    29fa:	9f 81       	ldd	r25, Y+7	; 0x07
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	69 f7       	brne	.-38     	; 0x29da <LCD_vidInitialize+0x612>
    2a00:	24 c0       	rjmp	.+72     	; 0x2a4a <LCD_vidInitialize+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	68 85       	ldd	r22, Y+8	; 0x08
    2a04:	79 85       	ldd	r23, Y+9	; 0x09
    2a06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9f 83       	std	Y+7, r25	; 0x07
    2a14:	8e 83       	std	Y+6, r24	; 0x06
    2a16:	8e 81       	ldd	r24, Y+6	; 0x06
    2a18:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1a:	9b 83       	std	Y+3, r25	; 0x03
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	9b 81       	ldd	r25, Y+3	; 0x03
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_vidInitialize+0x65a>
    2a26:	9b 83       	std	Y+3, r25	; 0x03
    2a28:	8a 83       	std	Y+2, r24	; 0x02
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <LCD_vidInitialize+0x682>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a2c:	69 89       	ldd	r22, Y+17	; 0x11
    2a2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a30:	8b 89       	ldd	r24, Y+19	; 0x13
    2a32:	9c 89       	ldd	r25, Y+20	; 0x14
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	88 8b       	std	Y+16, r24	; 0x10
    2a3e:	88 89       	ldd	r24, Y+16	; 0x10
    2a40:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	8a 95       	dec	r24
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <LCD_vidInitialize+0x67c>
    2a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
}
    2a4a:	ca 5a       	subi	r28, 0xAA	; 170
    2a4c:	df 4f       	sbci	r29, 0xFF	; 255
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <LCD_vidInstruction>:


// Send instruction to execute
void LCD_vidInstruction(u8 command, u8 RW_value, u8 RS_value)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	e3 97       	sbiw	r28, 0x33	; 51
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	89 ab       	std	Y+49, r24	; 0x31
    2a78:	6a ab       	std	Y+50, r22	; 0x32
    2a7a:	4b ab       	std	Y+51, r20	; 0x33
	// INDICATE WHICH REGISTER
	if(RS_value == IR)
    2a7c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7e:	88 23       	and	r24, r24
    2a80:	31 f4       	brne	.+12     	; 0x2a8e <LCD_vidInstruction+0x2c>
	{
		// RS = 0, indication for Instruction Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 0);
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <LCD_vidInstruction+0x36>
	}
	else
	{
		// RS = 1, indication for DATA Register
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RS_PIN, 1);
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
	}

	// INDICATE R/W OPERATION
	if(RW_value == write_operation)
    2a98:	8a a9       	ldd	r24, Y+50	; 0x32
    2a9a:	88 23       	and	r24, r24
    2a9c:	51 f4       	brne	.+20     	; 0x2ab2 <LCD_vidInstruction+0x50>
	{
		// R/W = 0, write indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 0);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		DIO_vidSetPortValue(LCD_PORT_DATA, command);
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	69 a9       	ldd	r22, Y+49	; 0x31
    2aac:	0e 94 ac 06 	call	0xd58	; 0xd58 <DIO_vidSetPortValue>
    2ab0:	09 c0       	rjmp	.+18     	; 0x2ac4 <LCD_vidInstruction+0x62>
	}
	else
	{
		// R/W = 1, read indication
		DIO_vidSetPortBitValue(LCD_PORT_CONTROL, RW_PIN, 1);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
		// Change Direction of PORT to input
		DIO_vidSetPortxDir(LCD_PORT_DATA, 0);
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
	}

	// E = 1, H-to-L pulse
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 1);
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	62 e0       	ldi	r22, 0x02	; 2
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e2       	ldi	r26, 0x20	; 32
    2ad4:	b1 e4       	ldi	r27, 0x41	; 65
    2ad6:	8d a7       	std	Y+45, r24	; 0x2d
    2ad8:	9e a7       	std	Y+46, r25	; 0x2e
    2ada:	af a7       	std	Y+47, r26	; 0x2f
    2adc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ade:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ae0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae6:	2b ea       	ldi	r18, 0xAB	; 171
    2ae8:	3a ea       	ldi	r19, 0xAA	; 170
    2aea:	4a e2       	ldi	r20, 0x2A	; 42
    2aec:	50 e4       	ldi	r21, 0x40	; 64
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	89 a7       	std	Y+41, r24	; 0x29
    2af8:	9a a7       	std	Y+42, r25	; 0x2a
    2afa:	ab a7       	std	Y+43, r26	; 0x2b
    2afc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2afe:	69 a5       	ldd	r22, Y+41	; 0x29
    2b00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	1c f4       	brge	.+6      	; 0x2b1c <LCD_vidInstruction+0xba>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	88 a7       	std	Y+40, r24	; 0x28
    2b1a:	91 c0       	rjmp	.+290    	; 0x2c3e <LCD_vidInstruction+0x1dc>
	else if (__tmp > 255)
    2b1c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b1e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	53 e4       	ldi	r21, 0x43	; 67
    2b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	0c f0       	brlt	.+2      	; 0x2b36 <LCD_vidInstruction+0xd4>
    2b34:	7b c0       	rjmp	.+246    	; 0x2c2c <LCD_vidInstruction+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    2b36:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b38:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	4a e7       	ldi	r20, 0x7A	; 122
    2b44:	54 e4       	ldi	r21, 0x44	; 68
    2b46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	8c a3       	std	Y+36, r24	; 0x24
    2b50:	9d a3       	std	Y+37, r25	; 0x25
    2b52:	ae a3       	std	Y+38, r26	; 0x26
    2b54:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6c a1       	ldd	r22, Y+36	; 0x24
    2b58:	7d a1       	ldd	r23, Y+37	; 0x25
    2b5a:	8e a1       	ldd	r24, Y+38	; 0x26
    2b5c:	9f a1       	ldd	r25, Y+39	; 0x27
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a ef       	ldi	r20, 0xFA	; 250
    2b64:	54 e4       	ldi	r21, 0x44	; 68
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	88 a3       	std	Y+32, r24	; 0x20
    2b70:	99 a3       	std	Y+33, r25	; 0x21
    2b72:	aa a3       	std	Y+34, r26	; 0x22
    2b74:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b76:	68 a1       	ldd	r22, Y+32	; 0x20
    2b78:	79 a1       	ldd	r23, Y+33	; 0x21
    2b7a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b7c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <LCD_vidInstruction+0x136>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9f 8f       	std	Y+31, r25	; 0x1f
    2b94:	8e 8f       	std	Y+30, r24	; 0x1e
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <LCD_vidInstruction+0x1b4>
	else if (__tmp > 65535)
    2b98:	68 a1       	ldd	r22, Y+32	; 0x20
    2b9a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b9c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9e:	9b a1       	ldd	r25, Y+35	; 0x23
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <LCD_vidInstruction+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6c a1       	ldd	r22, Y+36	; 0x24
    2bb2:	7d a1       	ldd	r23, Y+37	; 0x25
    2bb4:	8e a1       	ldd	r24, Y+38	; 0x26
    2bb6:	9f a1       	ldd	r25, Y+39	; 0x27
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bd6:	8e 8f       	std	Y+30, r24	; 0x1e
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <LCD_vidInstruction+0x196>
    2bda:	88 ec       	ldi	r24, 0xC8	; 200
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	9d 8f       	std	Y+29, r25	; 0x1d
    2be0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2be2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2be4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_vidInstruction+0x184>
    2bea:	9d 8f       	std	Y+29, r25	; 0x1d
    2bec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bf0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bf6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <LCD_vidInstruction+0x178>
    2c00:	24 c0       	rjmp	.+72     	; 0x2c4a <LCD_vidInstruction+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	68 a1       	ldd	r22, Y+32	; 0x20
    2c04:	79 a1       	ldd	r23, Y+33	; 0x21
    2c06:	8a a1       	ldd	r24, Y+34	; 0x22
    2c08:	9b a1       	ldd	r25, Y+35	; 0x23
    2c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9f 8f       	std	Y+31, r25	; 0x1f
    2c14:	8e 8f       	std	Y+30, r24	; 0x1e
    2c16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c1a:	9b 8f       	std	Y+27, r25	; 0x1b
    2c1c:	8a 8f       	std	Y+26, r24	; 0x1a
    2c1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_vidInstruction+0x1c0>
    2c26:	9b 8f       	std	Y+27, r25	; 0x1b
    2c28:	8a 8f       	std	Y+26, r24	; 0x1a
    2c2a:	0f c0       	rjmp	.+30     	; 0x2c4a <LCD_vidInstruction+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c2c:	69 a5       	ldd	r22, Y+41	; 0x29
    2c2e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	88 a7       	std	Y+40, r24	; 0x28
    2c3e:	88 a5       	ldd	r24, Y+40	; 0x28
    2c40:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c42:	89 8d       	ldd	r24, Y+25	; 0x19
    2c44:	8a 95       	dec	r24
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_vidInstruction+0x1e2>
    2c48:	89 8f       	std	Y+25, r24	; 0x19

	// Wait to make enable wide
	_delay_us(10);

	// READ/WRITE VALUES FROM/TO LCD
	if(RW_value == write_operation)
    2c4a:	8a a9       	ldd	r24, Y+50	; 0x32
    2c4c:	88 23       	and	r24, r24
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <LCD_vidInstruction+0x1f8>

	}
	else
	{
		// Store the whole PIN_REG value
		DATA = DIO_GetPinValue(LCD_PORT_DATA);
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	0e 94 11 0b 	call	0x1622	; 0x1622 <DIO_GetPinValue>
    2c56:	80 93 1b 04 	sts	0x041B, r24
	}

	// EN = 0
	DIO_vidSetPortBitValue(LCD_PORT_CONTROL, E_PIN, 0);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	62 e0       	ldi	r22, 0x02	; 2
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_vidSetPortBitValue>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e2       	ldi	r26, 0x20	; 32
    2c6a:	b1 e4       	ldi	r27, 0x41	; 65
    2c6c:	8d 8b       	std	Y+21, r24	; 0x15
    2c6e:	9e 8b       	std	Y+22, r25	; 0x16
    2c70:	af 8b       	std	Y+23, r26	; 0x17
    2c72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c74:	6d 89       	ldd	r22, Y+21	; 0x15
    2c76:	7e 89       	ldd	r23, Y+22	; 0x16
    2c78:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7c:	2b ea       	ldi	r18, 0xAB	; 171
    2c7e:	3a ea       	ldi	r19, 0xAA	; 170
    2c80:	4a e2       	ldi	r20, 0x2A	; 42
    2c82:	50 e4       	ldi	r21, 0x40	; 64
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	89 8b       	std	Y+17, r24	; 0x11
    2c8e:	9a 8b       	std	Y+18, r25	; 0x12
    2c90:	ab 8b       	std	Y+19, r26	; 0x13
    2c92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c94:	69 89       	ldd	r22, Y+17	; 0x11
    2c96:	7a 89       	ldd	r23, Y+18	; 0x12
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	1c f4       	brge	.+6      	; 0x2cb2 <LCD_vidInstruction+0x250>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	88 8b       	std	Y+16, r24	; 0x10
    2cb0:	91 c0       	rjmp	.+290    	; 0x2dd4 <LCD_vidInstruction+0x372>
	else if (__tmp > 255)
    2cb2:	69 89       	ldd	r22, Y+17	; 0x11
    2cb4:	7a 89       	ldd	r23, Y+18	; 0x12
    2cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	53 e4       	ldi	r21, 0x43	; 67
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	0c f0       	brlt	.+2      	; 0x2ccc <LCD_vidInstruction+0x26a>
    2cca:	7b c0       	rjmp	.+246    	; 0x2dc2 <LCD_vidInstruction+0x360>
	{
		_delay_ms(__us / 1000.0);
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	54 e4       	ldi	r21, 0x44	; 68
    2cdc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8c 87       	std	Y+12, r24	; 0x0c
    2ce6:	9d 87       	std	Y+13, r25	; 0x0d
    2ce8:	ae 87       	std	Y+14, r26	; 0x0e
    2cea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a ef       	ldi	r20, 0xFA	; 250
    2cfa:	54 e4       	ldi	r21, 0x44	; 68
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	88 87       	std	Y+8, r24	; 0x08
    2d06:	99 87       	std	Y+9, r25	; 0x09
    2d08:	aa 87       	std	Y+10, r26	; 0x0a
    2d0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d0c:	68 85       	ldd	r22, Y+8	; 0x08
    2d0e:	79 85       	ldd	r23, Y+9	; 0x09
    2d10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d20:	88 23       	and	r24, r24
    2d22:	2c f4       	brge	.+10     	; 0x2d2e <LCD_vidInstruction+0x2cc>
		__ticks = 1;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9f 83       	std	Y+7, r25	; 0x07
    2d2a:	8e 83       	std	Y+6, r24	; 0x06
    2d2c:	3f c0       	rjmp	.+126    	; 0x2dac <LCD_vidInstruction+0x34a>
	else if (__tmp > 65535)
    2d2e:	68 85       	ldd	r22, Y+8	; 0x08
    2d30:	79 85       	ldd	r23, Y+9	; 0x09
    2d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	4c f5       	brge	.+82     	; 0x2d98 <LCD_vidInstruction+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9f 83       	std	Y+7, r25	; 0x07
    2d6c:	8e 83       	std	Y+6, r24	; 0x06
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <LCD_vidInstruction+0x32c>
    2d70:	88 ec       	ldi	r24, 0xC8	; 200
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9d 83       	std	Y+5, r25	; 0x05
    2d76:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_vidInstruction+0x31a>
    2d80:	9d 83       	std	Y+5, r25	; 0x05
    2d82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d84:	8e 81       	ldd	r24, Y+6	; 0x06
    2d86:	9f 81       	ldd	r25, Y+7	; 0x07
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	9f 83       	std	Y+7, r25	; 0x07
    2d8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d90:	9f 81       	ldd	r25, Y+7	; 0x07
    2d92:	00 97       	sbiw	r24, 0x00	; 0
    2d94:	69 f7       	brne	.-38     	; 0x2d70 <LCD_vidInstruction+0x30e>
    2d96:	24 c0       	rjmp	.+72     	; 0x2de0 <LCD_vidInstruction+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d98:	68 85       	ldd	r22, Y+8	; 0x08
    2d9a:	79 85       	ldd	r23, Y+9	; 0x09
    2d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	9f 83       	std	Y+7, r25	; 0x07
    2daa:	8e 83       	std	Y+6, r24	; 0x06
    2dac:	8e 81       	ldd	r24, Y+6	; 0x06
    2dae:	9f 81       	ldd	r25, Y+7	; 0x07
    2db0:	9b 83       	std	Y+3, r25	; 0x03
    2db2:	8a 83       	std	Y+2, r24	; 0x02
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_vidInstruction+0x356>
    2dbc:	9b 83       	std	Y+3, r25	; 0x03
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <LCD_vidInstruction+0x37e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc2:	69 89       	ldd	r22, Y+17	; 0x11
    2dc4:	7a 89       	ldd	r23, Y+18	; 0x12
    2dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	88 8b       	std	Y+16, r24	; 0x10
    2dd4:	88 89       	ldd	r24, Y+16	; 0x10
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	8a 95       	dec	r24
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <LCD_vidInstruction+0x378>
    2dde:	89 83       	std	Y+1, r24	; 0x01
	// Wait to make enable wide
	_delay_us(10);

	// FORCE Direction of PORT to OUTPUT

	DIO_vidSetPortxDir(LCD_PORT_DATA, 1);
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	61 e0       	ldi	r22, 0x01	; 1
    2de4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPortxDir>
}
    2de8:	e3 96       	adiw	r28, 0x33	; 51
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <LCD_vidData>:

// Send Data to display
void LCD_vidData(s16 data)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <LCD_vidData+0x6>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidInstruction(data, write_operation, DR);
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
}
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <LCD_String>:

// Display string from user
char LCD_String(char *ch)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <LCD_String+0x6>
    2e22:	0f 92       	push	r0
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	9b 83       	std	Y+3, r25	; 0x03
    2e2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    2e2c:	19 82       	std	Y+1, r1	; 0x01
    2e2e:	10 c0       	rjmp	.+32     	; 0x2e50 <LCD_String+0x34>
	{
		LCD_vidData(ch[i]);
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	e2 0f       	add	r30, r18
    2e3e:	f3 1f       	adc	r31, r19
    2e40:	80 81       	ld	r24, Z
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_vidData>
char LCD_String(char *ch)
{
	u8 i;

	// Iterate over string characters
	for(i = 0; ch[i] != '\0'; i++)
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	89 83       	std	Y+1, r24	; 0x01
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e2 0f       	add	r30, r18
    2e5e:	f3 1f       	adc	r31, r19
    2e60:	80 81       	ld	r24, Z
    2e62:	88 23       	and	r24, r24
    2e64:	29 f7       	brne	.-54     	; 0x2e30 <LCD_String+0x14>
	{
		LCD_vidData(ch[i]);
	}

	// Return length of string
	return i;
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <LCD_vidGoTo>:


// Define a location to write to
void LCD_vidGoTo(u8 x, u8 y)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	6d 97       	sbiw	r28, 0x1d	; 29
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	8c 8f       	std	Y+28, r24	; 0x1c
    2e8a:	6d 8f       	std	Y+29, r22	; 0x1d
	// Array with 2 possible lines
	u8 location[] = {0x00, 0x40};
    2e8c:	1a 8e       	std	Y+26, r1	; 0x1a
    2e8e:	80 e4       	ldi	r24, 0x40	; 64
    2e90:	8b 8f       	std	Y+27, r24	; 0x1b

	// Configuring the instruction for the location acquired
	u8 address = location[y-1] + x - 1;
    2e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e94:	88 2f       	mov	r24, r24
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9c 01       	movw	r18, r24
    2e9a:	21 50       	subi	r18, 0x01	; 1
    2e9c:	30 40       	sbci	r19, 0x00	; 0
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	4a 96       	adiw	r24, 0x1a	; 26
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	90 81       	ld	r25, Z
    2eaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2eac:	89 0f       	add	r24, r25
    2eae:	81 50       	subi	r24, 0x01	; 1
    2eb0:	89 8f       	std	Y+25, r24	; 0x19

	// Just complete the instruction from data_sheet
	address = address + (1<<7);
    2eb2:	89 8d       	ldd	r24, Y+25	; 0x19
    2eb4:	80 58       	subi	r24, 0x80	; 128
    2eb6:	89 8f       	std	Y+25, r24	; 0x19

	// Execute instruction
	LCD_vidInstruction(address, write_operation, IR);
    2eb8:	89 8d       	ldd	r24, Y+25	; 0x19
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 ea       	ldi	r26, 0xA0	; 160
    2ec8:	b1 e4       	ldi	r27, 0x41	; 65
    2eca:	8d 8b       	std	Y+21, r24	; 0x15
    2ecc:	9e 8b       	std	Y+22, r25	; 0x16
    2ece:	af 8b       	std	Y+23, r26	; 0x17
    2ed0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eda:	2b ea       	ldi	r18, 0xAB	; 171
    2edc:	3a ea       	ldi	r19, 0xAA	; 170
    2ede:	4a e2       	ldi	r20, 0x2A	; 42
    2ee0:	50 e4       	ldi	r21, 0x40	; 64
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	89 8b       	std	Y+17, r24	; 0x11
    2eec:	9a 8b       	std	Y+18, r25	; 0x12
    2eee:	ab 8b       	std	Y+19, r26	; 0x13
    2ef0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ef2:	69 89       	ldd	r22, Y+17	; 0x11
    2ef4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	1c f4       	brge	.+6      	; 0x2f10 <LCD_vidGoTo+0x9c>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	88 8b       	std	Y+16, r24	; 0x10
    2f0e:	91 c0       	rjmp	.+290    	; 0x3032 <LCD_vidGoTo+0x1be>
	else if (__tmp > 255)
    2f10:	69 89       	ldd	r22, Y+17	; 0x11
    2f12:	7a 89       	ldd	r23, Y+18	; 0x12
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	53 e4       	ldi	r21, 0x43	; 67
    2f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <LCD_vidGoTo+0xb6>
    2f28:	7b c0       	rjmp	.+246    	; 0x3020 <LCD_vidGoTo+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    2f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	98 8d       	ldd	r25, Y+24	; 0x18
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a e7       	ldi	r20, 0x7A	; 122
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8c 87       	std	Y+12, r24	; 0x0c
    2f44:	9d 87       	std	Y+13, r25	; 0x0d
    2f46:	ae 87       	std	Y+14, r26	; 0x0e
    2f48:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f50:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4a ef       	ldi	r20, 0xFA	; 250
    2f58:	54 e4       	ldi	r21, 0x44	; 68
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	88 87       	std	Y+8, r24	; 0x08
    2f64:	99 87       	std	Y+9, r25	; 0x09
    2f66:	aa 87       	std	Y+10, r26	; 0x0a
    2f68:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f6a:	68 85       	ldd	r22, Y+8	; 0x08
    2f6c:	79 85       	ldd	r23, Y+9	; 0x09
    2f6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <LCD_vidGoTo+0x118>
		__ticks = 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9f 83       	std	Y+7, r25	; 0x07
    2f88:	8e 83       	std	Y+6, r24	; 0x06
    2f8a:	3f c0       	rjmp	.+126    	; 0x300a <LCD_vidGoTo+0x196>
	else if (__tmp > 65535)
    2f8c:	68 85       	ldd	r22, Y+8	; 0x08
    2f8e:	79 85       	ldd	r23, Y+9	; 0x09
    2f90:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f92:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	4c f5       	brge	.+82     	; 0x2ff6 <LCD_vidGoTo+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fa8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2faa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9f 83       	std	Y+7, r25	; 0x07
    2fca:	8e 83       	std	Y+6, r24	; 0x06
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <LCD_vidGoTo+0x178>
    2fce:	88 ec       	ldi	r24, 0xC8	; 200
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	9d 83       	std	Y+5, r25	; 0x05
    2fd4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_vidGoTo+0x166>
    2fde:	9d 83       	std	Y+5, r25	; 0x05
    2fe0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	9f 83       	std	Y+7, r25	; 0x07
    2fea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fec:	8e 81       	ldd	r24, Y+6	; 0x06
    2fee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <LCD_vidGoTo+0x15a>
    2ff4:	24 c0       	rjmp	.+72     	; 0x303e <LCD_vidGoTo+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff6:	68 85       	ldd	r22, Y+8	; 0x08
    2ff8:	79 85       	ldd	r23, Y+9	; 0x09
    2ffa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ffc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9f 83       	std	Y+7, r25	; 0x07
    3008:	8e 83       	std	Y+6, r24	; 0x06
    300a:	8e 81       	ldd	r24, Y+6	; 0x06
    300c:	9f 81       	ldd	r25, Y+7	; 0x07
    300e:	9b 83       	std	Y+3, r25	; 0x03
    3010:	8a 83       	std	Y+2, r24	; 0x02
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <LCD_vidGoTo+0x1a2>
    301a:	9b 83       	std	Y+3, r25	; 0x03
    301c:	8a 83       	std	Y+2, r24	; 0x02
    301e:	0f c0       	rjmp	.+30     	; 0x303e <LCD_vidGoTo+0x1ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3020:	69 89       	ldd	r22, Y+17	; 0x11
    3022:	7a 89       	ldd	r23, Y+18	; 0x12
    3024:	8b 89       	ldd	r24, Y+19	; 0x13
    3026:	9c 89       	ldd	r25, Y+20	; 0x14
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	88 8b       	std	Y+16, r24	; 0x10
    3032:	88 89       	ldd	r24, Y+16	; 0x10
    3034:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	8a 95       	dec	r24
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_vidGoTo+0x1c4>
    303c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(20);
}
    303e:	6d 96       	adiw	r28, 0x1d	; 29
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <LCD_u8CurrentLocation_AC>:


u8 LCD_u8CurrentLocation_AC(void)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
	u8 final_location = 0;
    305a:	19 82       	std	Y+1, r1	; 0x01

	// READ_FROM IR and assign to GLOBAL VAR. DATA
	LCD_vidInstruction(0, read_operation, IR);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>

	// to lose the value of BF and get only AC value
	final_location = DATA & 0x7f;
    3066:	80 91 1b 04 	lds	r24, 0x041B
    306a:	8f 77       	andi	r24, 0x7F	; 127
    306c:	89 83       	std	Y+1, r24	; 0x01

	return final_location;
    306e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <LCD_vidClearOnDemand>:


// Clear display via start and end locations specified by the user
void LCD_vidClearOnDemand(u8 start, u8 end)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <LCD_vidClearOnDemand+0x6>
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	6a 83       	std	Y+2, r22	; 0x02

	// Start where the user has provided
	LCD_vidGoTo(start, 1);
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	61 e0       	ldi	r22, 0x01	; 1
    308a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
    308e:	14 c0       	rjmp	.+40     	; 0x30b8 <LCD_vidClearOnDemand+0x40>

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
	{
		// Indication for second line in LCD
		if(start > 16)
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	81 31       	cpi	r24, 0x11	; 17
    3094:	48 f0       	brcs	.+18     	; 0x30a8 <LCD_vidClearOnDemand+0x30>
		{
			start = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(start, 2);
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	62 e0       	ldi	r22, 0x02	; 2
    309e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			end -= 16;
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	80 51       	subi	r24, 0x10	; 16
    30a6:	8a 83       	std	Y+2, r24	; 0x02
		}
		LCD_vidInstruction(0x20, write_operation, DR);
    30a8:	80 e2       	ldi	r24, 0x20	; 32
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	41 e0       	ldi	r20, 0x01	; 1
    30ae:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_vidInstruction>

	// Start where the user has provided
	LCD_vidGoTo(start, 1);

	// Move with addresses to clear the display pixel by pixel
	for(start; start <= end; start ++)
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	8f 5f       	subi	r24, 0xFF	; 255
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	99 81       	ldd	r25, Y+1	; 0x01
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	89 17       	cp	r24, r25
    30be:	40 f7       	brcc	.-48     	; 0x3090 <LCD_vidClearOnDemand+0x18>
			end -= 16;
		}
		LCD_vidInstruction(0x20, write_operation, DR);
	}

	LCD_vidGoTo(1, 1);
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>

}
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <BOOKS_vidInitialize>:


/********************************* READY *********************************/
// Initialize books list
void BOOKS_vidInitialize(void)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
	root_book = malloc(sizeof(books));
    30da:	88 e0       	ldi	r24, 0x08	; 8
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    30e2:	90 93 23 04 	sts	0x0423, r25
    30e6:	80 93 22 04 	sts	0x0422, r24
	
	// Initializing list
	root_book -> NAME_BOOK = NULL;
    30ea:	e0 91 22 04 	lds	r30, 0x0422
    30ee:	f0 91 23 04 	lds	r31, 0x0423
    30f2:	11 82       	std	Z+1, r1	; 0x01
    30f4:	10 82       	st	Z, r1
	root_book -> NEXT_BOOK = NULL;
    30f6:	e0 91 22 04 	lds	r30, 0x0422
    30fa:	f0 91 23 04 	lds	r31, 0x0423
    30fe:	17 82       	std	Z+7, r1	; 0x07
    3100:	16 82       	std	Z+6, r1	; 0x06
	root_book -> INDEX_BOOK = 0;
    3102:	e0 91 22 04 	lds	r30, 0x0422
    3106:	f0 91 23 04 	lds	r31, 0x0423
    310a:	12 82       	std	Z+2, r1	; 0x02
	root_book -> SERIAL_NUMBER = NULL;
    310c:	e0 91 22 04 	lds	r30, 0x0422
    3110:	f0 91 23 04 	lds	r31, 0x0423
    3114:	14 82       	std	Z+4, r1	; 0x04
    3116:	13 82       	std	Z+3, r1	; 0x03
	root_book -> COPIES = 0;
    3118:	e0 91 22 04 	lds	r30, 0x0422
    311c:	f0 91 23 04 	lds	r31, 0x0423
    3120:	15 82       	std	Z+5, r1	; 0x05
	
	ptr_book = root_book;
    3122:	80 91 22 04 	lds	r24, 0x0422
    3126:	90 91 23 04 	lds	r25, 0x0423
    312a:	90 93 25 04 	sts	0x0425, r25
    312e:	80 93 24 04 	sts	0x0424, r24
}
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <BOOKS_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool BOOKS_vidInsertion(char *serial, char *name, char copies)			// if still, you can change to u8
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	6b 97       	sbiw	r28, 0x1b	; 27
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	98 8f       	std	Y+24, r25	; 0x18
    314e:	8f 8b       	std	Y+23, r24	; 0x17
    3150:	7a 8f       	std	Y+26, r23	; 0x1a
    3152:	69 8f       	std	Y+25, r22	; 0x19
    3154:	4b 8f       	std	Y+27, r20	; 0x1b
	
	int k = 0, i = 0, j = 0;
    3156:	1e 8a       	std	Y+22, r1	; 0x16
    3158:	1d 8a       	std	Y+21, r1	; 0x15
    315a:	1c 8a       	std	Y+20, r1	; 0x14
    315c:	1b 8a       	std	Y+19, r1	; 0x13
    315e:	1a 8a       	std	Y+18, r1	; 0x12
    3160:	19 8a       	std	Y+17, r1	; 0x11
	
	// Inserting sequence initialized
	ptr_book = root_book;
    3162:	80 91 22 04 	lds	r24, 0x0422
    3166:	90 91 23 04 	lds	r25, 0x0423
    316a:	90 93 25 04 	sts	0x0425, r25
    316e:	80 93 24 04 	sts	0x0424, r24
	books *tmp = malloc(sizeof(books));
    3172:	88 e0       	ldi	r24, 0x08	; 8
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    317a:	98 8b       	std	Y+16, r25	; 0x10
    317c:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfBooks++;
    317e:	80 91 1c 04 	lds	r24, 0x041C
    3182:	8f 5f       	subi	r24, 0xFF	; 255
    3184:	80 93 1c 04 	sts	0x041C, r24
	INDEX_BOOKS_GLOBAL++;
    3188:	80 91 1e 04 	lds	r24, 0x041E
    318c:	8f 5f       	subi	r24, 0xFF	; 255
    318e:	80 93 1e 04 	sts	0x041E, r24
    3192:	05 c0       	rjmp	.+10     	; 0x319e <BOOKS_vidInsertion+0x66>

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    3194:	8d 89       	ldd	r24, Y+21	; 0x15
    3196:	9e 89       	ldd	r25, Y+22	; 0x16
    3198:	01 96       	adiw	r24, 0x01	; 1
    319a:	9e 8b       	std	Y+22, r25	; 0x16
    319c:	8d 8b       	std	Y+21, r24	; 0x15
	// For future reference
	NoOfBooks++;
	INDEX_BOOKS_GLOBAL++;

	// Get member's name length
	while(name[k] != '\0')
    319e:	2d 89       	ldd	r18, Y+21	; 0x15
    31a0:	3e 89       	ldd	r19, Y+22	; 0x16
    31a2:	89 8d       	ldd	r24, Y+25	; 0x19
    31a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31a6:	fc 01       	movw	r30, r24
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	80 81       	ld	r24, Z
    31ae:	88 23       	and	r24, r24
    31b0:	89 f7       	brne	.-30     	; 0x3194 <BOOKS_vidInsertion+0x5c>
    31b2:	05 c0       	rjmp	.+10     	; 0x31be <BOOKS_vidInsertion+0x86>
		k++;
	}
	
	while(serial[i] != '\0')
	{
		i++;
    31b4:	8b 89       	ldd	r24, Y+19	; 0x13
    31b6:	9c 89       	ldd	r25, Y+20	; 0x14
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	9c 8b       	std	Y+20, r25	; 0x14
    31bc:	8b 8b       	std	Y+19, r24	; 0x13
	while(name[k] != '\0')
	{
		k++;
	}
	
	while(serial[i] != '\0')
    31be:	2b 89       	ldd	r18, Y+19	; 0x13
    31c0:	3c 89       	ldd	r19, Y+20	; 0x14
    31c2:	8f 89       	ldd	r24, Y+23	; 0x17
    31c4:	98 8d       	ldd	r25, Y+24	; 0x18
    31c6:	fc 01       	movw	r30, r24
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	80 81       	ld	r24, Z
    31ce:	88 23       	and	r24, r24
    31d0:	89 f7       	brne	.-30     	; 0x31b4 <BOOKS_vidInsertion+0x7c>
	{
		i++;
	}

	tmp -> NAME_BOOK = malloc(k+1 *sizeof(char));
    31d2:	8d 89       	ldd	r24, Y+21	; 0x15
    31d4:	9e 89       	ldd	r25, Y+22	; 0x16
    31d6:	01 96       	adiw	r24, 0x01	; 1
    31d8:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    31dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    31de:	f8 89       	ldd	r31, Y+16	; 0x10
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
	tmp -> SERIAL_NUMBER = malloc(i+1 *sizeof(char));
    31e4:	8b 89       	ldd	r24, Y+19	; 0x13
    31e6:	9c 89       	ldd	r25, Y+20	; 0x14
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    31ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    31f0:	f8 89       	ldd	r31, Y+16	; 0x10
    31f2:	94 83       	std	Z+4, r25	; 0x04
    31f4:	83 83       	std	Z+3, r24	; 0x03

	// Insert patient details
	tmp -> NEXT_BOOK = ptr_book -> NEXT_BOOK;
    31f6:	e0 91 24 04 	lds	r30, 0x0424
    31fa:	f0 91 25 04 	lds	r31, 0x0425
    31fe:	86 81       	ldd	r24, Z+6	; 0x06
    3200:	97 81       	ldd	r25, Z+7	; 0x07
    3202:	ef 85       	ldd	r30, Y+15	; 0x0f
    3204:	f8 89       	ldd	r31, Y+16	; 0x10
    3206:	97 83       	std	Z+7, r25	; 0x07
    3208:	86 83       	std	Z+6, r24	; 0x06

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
    320a:	80 91 1e 04 	lds	r24, 0x041E
    320e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3210:	f8 89       	ldd	r31, Y+16	; 0x10
    3212:	82 83       	std	Z+2, r24	; 0x02
	tmp -> COPIES = copies;
    3214:	ef 85       	ldd	r30, Y+15	; 0x0f
    3216:	f8 89       	ldd	r31, Y+16	; 0x10
    3218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321a:	85 83       	std	Z+5, r24	; 0x05
	
	// Save name
	for(j = 0; j < k ; j++)
    321c:	1a 8a       	std	Y+18, r1	; 0x12
    321e:	19 8a       	std	Y+17, r1	; 0x11
    3220:	17 c0       	rjmp	.+46     	; 0x3250 <BOOKS_vidInsertion+0x118>
	{
		tmp ->  NAME_BOOK[j] = name[j];
    3222:	ef 85       	ldd	r30, Y+15	; 0x0f
    3224:	f8 89       	ldd	r31, Y+16	; 0x10
    3226:	20 81       	ld	r18, Z
    3228:	31 81       	ldd	r19, Z+1	; 0x01
    322a:	89 89       	ldd	r24, Y+17	; 0x11
    322c:	9a 89       	ldd	r25, Y+18	; 0x12
    322e:	d9 01       	movw	r26, r18
    3230:	a8 0f       	add	r26, r24
    3232:	b9 1f       	adc	r27, r25
    3234:	29 89       	ldd	r18, Y+17	; 0x11
    3236:	3a 89       	ldd	r19, Y+18	; 0x12
    3238:	89 8d       	ldd	r24, Y+25	; 0x19
    323a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	80 81       	ld	r24, Z
    3244:	8c 93       	st	X, r24

	tmp -> INDEX_BOOK = INDEX_BOOKS_GLOBAL;
	tmp -> COPIES = copies;
	
	// Save name
	for(j = 0; j < k ; j++)
    3246:	89 89       	ldd	r24, Y+17	; 0x11
    3248:	9a 89       	ldd	r25, Y+18	; 0x12
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	9a 8b       	std	Y+18, r25	; 0x12
    324e:	89 8b       	std	Y+17, r24	; 0x11
    3250:	29 89       	ldd	r18, Y+17	; 0x11
    3252:	3a 89       	ldd	r19, Y+18	; 0x12
    3254:	8d 89       	ldd	r24, Y+21	; 0x15
    3256:	9e 89       	ldd	r25, Y+22	; 0x16
    3258:	28 17       	cp	r18, r24
    325a:	39 07       	cpc	r19, r25
    325c:	14 f3       	brlt	.-60     	; 0x3222 <BOOKS_vidInsertion+0xea>
	{
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';
    325e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3260:	f8 89       	ldd	r31, Y+16	; 0x10
    3262:	20 81       	ld	r18, Z
    3264:	31 81       	ldd	r19, Z+1	; 0x01
    3266:	89 89       	ldd	r24, Y+17	; 0x11
    3268:	9a 89       	ldd	r25, Y+18	; 0x12
    326a:	f9 01       	movw	r30, r18
    326c:	e8 0f       	add	r30, r24
    326e:	f9 1f       	adc	r31, r25
    3270:	10 82       	st	Z, r1

	// Save serialNumber
	for(j = 0; j < i ; j++)
    3272:	1a 8a       	std	Y+18, r1	; 0x12
    3274:	19 8a       	std	Y+17, r1	; 0x11
    3276:	17 c0       	rjmp	.+46     	; 0x32a6 <BOOKS_vidInsertion+0x16e>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
    3278:	ef 85       	ldd	r30, Y+15	; 0x0f
    327a:	f8 89       	ldd	r31, Y+16	; 0x10
    327c:	23 81       	ldd	r18, Z+3	; 0x03
    327e:	34 81       	ldd	r19, Z+4	; 0x04
    3280:	89 89       	ldd	r24, Y+17	; 0x11
    3282:	9a 89       	ldd	r25, Y+18	; 0x12
    3284:	d9 01       	movw	r26, r18
    3286:	a8 0f       	add	r26, r24
    3288:	b9 1f       	adc	r27, r25
    328a:	29 89       	ldd	r18, Y+17	; 0x11
    328c:	3a 89       	ldd	r19, Y+18	; 0x12
    328e:	8f 89       	ldd	r24, Y+23	; 0x17
    3290:	98 8d       	ldd	r25, Y+24	; 0x18
    3292:	fc 01       	movw	r30, r24
    3294:	e2 0f       	add	r30, r18
    3296:	f3 1f       	adc	r31, r19
    3298:	80 81       	ld	r24, Z
    329a:	8c 93       	st	X, r24
		tmp ->  NAME_BOOK[j] = name[j];
	}
	tmp ->  NAME_BOOK[j] = '\0';

	// Save serialNumber
	for(j = 0; j < i ; j++)
    329c:	89 89       	ldd	r24, Y+17	; 0x11
    329e:	9a 89       	ldd	r25, Y+18	; 0x12
    32a0:	01 96       	adiw	r24, 0x01	; 1
    32a2:	9a 8b       	std	Y+18, r25	; 0x12
    32a4:	89 8b       	std	Y+17, r24	; 0x11
    32a6:	29 89       	ldd	r18, Y+17	; 0x11
    32a8:	3a 89       	ldd	r19, Y+18	; 0x12
    32aa:	8b 89       	ldd	r24, Y+19	; 0x13
    32ac:	9c 89       	ldd	r25, Y+20	; 0x14
    32ae:	28 17       	cp	r18, r24
    32b0:	39 07       	cpc	r19, r25
    32b2:	14 f3       	brlt	.-60     	; 0x3278 <BOOKS_vidInsertion+0x140>
	{
		tmp ->  SERIAL_NUMBER[j] = serial[j];
	}
	tmp ->  SERIAL_NUMBER[j] = '\0';
    32b4:	ef 85       	ldd	r30, Y+15	; 0x0f
    32b6:	f8 89       	ldd	r31, Y+16	; 0x10
    32b8:	23 81       	ldd	r18, Z+3	; 0x03
    32ba:	34 81       	ldd	r19, Z+4	; 0x04
    32bc:	89 89       	ldd	r24, Y+17	; 0x11
    32be:	9a 89       	ldd	r25, Y+18	; 0x12
    32c0:	f9 01       	movw	r30, r18
    32c2:	e8 0f       	add	r30, r24
    32c4:	f9 1f       	adc	r31, r25
    32c6:	10 82       	st	Z, r1


	// Update list
	ptr_book -> NEXT_BOOK = tmp;
    32c8:	e0 91 24 04 	lds	r30, 0x0424
    32cc:	f0 91 25 04 	lds	r31, 0x0425
    32d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d2:	98 89       	ldd	r25, Y+16	; 0x10
    32d4:	97 83       	std	Z+7, r25	; 0x07
    32d6:	86 83       	std	Z+6, r24	; 0x06

	// Indicate success
	LCD_String("success");
    32d8:	80 ec       	ldi	r24, 0xC0	; 192
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	aa ef       	ldi	r26, 0xFA	; 250
    32e6:	b3 e4       	ldi	r27, 0x43	; 67
    32e8:	8b 87       	std	Y+11, r24	; 0x0b
    32ea:	9c 87       	std	Y+12, r25	; 0x0c
    32ec:	ad 87       	std	Y+13, r26	; 0x0d
    32ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a ef       	ldi	r20, 0xFA	; 250
    32fe:	54 e4       	ldi	r21, 0x44	; 68
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	8f 83       	std	Y+7, r24	; 0x07
    330a:	98 87       	std	Y+8, r25	; 0x08
    330c:	a9 87       	std	Y+9, r26	; 0x09
    330e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3310:	6f 81       	ldd	r22, Y+7	; 0x07
    3312:	78 85       	ldd	r23, Y+8	; 0x08
    3314:	89 85       	ldd	r24, Y+9	; 0x09
    3316:	9a 85       	ldd	r25, Y+10	; 0x0a
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <BOOKS_vidInsertion+0x1fa>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	9e 83       	std	Y+6, r25	; 0x06
    332e:	8d 83       	std	Y+5, r24	; 0x05
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <BOOKS_vidInsertion+0x278>
	else if (__tmp > 65535)
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <BOOKS_vidInsertion+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6b 85       	ldd	r22, Y+11	; 0x0b
    334c:	7c 85       	ldd	r23, Y+12	; 0x0c
    334e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3350:	9e 85       	ldd	r25, Y+14	; 0x0e
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <BOOKS_vidInsertion+0x25a>
    3374:	88 ec       	ldi	r24, 0xC8	; 200
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	9c 81       	ldd	r25, Y+4	; 0x04
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <BOOKS_vidInsertion+0x248>
    3384:	9c 83       	std	Y+4, r25	; 0x04
    3386:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	8d 81       	ldd	r24, Y+5	; 0x05
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	9e 83       	std	Y+6, r25	; 0x06
    3390:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	9e 81       	ldd	r25, Y+6	; 0x06
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <BOOKS_vidInsertion+0x23c>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <BOOKS_vidInsertion+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	6f 81       	ldd	r22, Y+7	; 0x07
    339e:	78 85       	ldd	r23, Y+8	; 0x08
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	8d 81       	ldd	r24, Y+5	; 0x05
    33b2:	9e 81       	ldd	r25, Y+6	; 0x06
    33b4:	9a 83       	std	Y+2, r25	; 0x02
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	9a 81       	ldd	r25, Y+2	; 0x02
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <BOOKS_vidInsertion+0x284>
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	60 e2       	ldi	r22, 0x20	; 32
    33c8:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
	return true;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
}
    33ce:	6b 96       	adiw	r28, 0x1b	; 27
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	08 95       	ret

000033e0 <BOOKS_u8DeleteEntire>:



/********************************* READY *********************************/
char BOOKS_u8DeleteEntire(void)
{
    33e0:	df 93       	push	r29
    33e2:	cf 93       	push	r28
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <BOOKS_u8DeleteEntire+0x6>
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	books *last_before_stack = NULL;
    33ea:	1a 82       	std	Y+2, r1	; 0x02
    33ec:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_book -> NEXT_BOOK != NULL)
    33ee:	e0 91 24 04 	lds	r30, 0x0424
    33f2:	f0 91 25 04 	lds	r31, 0x0425
    33f6:	86 81       	ldd	r24, Z+6	; 0x06
    33f8:	97 81       	ldd	r25, Z+7	; 0x07
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	c1 f0       	breq	.+48     	; 0x342e <BOOKS_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_book;
    33fe:	80 91 24 04 	lds	r24, 0x0424
    3402:	90 91 25 04 	lds	r25, 0x0425
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
		ptr_book = ptr_book -> NEXT_BOOK;
    340a:	e0 91 24 04 	lds	r30, 0x0424
    340e:	f0 91 25 04 	lds	r31, 0x0425
    3412:	86 81       	ldd	r24, Z+6	; 0x06
    3414:	97 81       	ldd	r25, Z+7	; 0x07
    3416:	90 93 25 04 	sts	0x0425, r25
    341a:	80 93 24 04 	sts	0x0424, r24
		BOOKS_u8DeleteEntire();
    341e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <BOOKS_u8DeleteEntire>
		ptr_book = last_before_stack;
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	9a 81       	ldd	r25, Y+2	; 0x02
    3426:	90 93 25 04 	sts	0x0425, r25
    342a:	80 93 24 04 	sts	0x0424, r24
	}

	// free current node and return
	free(ptr_book);
    342e:	80 91 24 04 	lds	r24, 0x0424
    3432:	90 91 25 04 	lds	r25, 0x0425
    3436:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <free>
	NoOfBooks = 0;
    343a:	10 92 1c 04 	sts	0x041C, r1
	return 0;
    343e:	80 e0       	ldi	r24, 0x00	; 0
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <BOOKS_vidRestart>:



void BOOKS_vidRestart (void)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
	BOOKS_restart_vip();
    3452:	0e 94 32 1a 	call	0x3464	; 0x3464 <BOOKS_restart_vip>
	BOOKS_u8DeleteEntire();
    3456:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <BOOKS_u8DeleteEntire>
	BOOKS_vidInitialize();
    345a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <BOOKS_vidInitialize>
}
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <BOOKS_restart_vip>:

void BOOKS_restart_vip(void)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
	ptr_book = root_book;
    346c:	80 91 22 04 	lds	r24, 0x0422
    3470:	90 91 23 04 	lds	r25, 0x0423
    3474:	90 93 25 04 	sts	0x0425, r25
    3478:	80 93 24 04 	sts	0x0424, r24
}
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <BOOKS_search>:

// Search for a book either via ISBN or its location in list
u8 BOOKS_search (char *serial, char index)
{
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	ef 97       	sbiw	r28, 0x3f	; 63
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	9d af       	std	Y+61, r25	; 0x3d
    3498:	8c af       	std	Y+60, r24	; 0x3c
    349a:	6e af       	std	Y+62, r22	; 0x3e
	// Start after the root
	ptr_book = root_book -> NEXT_BOOK;
    349c:	e0 91 22 04 	lds	r30, 0x0422
    34a0:	f0 91 23 04 	lds	r31, 0x0423
    34a4:	86 81       	ldd	r24, Z+6	; 0x06
    34a6:	97 81       	ldd	r25, Z+7	; 0x07
    34a8:	90 93 25 04 	sts	0x0425, r25
    34ac:	80 93 24 04 	sts	0x0424, r24
	
	bool found = false;
    34b0:	1b ae       	std	Y+59, r1	; 0x3b


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	9a af       	std	Y+58, r25	; 0x3a
    34b8:	89 af       	std	Y+57, r24	; 0x39
    34ba:	c8 c1       	rjmp	.+912    	; 0x384c <BOOKS_search+0x3ca>
	{
		if(CompareString(serial, ptr_book -> SERIAL_NUMBER) || index == ptr_book -> INDEX_BOOK)
    34bc:	e0 91 24 04 	lds	r30, 0x0424
    34c0:	f0 91 25 04 	lds	r31, 0x0425
    34c4:	23 81       	ldd	r18, Z+3	; 0x03
    34c6:	34 81       	ldd	r19, Z+4	; 0x04
    34c8:	8c ad       	ldd	r24, Y+60	; 0x3c
    34ca:	9d ad       	ldd	r25, Y+61	; 0x3d
    34cc:	b9 01       	movw	r22, r18
    34ce:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <CompareString>
    34d2:	88 23       	and	r24, r24
    34d4:	49 f4       	brne	.+18     	; 0x34e8 <BOOKS_search+0x66>
    34d6:	e0 91 24 04 	lds	r30, 0x0424
    34da:	f0 91 25 04 	lds	r31, 0x0425
    34de:	92 81       	ldd	r25, Z+2	; 0x02
    34e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    34e2:	98 17       	cp	r25, r24
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <BOOKS_search+0x66>
    34e6:	a3 c1       	rjmp	.+838    	; 0x382e <BOOKS_search+0x3ac>
		{
			found = true;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	8b af       	std	Y+59, r24	; 0x3b
			book_to_decay = ptr_book;
    34ec:	80 91 24 04 	lds	r24, 0x0424
    34f0:	90 91 25 04 	lds	r25, 0x0425
    34f4:	90 93 27 04 	sts	0x0427, r25
    34f8:	80 93 26 04 	sts	0x0426, r24
			LCD_vidClearOnDemand(1, 32);
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	60 e2       	ldi	r22, 0x20	; 32
    3500:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

			LCD_String("BOOK'S INFO:");
    3504:	88 ec       	ldi	r24, 0xC8	; 200
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_vidGoTo(1, 2);
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	62 e0       	ldi	r22, 0x02	; 2
    3510:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			LCD_String("wait...");
    3514:	85 ed       	ldi	r24, 0xD5	; 213
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	aa ef       	ldi	r26, 0xFA	; 250
    3522:	b3 e4       	ldi	r27, 0x43	; 67
    3524:	8d ab       	std	Y+53, r24	; 0x35
    3526:	9e ab       	std	Y+54, r25	; 0x36
    3528:	af ab       	std	Y+55, r26	; 0x37
    352a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352c:	6d a9       	ldd	r22, Y+53	; 0x35
    352e:	7e a9       	ldd	r23, Y+54	; 0x36
    3530:	8f a9       	ldd	r24, Y+55	; 0x37
    3532:	98 ad       	ldd	r25, Y+56	; 0x38
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	4a ef       	ldi	r20, 0xFA	; 250
    353a:	54 e4       	ldi	r21, 0x44	; 68
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	89 ab       	std	Y+49, r24	; 0x31
    3546:	9a ab       	std	Y+50, r25	; 0x32
    3548:	ab ab       	std	Y+51, r26	; 0x33
    354a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    354c:	69 a9       	ldd	r22, Y+49	; 0x31
    354e:	7a a9       	ldd	r23, Y+50	; 0x32
    3550:	8b a9       	ldd	r24, Y+51	; 0x33
    3552:	9c a9       	ldd	r25, Y+52	; 0x34
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e8       	ldi	r20, 0x80	; 128
    355a:	5f e3       	ldi	r21, 0x3F	; 63
    355c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3560:	88 23       	and	r24, r24
    3562:	2c f4       	brge	.+10     	; 0x356e <BOOKS_search+0xec>
		__ticks = 1;
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	98 ab       	std	Y+48, r25	; 0x30
    356a:	8f a7       	std	Y+47, r24	; 0x2f
    356c:	3f c0       	rjmp	.+126    	; 0x35ec <BOOKS_search+0x16a>
	else if (__tmp > 65535)
    356e:	69 a9       	ldd	r22, Y+49	; 0x31
    3570:	7a a9       	ldd	r23, Y+50	; 0x32
    3572:	8b a9       	ldd	r24, Y+51	; 0x33
    3574:	9c a9       	ldd	r25, Y+52	; 0x34
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	3f ef       	ldi	r19, 0xFF	; 255
    357a:	4f e7       	ldi	r20, 0x7F	; 127
    357c:	57 e4       	ldi	r21, 0x47	; 71
    357e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3582:	18 16       	cp	r1, r24
    3584:	4c f5       	brge	.+82     	; 0x35d8 <BOOKS_search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3586:	6d a9       	ldd	r22, Y+53	; 0x35
    3588:	7e a9       	ldd	r23, Y+54	; 0x36
    358a:	8f a9       	ldd	r24, Y+55	; 0x37
    358c:	98 ad       	ldd	r25, Y+56	; 0x38
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 ab       	std	Y+48, r25	; 0x30
    35ac:	8f a7       	std	Y+47, r24	; 0x2f
    35ae:	0f c0       	rjmp	.+30     	; 0x35ce <BOOKS_search+0x14c>
    35b0:	88 ec       	ldi	r24, 0xC8	; 200
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	9e a7       	std	Y+46, r25	; 0x2e
    35b6:	8d a7       	std	Y+45, r24	; 0x2d
    35b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    35ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <BOOKS_search+0x13a>
    35c0:	9e a7       	std	Y+46, r25	; 0x2e
    35c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    35c6:	98 a9       	ldd	r25, Y+48	; 0x30
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	98 ab       	std	Y+48, r25	; 0x30
    35cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    35d0:	98 a9       	ldd	r25, Y+48	; 0x30
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	69 f7       	brne	.-38     	; 0x35b0 <BOOKS_search+0x12e>
    35d6:	14 c0       	rjmp	.+40     	; 0x3600 <BOOKS_search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d8:	69 a9       	ldd	r22, Y+49	; 0x31
    35da:	7a a9       	ldd	r23, Y+50	; 0x32
    35dc:	8b a9       	ldd	r24, Y+51	; 0x33
    35de:	9c a9       	ldd	r25, Y+52	; 0x34
    35e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	98 ab       	std	Y+48, r25	; 0x30
    35ea:	8f a7       	std	Y+47, r24	; 0x2f
    35ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ee:	98 a9       	ldd	r25, Y+48	; 0x30
    35f0:	9c a7       	std	Y+44, r25	; 0x2c
    35f2:	8b a7       	std	Y+43, r24	; 0x2b
    35f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <BOOKS_search+0x176>
    35fc:	9c a7       	std	Y+44, r25	; 0x2c
    35fe:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);

			LCD_vidClearOnDemand(1, 32);
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	60 e2       	ldi	r22, 0x20	; 32
    3604:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

			LCD_String("Name:");
    3608:	8d ed       	ldi	r24, 0xDD	; 221
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_vidGoTo(1, 2);
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	62 e0       	ldi	r22, 0x02	; 2
    3614:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			LCD_String(ptr_book -> NAME_BOOK);
    3618:	e0 91 24 04 	lds	r30, 0x0424
    361c:	f0 91 25 04 	lds	r31, 0x0425
    3620:	80 81       	ld	r24, Z
    3622:	91 81       	ldd	r25, Z+1	; 0x01
    3624:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	aa ef       	ldi	r26, 0xFA	; 250
    362e:	b4 e4       	ldi	r27, 0x44	; 68
    3630:	8f a3       	std	Y+39, r24	; 0x27
    3632:	98 a7       	std	Y+40, r25	; 0x28
    3634:	a9 a7       	std	Y+41, r26	; 0x29
    3636:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	6f a1       	ldd	r22, Y+39	; 0x27
    363a:	78 a5       	ldd	r23, Y+40	; 0x28
    363c:	89 a5       	ldd	r24, Y+41	; 0x29
    363e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	4a ef       	ldi	r20, 0xFA	; 250
    3646:	54 e4       	ldi	r21, 0x44	; 68
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	8b a3       	std	Y+35, r24	; 0x23
    3652:	9c a3       	std	Y+36, r25	; 0x24
    3654:	ad a3       	std	Y+37, r26	; 0x25
    3656:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3658:	6b a1       	ldd	r22, Y+35	; 0x23
    365a:	7c a1       	ldd	r23, Y+36	; 0x24
    365c:	8d a1       	ldd	r24, Y+37	; 0x25
    365e:	9e a1       	ldd	r25, Y+38	; 0x26
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	2c f4       	brge	.+10     	; 0x367a <BOOKS_search+0x1f8>
		__ticks = 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9a a3       	std	Y+34, r25	; 0x22
    3676:	89 a3       	std	Y+33, r24	; 0x21
    3678:	3f c0       	rjmp	.+126    	; 0x36f8 <BOOKS_search+0x276>
	else if (__tmp > 65535)
    367a:	6b a1       	ldd	r22, Y+35	; 0x23
    367c:	7c a1       	ldd	r23, Y+36	; 0x24
    367e:	8d a1       	ldd	r24, Y+37	; 0x25
    3680:	9e a1       	ldd	r25, Y+38	; 0x26
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	3f ef       	ldi	r19, 0xFF	; 255
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	57 e4       	ldi	r21, 0x47	; 71
    368a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	4c f5       	brge	.+82     	; 0x36e4 <BOOKS_search+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	6f a1       	ldd	r22, Y+39	; 0x27
    3694:	78 a5       	ldd	r23, Y+40	; 0x28
    3696:	89 a5       	ldd	r24, Y+41	; 0x29
    3698:	9a a5       	ldd	r25, Y+42	; 0x2a
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	9a a3       	std	Y+34, r25	; 0x22
    36b8:	89 a3       	std	Y+33, r24	; 0x21
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <BOOKS_search+0x258>
    36bc:	88 ec       	ldi	r24, 0xC8	; 200
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	98 a3       	std	Y+32, r25	; 0x20
    36c2:	8f 8f       	std	Y+31, r24	; 0x1f
    36c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36c6:	98 a1       	ldd	r25, Y+32	; 0x20
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <BOOKS_search+0x246>
    36cc:	98 a3       	std	Y+32, r25	; 0x20
    36ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	89 a1       	ldd	r24, Y+33	; 0x21
    36d2:	9a a1       	ldd	r25, Y+34	; 0x22
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	9a a3       	std	Y+34, r25	; 0x22
    36d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	89 a1       	ldd	r24, Y+33	; 0x21
    36dc:	9a a1       	ldd	r25, Y+34	; 0x22
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	69 f7       	brne	.-38     	; 0x36bc <BOOKS_search+0x23a>
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <BOOKS_search+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	6b a1       	ldd	r22, Y+35	; 0x23
    36e6:	7c a1       	ldd	r23, Y+36	; 0x24
    36e8:	8d a1       	ldd	r24, Y+37	; 0x25
    36ea:	9e a1       	ldd	r25, Y+38	; 0x26
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9a a3       	std	Y+34, r25	; 0x22
    36f6:	89 a3       	std	Y+33, r24	; 0x21
    36f8:	89 a1       	ldd	r24, Y+33	; 0x21
    36fa:	9a a1       	ldd	r25, Y+34	; 0x22
    36fc:	9e 8f       	std	Y+30, r25	; 0x1e
    36fe:	8d 8f       	std	Y+29, r24	; 0x1d
    3700:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3702:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <BOOKS_search+0x282>
    3708:	9e 8f       	std	Y+30, r25	; 0x1e
    370a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	60 e2       	ldi	r22, 0x20	; 32
    3710:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

			LCD_String("ISBN:");
    3714:	83 ee       	ldi	r24, 0xE3	; 227
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_vidGoTo(1, 2);
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	62 e0       	ldi	r22, 0x02	; 2
    3720:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			LCD_String(ptr_book -> SERIAL_NUMBER);
    3724:	e0 91 24 04 	lds	r30, 0x0424
    3728:	f0 91 25 04 	lds	r31, 0x0425
    372c:	83 81       	ldd	r24, Z+3	; 0x03
    372e:	94 81       	ldd	r25, Z+4	; 0x04
    3730:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	aa ef       	ldi	r26, 0xFA	; 250
    373a:	b4 e4       	ldi	r27, 0x44	; 68
    373c:	89 8f       	std	Y+25, r24	; 0x19
    373e:	9a 8f       	std	Y+26, r25	; 0x1a
    3740:	ab 8f       	std	Y+27, r26	; 0x1b
    3742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3744:	69 8d       	ldd	r22, Y+25	; 0x19
    3746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a ef       	ldi	r20, 0xFA	; 250
    3752:	54 e4       	ldi	r21, 0x44	; 68
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8d 8b       	std	Y+21, r24	; 0x15
    375e:	9e 8b       	std	Y+22, r25	; 0x16
    3760:	af 8b       	std	Y+23, r26	; 0x17
    3762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3764:	6d 89       	ldd	r22, Y+21	; 0x15
    3766:	7e 89       	ldd	r23, Y+22	; 0x16
    3768:	8f 89       	ldd	r24, Y+23	; 0x17
    376a:	98 8d       	ldd	r25, Y+24	; 0x18
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e8       	ldi	r20, 0x80	; 128
    3772:	5f e3       	ldi	r21, 0x3F	; 63
    3774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3778:	88 23       	and	r24, r24
    377a:	2c f4       	brge	.+10     	; 0x3786 <BOOKS_search+0x304>
		__ticks = 1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9c 8b       	std	Y+20, r25	; 0x14
    3782:	8b 8b       	std	Y+19, r24	; 0x13
    3784:	3f c0       	rjmp	.+126    	; 0x3804 <BOOKS_search+0x382>
	else if (__tmp > 65535)
    3786:	6d 89       	ldd	r22, Y+21	; 0x15
    3788:	7e 89       	ldd	r23, Y+22	; 0x16
    378a:	8f 89       	ldd	r24, Y+23	; 0x17
    378c:	98 8d       	ldd	r25, Y+24	; 0x18
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	4c f5       	brge	.+82     	; 0x37f0 <BOOKS_search+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	69 8d       	ldd	r22, Y+25	; 0x19
    37a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9c 8b       	std	Y+20, r25	; 0x14
    37c4:	8b 8b       	std	Y+19, r24	; 0x13
    37c6:	0f c0       	rjmp	.+30     	; 0x37e6 <BOOKS_search+0x364>
    37c8:	88 ec       	ldi	r24, 0xC8	; 200
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9a 8b       	std	Y+18, r25	; 0x12
    37ce:	89 8b       	std	Y+17, r24	; 0x11
    37d0:	89 89       	ldd	r24, Y+17	; 0x11
    37d2:	9a 89       	ldd	r25, Y+18	; 0x12
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <BOOKS_search+0x352>
    37d8:	9a 8b       	std	Y+18, r25	; 0x12
    37da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	8b 89       	ldd	r24, Y+19	; 0x13
    37de:	9c 89       	ldd	r25, Y+20	; 0x14
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	9c 8b       	std	Y+20, r25	; 0x14
    37e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e6:	8b 89       	ldd	r24, Y+19	; 0x13
    37e8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	69 f7       	brne	.-38     	; 0x37c8 <BOOKS_search+0x346>
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <BOOKS_search+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f0:	6d 89       	ldd	r22, Y+21	; 0x15
    37f2:	7e 89       	ldd	r23, Y+22	; 0x16
    37f4:	8f 89       	ldd	r24, Y+23	; 0x17
    37f6:	98 8d       	ldd	r25, Y+24	; 0x18
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9c 8b       	std	Y+20, r25	; 0x14
    3802:	8b 8b       	std	Y+19, r24	; 0x13
    3804:	8b 89       	ldd	r24, Y+19	; 0x13
    3806:	9c 89       	ldd	r25, Y+20	; 0x14
    3808:	98 8b       	std	Y+16, r25	; 0x10
    380a:	8f 87       	std	Y+15, r24	; 0x0f
    380c:	8f 85       	ldd	r24, Y+15	; 0x0f
    380e:	98 89       	ldd	r25, Y+16	; 0x10
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <BOOKS_search+0x38e>
    3814:	98 8b       	std	Y+16, r25	; 0x10
    3816:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	60 e2       	ldi	r22, 0x20	; 32
    381c:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
			_delay_ms(2000);

			LCD_vidClearOnDemand(1, 32);
*/
			// Update buffer incase of borrowing			
			return ptr_book -> INDEX_BOOK;
    3820:	e0 91 24 04 	lds	r30, 0x0424
    3824:	f0 91 25 04 	lds	r31, 0x0425
    3828:	82 81       	ldd	r24, Z+2	; 0x02
    382a:	8f af       	std	Y+63, r24	; 0x3f
    382c:	b2 c0       	rjmp	.+356    	; 0x3992 <BOOKS_search+0x510>
		}
		ptr_book = ptr_book -> NEXT_BOOK;
    382e:	e0 91 24 04 	lds	r30, 0x0424
    3832:	f0 91 25 04 	lds	r31, 0x0425
    3836:	86 81       	ldd	r24, Z+6	; 0x06
    3838:	97 81       	ldd	r25, Z+7	; 0x07
    383a:	90 93 25 04 	sts	0x0425, r25
    383e:	80 93 24 04 	sts	0x0424, r24
	
	bool found = false;


	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfBooks; i++)
    3842:	89 ad       	ldd	r24, Y+57	; 0x39
    3844:	9a ad       	ldd	r25, Y+58	; 0x3a
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	9a af       	std	Y+58, r25	; 0x3a
    384a:	89 af       	std	Y+57, r24	; 0x39
    384c:	80 91 1c 04 	lds	r24, 0x041C
    3850:	28 2f       	mov	r18, r24
    3852:	33 27       	eor	r19, r19
    3854:	27 fd       	sbrc	r18, 7
    3856:	30 95       	com	r19
    3858:	89 ad       	ldd	r24, Y+57	; 0x39
    385a:	9a ad       	ldd	r25, Y+58	; 0x3a
    385c:	28 17       	cp	r18, r24
    385e:	39 07       	cpc	r19, r25
    3860:	0c f0       	brlt	.+2      	; 0x3864 <BOOKS_search+0x3e2>
    3862:	2c ce       	rjmp	.-936    	; 0x34bc <BOOKS_search+0x3a>
			return ptr_book -> INDEX_BOOK;
		}
		ptr_book = ptr_book -> NEXT_BOOK;
	}

	if(!found)
    3864:	8b ad       	ldd	r24, Y+59	; 0x3b
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	89 27       	eor	r24, r25
    386a:	88 23       	and	r24, r24
    386c:	09 f4       	brne	.+2      	; 0x3870 <BOOKS_search+0x3ee>
    386e:	88 c0       	rjmp	.+272    	; 0x3980 <BOOKS_search+0x4fe>
	{
		LCD_vidGoTo(1, 1);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	61 e0       	ldi	r22, 0x01	; 1
    3874:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String("NO BOOKS YET");
    3878:	89 ee       	ldi	r24, 0xE9	; 233
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	aa ef       	ldi	r26, 0xFA	; 250
    3886:	b4 e4       	ldi	r27, 0x44	; 68
    3888:	8b 87       	std	Y+11, r24	; 0x0b
    388a:	9c 87       	std	Y+12, r25	; 0x0c
    388c:	ad 87       	std	Y+13, r26	; 0x0d
    388e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	6b 85       	ldd	r22, Y+11	; 0x0b
    3892:	7c 85       	ldd	r23, Y+12	; 0x0c
    3894:	8d 85       	ldd	r24, Y+13	; 0x0d
    3896:	9e 85       	ldd	r25, Y+14	; 0x0e
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	4a ef       	ldi	r20, 0xFA	; 250
    389e:	54 e4       	ldi	r21, 0x44	; 68
    38a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	8f 83       	std	Y+7, r24	; 0x07
    38aa:	98 87       	std	Y+8, r25	; 0x08
    38ac:	a9 87       	std	Y+9, r26	; 0x09
    38ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b0:	6f 81       	ldd	r22, Y+7	; 0x07
    38b2:	78 85       	ldd	r23, Y+8	; 0x08
    38b4:	89 85       	ldd	r24, Y+9	; 0x09
    38b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e8       	ldi	r20, 0x80	; 128
    38be:	5f e3       	ldi	r21, 0x3F	; 63
    38c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c4:	88 23       	and	r24, r24
    38c6:	2c f4       	brge	.+10     	; 0x38d2 <BOOKS_search+0x450>
		__ticks = 1;
    38c8:	81 e0       	ldi	r24, 0x01	; 1
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	9e 83       	std	Y+6, r25	; 0x06
    38ce:	8d 83       	std	Y+5, r24	; 0x05
    38d0:	3f c0       	rjmp	.+126    	; 0x3950 <BOOKS_search+0x4ce>
	else if (__tmp > 65535)
    38d2:	6f 81       	ldd	r22, Y+7	; 0x07
    38d4:	78 85       	ldd	r23, Y+8	; 0x08
    38d6:	89 85       	ldd	r24, Y+9	; 0x09
    38d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	3f ef       	ldi	r19, 0xFF	; 255
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	57 e4       	ldi	r21, 0x47	; 71
    38e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	4c f5       	brge	.+82     	; 0x393c <BOOKS_search+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	40 e2       	ldi	r20, 0x20	; 32
    38f8:	51 e4       	ldi	r21, 0x41	; 65
    38fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	bc 01       	movw	r22, r24
    3904:	cd 01       	movw	r24, r26
    3906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	9e 83       	std	Y+6, r25	; 0x06
    3910:	8d 83       	std	Y+5, r24	; 0x05
    3912:	0f c0       	rjmp	.+30     	; 0x3932 <BOOKS_search+0x4b0>
    3914:	88 ec       	ldi	r24, 0xC8	; 200
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	9c 83       	std	Y+4, r25	; 0x04
    391a:	8b 83       	std	Y+3, r24	; 0x03
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	01 97       	sbiw	r24, 0x01	; 1
    3922:	f1 f7       	brne	.-4      	; 0x3920 <BOOKS_search+0x49e>
    3924:	9c 83       	std	Y+4, r25	; 0x04
    3926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3928:	8d 81       	ldd	r24, Y+5	; 0x05
    392a:	9e 81       	ldd	r25, Y+6	; 0x06
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3932:	8d 81       	ldd	r24, Y+5	; 0x05
    3934:	9e 81       	ldd	r25, Y+6	; 0x06
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	69 f7       	brne	.-38     	; 0x3914 <BOOKS_search+0x492>
    393a:	14 c0       	rjmp	.+40     	; 0x3964 <BOOKS_search+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393c:	6f 81       	ldd	r22, Y+7	; 0x07
    393e:	78 85       	ldd	r23, Y+8	; 0x08
    3940:	89 85       	ldd	r24, Y+9	; 0x09
    3942:	9a 85       	ldd	r25, Y+10	; 0x0a
    3944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	8d 81       	ldd	r24, Y+5	; 0x05
    3952:	9e 81       	ldd	r25, Y+6	; 0x06
    3954:	9a 83       	std	Y+2, r25	; 0x02
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	89 81       	ldd	r24, Y+1	; 0x01
    395a:	9a 81       	ldd	r25, Y+2	; 0x02
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <BOOKS_search+0x4da>
    3960:	9a 83       	std	Y+2, r25	; 0x02
    3962:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	60 e2       	ldi	r22, 0x20	; 32
    3968:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		ptr_book = root_book;
    396c:	80 91 22 04 	lds	r24, 0x0422
    3970:	90 91 23 04 	lds	r25, 0x0423
    3974:	90 93 25 04 	sts	0x0425, r25
    3978:	80 93 24 04 	sts	0x0424, r24
		return DoesNot_exist;
    397c:	1f ae       	std	Y+63, r1	; 0x3f
    397e:	09 c0       	rjmp	.+18     	; 0x3992 <BOOKS_search+0x510>
	}

	ptr_book = root_book;
    3980:	80 91 22 04 	lds	r24, 0x0422
    3984:	90 91 23 04 	lds	r25, 0x0423
    3988:	90 93 25 04 	sts	0x0425, r25
    398c:	80 93 24 04 	sts	0x0424, r24
	return 0;
    3990:	1f ae       	std	Y+63, r1	; 0x3f
    3992:	8f ad       	ldd	r24, Y+63	; 0x3f
}
    3994:	ef 96       	adiw	r28, 0x3f	; 63
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <BOOKS_show>:
*/


// Shows all Books in the library
bool BOOKS_show(void)
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	ab 97       	sbiw	r28, 0x2b	; 43
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
	LCD_vidClearOnDemand(1, 24);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	68 e1       	ldi	r22, 0x18	; 24
    39be:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

	ptr_book = root_book -> NEXT_BOOK;
    39c2:	e0 91 22 04 	lds	r30, 0x0422
    39c6:	f0 91 23 04 	lds	r31, 0x0423
    39ca:	86 81       	ldd	r24, Z+6	; 0x06
    39cc:	97 81       	ldd	r25, Z+7	; 0x07
    39ce:	90 93 25 04 	sts	0x0425, r25
    39d2:	80 93 24 04 	sts	0x0424, r24

	// Only root is no valid list
	if(!ptr_book)
    39d6:	80 91 24 04 	lds	r24, 0x0424
    39da:	90 91 25 04 	lds	r25, 0x0425
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <BOOKS_show+0x3e>
    39e2:	80 c0       	rjmp	.+256    	; 0x3ae4 <BOOKS_show+0x13e>
	{
		LCD_String("NO BOOKS");
    39e4:	86 ef       	ldi	r24, 0xF6	; 246
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	aa e7       	ldi	r26, 0x7A	; 122
    39f2:	b4 e4       	ldi	r27, 0x44	; 68
    39f4:	8f a3       	std	Y+39, r24	; 0x27
    39f6:	98 a7       	std	Y+40, r25	; 0x28
    39f8:	a9 a7       	std	Y+41, r26	; 0x29
    39fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39fc:	6f a1       	ldd	r22, Y+39	; 0x27
    39fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3a00:	89 a5       	ldd	r24, Y+41	; 0x29
    3a02:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	4a ef       	ldi	r20, 0xFA	; 250
    3a0a:	54 e4       	ldi	r21, 0x44	; 68
    3a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	8b a3       	std	Y+35, r24	; 0x23
    3a16:	9c a3       	std	Y+36, r25	; 0x24
    3a18:	ad a3       	std	Y+37, r26	; 0x25
    3a1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a20:	8d a1       	ldd	r24, Y+37	; 0x25
    3a22:	9e a1       	ldd	r25, Y+38	; 0x26
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	5f e3       	ldi	r21, 0x3F	; 63
    3a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a30:	88 23       	and	r24, r24
    3a32:	2c f4       	brge	.+10     	; 0x3a3e <BOOKS_show+0x98>
		__ticks = 1;
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	9a a3       	std	Y+34, r25	; 0x22
    3a3a:	89 a3       	std	Y+33, r24	; 0x21
    3a3c:	3f c0       	rjmp	.+126    	; 0x3abc <BOOKS_show+0x116>
	else if (__tmp > 65535)
    3a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a40:	7c a1       	ldd	r23, Y+36	; 0x24
    3a42:	8d a1       	ldd	r24, Y+37	; 0x25
    3a44:	9e a1       	ldd	r25, Y+38	; 0x26
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	3f ef       	ldi	r19, 0xFF	; 255
    3a4a:	4f e7       	ldi	r20, 0x7F	; 127
    3a4c:	57 e4       	ldi	r21, 0x47	; 71
    3a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a52:	18 16       	cp	r1, r24
    3a54:	4c f5       	brge	.+82     	; 0x3aa8 <BOOKS_show+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a56:	6f a1       	ldd	r22, Y+39	; 0x27
    3a58:	78 a5       	ldd	r23, Y+40	; 0x28
    3a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e2       	ldi	r20, 0x20	; 32
    3a64:	51 e4       	ldi	r21, 0x41	; 65
    3a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	bc 01       	movw	r22, r24
    3a70:	cd 01       	movw	r24, r26
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	9a a3       	std	Y+34, r25	; 0x22
    3a7c:	89 a3       	std	Y+33, r24	; 0x21
    3a7e:	0f c0       	rjmp	.+30     	; 0x3a9e <BOOKS_show+0xf8>
    3a80:	88 ec       	ldi	r24, 0xC8	; 200
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	98 a3       	std	Y+32, r25	; 0x20
    3a86:	8f 8f       	std	Y+31, r24	; 0x1f
    3a88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a8a:	98 a1       	ldd	r25, Y+32	; 0x20
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	f1 f7       	brne	.-4      	; 0x3a8c <BOOKS_show+0xe6>
    3a90:	98 a3       	std	Y+32, r25	; 0x20
    3a92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a94:	89 a1       	ldd	r24, Y+33	; 0x21
    3a96:	9a a1       	ldd	r25, Y+34	; 0x22
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	9a a3       	std	Y+34, r25	; 0x22
    3a9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	69 f7       	brne	.-38     	; 0x3a80 <BOOKS_show+0xda>
    3aa6:	14 c0       	rjmp	.+40     	; 0x3ad0 <BOOKS_show+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa8:	6b a1       	ldd	r22, Y+35	; 0x23
    3aaa:	7c a1       	ldd	r23, Y+36	; 0x24
    3aac:	8d a1       	ldd	r24, Y+37	; 0x25
    3aae:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	9a a3       	std	Y+34, r25	; 0x22
    3aba:	89 a3       	std	Y+33, r24	; 0x21
    3abc:	89 a1       	ldd	r24, Y+33	; 0x21
    3abe:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ac2:	8d 8f       	std	Y+29, r24	; 0x1d
    3ac4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ac6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <BOOKS_show+0x122>
    3acc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ace:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		ptr_book = root_book;
    3ad0:	80 91 22 04 	lds	r24, 0x0422
    3ad4:	90 91 23 04 	lds	r25, 0x0423
    3ad8:	90 93 25 04 	sts	0x0425, r25
    3adc:	80 93 24 04 	sts	0x0424, r24
		return false;
    3ae0:	1b a6       	std	Y+43, r1	; 0x2b
    3ae2:	30 c1       	rjmp	.+608    	; 0x3d44 <BOOKS_show+0x39e>
	}

	do
	{
		LCD_vidGoTo(1, 2);
    3ae4:	81 e0       	ldi	r24, 0x01	; 1
    3ae6:	62 e0       	ldi	r22, 0x02	; 2
    3ae8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String(ptr_book -> SERIAL_NUMBER);
    3aec:	e0 91 24 04 	lds	r30, 0x0424
    3af0:	f0 91 25 04 	lds	r31, 0x0425
    3af4:	83 81       	ldd	r24, Z+3	; 0x03
    3af6:	94 81       	ldd	r25, Z+4	; 0x04
    3af8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LCD_vidGoTo(1, 1);
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	61 e0       	ldi	r22, 0x01	; 1
    3b00:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String("-");
    3b04:	8f ef       	ldi	r24, 0xFF	; 255
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LCD_String(ptr_book -> NAME_BOOK);
    3b0c:	e0 91 24 04 	lds	r30, 0x0424
    3b10:	f0 91 25 04 	lds	r31, 0x0425
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	aa e7       	ldi	r26, 0x7A	; 122
    3b22:	b4 e4       	ldi	r27, 0x44	; 68
    3b24:	89 8f       	std	Y+25, r24	; 0x19
    3b26:	9a 8f       	std	Y+26, r25	; 0x1a
    3b28:	ab 8f       	std	Y+27, r26	; 0x1b
    3b2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	4a ef       	ldi	r20, 0xFA	; 250
    3b3a:	54 e4       	ldi	r21, 0x44	; 68
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	8d 8b       	std	Y+21, r24	; 0x15
    3b46:	9e 8b       	std	Y+22, r25	; 0x16
    3b48:	af 8b       	std	Y+23, r26	; 0x17
    3b4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b50:	8f 89       	ldd	r24, Y+23	; 0x17
    3b52:	98 8d       	ldd	r25, Y+24	; 0x18
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 e8       	ldi	r20, 0x80	; 128
    3b5a:	5f e3       	ldi	r21, 0x3F	; 63
    3b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b60:	88 23       	and	r24, r24
    3b62:	2c f4       	brge	.+10     	; 0x3b6e <BOOKS_show+0x1c8>
		__ticks = 1;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	9c 8b       	std	Y+20, r25	; 0x14
    3b6a:	8b 8b       	std	Y+19, r24	; 0x13
    3b6c:	3f c0       	rjmp	.+126    	; 0x3bec <BOOKS_show+0x246>
	else if (__tmp > 65535)
    3b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b70:	7e 89       	ldd	r23, Y+22	; 0x16
    3b72:	8f 89       	ldd	r24, Y+23	; 0x17
    3b74:	98 8d       	ldd	r25, Y+24	; 0x18
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	3f ef       	ldi	r19, 0xFF	; 255
    3b7a:	4f e7       	ldi	r20, 0x7F	; 127
    3b7c:	57 e4       	ldi	r21, 0x47	; 71
    3b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b82:	18 16       	cp	r1, r24
    3b84:	4c f5       	brge	.+82     	; 0x3bd8 <BOOKS_show+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b86:	69 8d       	ldd	r22, Y+25	; 0x19
    3b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	40 e2       	ldi	r20, 0x20	; 32
    3b94:	51 e4       	ldi	r21, 0x41	; 65
    3b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	bc 01       	movw	r22, r24
    3ba0:	cd 01       	movw	r24, r26
    3ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	9c 8b       	std	Y+20, r25	; 0x14
    3bac:	8b 8b       	std	Y+19, r24	; 0x13
    3bae:	0f c0       	rjmp	.+30     	; 0x3bce <BOOKS_show+0x228>
    3bb0:	88 ec       	ldi	r24, 0xC8	; 200
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	9a 8b       	std	Y+18, r25	; 0x12
    3bb6:	89 8b       	std	Y+17, r24	; 0x11
    3bb8:	89 89       	ldd	r24, Y+17	; 0x11
    3bba:	9a 89       	ldd	r25, Y+18	; 0x12
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	f1 f7       	brne	.-4      	; 0x3bbc <BOOKS_show+0x216>
    3bc0:	9a 8b       	std	Y+18, r25	; 0x12
    3bc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	9c 8b       	std	Y+20, r25	; 0x14
    3bcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bce:	8b 89       	ldd	r24, Y+19	; 0x13
    3bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	69 f7       	brne	.-38     	; 0x3bb0 <BOOKS_show+0x20a>
    3bd6:	14 c0       	rjmp	.+40     	; 0x3c00 <BOOKS_show+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bda:	7e 89       	ldd	r23, Y+22	; 0x16
    3bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bde:	98 8d       	ldd	r25, Y+24	; 0x18
    3be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	9c 8b       	std	Y+20, r25	; 0x14
    3bea:	8b 8b       	std	Y+19, r24	; 0x13
    3bec:	8b 89       	ldd	r24, Y+19	; 0x13
    3bee:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf0:	98 8b       	std	Y+16, r25	; 0x10
    3bf2:	8f 87       	std	Y+15, r24	; 0x0f
    3bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf6:	98 89       	ldd	r25, Y+16	; 0x10
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <BOOKS_show+0x252>
    3bfc:	98 8b       	std	Y+16, r25	; 0x10
    3bfe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_vidGoTo(1, 2);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	62 e0       	ldi	r22, 0x02	; 2
    3c04:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String("Copies: ");
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	91 e0       	ldi	r25, 0x01	; 1
    3c0c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LinkedList_vidCompanion(ptr_book -> COPIES);
    3c10:	e0 91 24 04 	lds	r30, 0x0424
    3c14:	f0 91 25 04 	lds	r31, 0x0425
    3c18:	85 81       	ldd	r24, Z+5	; 0x05
    3c1a:	88 2f       	mov	r24, r24
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 0a 2a 	call	0x5414	; 0x5414 <LinkedList_vidCompanion>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	aa e7       	ldi	r26, 0x7A	; 122
    3c28:	b4 e4       	ldi	r27, 0x44	; 68
    3c2a:	8b 87       	std	Y+11, r24	; 0x0b
    3c2c:	9c 87       	std	Y+12, r25	; 0x0c
    3c2e:	ad 87       	std	Y+13, r26	; 0x0d
    3c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a ef       	ldi	r20, 0xFA	; 250
    3c40:	54 e4       	ldi	r21, 0x44	; 68
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	8f 83       	std	Y+7, r24	; 0x07
    3c4c:	98 87       	std	Y+8, r25	; 0x08
    3c4e:	a9 87       	std	Y+9, r26	; 0x09
    3c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c52:	6f 81       	ldd	r22, Y+7	; 0x07
    3c54:	78 85       	ldd	r23, Y+8	; 0x08
    3c56:	89 85       	ldd	r24, Y+9	; 0x09
    3c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	2c f4       	brge	.+10     	; 0x3c74 <BOOKS_show+0x2ce>
		__ticks = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	9e 83       	std	Y+6, r25	; 0x06
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <BOOKS_show+0x34c>
	else if (__tmp > 65535)
    3c74:	6f 81       	ldd	r22, Y+7	; 0x07
    3c76:	78 85       	ldd	r23, Y+8	; 0x08
    3c78:	89 85       	ldd	r24, Y+9	; 0x09
    3c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	4c f5       	brge	.+82     	; 0x3cde <BOOKS_show+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	cd 01       	movw	r24, r26
    3ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <BOOKS_show+0x32e>
    3cb6:	88 ec       	ldi	r24, 0xC8	; 200
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	9c 83       	std	Y+4, r25	; 0x04
    3cbc:	8b 83       	std	Y+3, r24	; 0x03
    3cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <BOOKS_show+0x31c>
    3cc6:	9c 83       	std	Y+4, r25	; 0x04
    3cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9e 83       	std	Y+6, r25	; 0x06
    3cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	69 f7       	brne	.-38     	; 0x3cb6 <BOOKS_show+0x310>
    3cdc:	14 c0       	rjmp	.+40     	; 0x3d06 <BOOKS_show+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce0:	78 85       	ldd	r23, Y+8	; 0x08
    3ce2:	89 85       	ldd	r24, Y+9	; 0x09
    3ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9e 83       	std	Y+6, r25	; 0x06
    3cf0:	8d 83       	std	Y+5, r24	; 0x05
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	9a 83       	std	Y+2, r25	; 0x02
    3cf8:	89 83       	std	Y+1, r24	; 0x01
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <BOOKS_show+0x358>
    3d02:	9a 83       	std	Y+2, r25	; 0x02
    3d04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_vidClearOnDemand(1, 32);
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	60 e2       	ldi	r22, 0x20	; 32
    3d0a:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		
		ptr_book = ptr_book -> NEXT_BOOK;
    3d0e:	e0 91 24 04 	lds	r30, 0x0424
    3d12:	f0 91 25 04 	lds	r31, 0x0425
    3d16:	86 81       	ldd	r24, Z+6	; 0x06
    3d18:	97 81       	ldd	r25, Z+7	; 0x07
    3d1a:	90 93 25 04 	sts	0x0425, r25
    3d1e:	80 93 24 04 	sts	0x0424, r24
	}
	while(ptr_book != NULL);
    3d22:	80 91 24 04 	lds	r24, 0x0424
    3d26:	90 91 25 04 	lds	r25, 0x0425
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <BOOKS_show+0x38a>
    3d2e:	da ce       	rjmp	.-588    	; 0x3ae4 <BOOKS_show+0x13e>
	
	
	ptr_book = root_book;
    3d30:	80 91 22 04 	lds	r24, 0x0422
    3d34:	90 91 23 04 	lds	r25, 0x0423
    3d38:	90 93 25 04 	sts	0x0425, r25
    3d3c:	80 93 24 04 	sts	0x0424, r24

	return true;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	8b a7       	std	Y+43, r24	; 0x2b
    3d44:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    3d46:	ab 96       	adiw	r28, 0x2b	; 43
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	cf 91       	pop	r28
    3d54:	df 91       	pop	r29
    3d56:	08 95       	ret

00003d58 <BOOKS_COPIES_DECAY>:


// Incase of borrow state
bool BOOKS_COPIES_DECAY(void)
{
    3d58:	df 93       	push	r29
    3d5a:	cf 93       	push	r28
    3d5c:	0f 92       	push	r0
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
	if(book_to_decay -> COPIES > 0)
    3d62:	e0 91 26 04 	lds	r30, 0x0426
    3d66:	f0 91 27 04 	lds	r31, 0x0427
    3d6a:	85 81       	ldd	r24, Z+5	; 0x05
    3d6c:	88 23       	and	r24, r24
    3d6e:	81 f0       	breq	.+32     	; 0x3d90 <BOOKS_COPIES_DECAY+0x38>
	{
		// Indication for success
		book_to_decay -> COPIES = book_to_decay -> COPIES - 1;
    3d70:	a0 91 26 04 	lds	r26, 0x0426
    3d74:	b0 91 27 04 	lds	r27, 0x0427
    3d78:	e0 91 26 04 	lds	r30, 0x0426
    3d7c:	f0 91 27 04 	lds	r31, 0x0427
    3d80:	85 81       	ldd	r24, Z+5	; 0x05
    3d82:	81 50       	subi	r24, 0x01	; 1
    3d84:	15 96       	adiw	r26, 0x05	; 5
    3d86:	8c 93       	st	X, r24
    3d88:	15 97       	sbiw	r26, 0x05	; 5
		return 1;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	01 c0       	rjmp	.+2      	; 0x3d92 <BOOKS_COPIES_DECAY+0x3a>
	}
	
	else
	{
		// INvalid number of copies
		return 0;
    3d90:	19 82       	std	Y+1, r1	; 0x01
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
	}

	return 0;

}
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <BOOKS_COPIES_INCREASE>:

// Incase of return state
bool BOOKS_COPIES_INCREASE(void)
{
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
	book_to_decay -> COPIES = book_to_decay -> COPIES + 1;
    3da4:	a0 91 26 04 	lds	r26, 0x0426
    3da8:	b0 91 27 04 	lds	r27, 0x0427
    3dac:	e0 91 26 04 	lds	r30, 0x0426
    3db0:	f0 91 27 04 	lds	r31, 0x0427
    3db4:	85 81       	ldd	r24, Z+5	; 0x05
    3db6:	8f 5f       	subi	r24, 0xFF	; 255
    3db8:	15 96       	adiw	r26, 0x05	; 5
    3dba:	8c 93       	st	X, r24
    3dbc:	15 97       	sbiw	r26, 0x05	; 5
	return 1;
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
}
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <CompareString>:


bool CompareString(char *str1, char* str2)
{
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    3dce:	27 97       	sbiw	r28, 0x07	; 7
    3dd0:	0f b6       	in	r0, 0x3f	; 63
    3dd2:	f8 94       	cli
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	0f be       	out	0x3f, r0	; 63
    3dd8:	cd bf       	out	0x3d, r28	; 61
    3dda:	9c 83       	std	Y+4, r25	; 0x04
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
    3dde:	7e 83       	std	Y+6, r23	; 0x06
    3de0:	6d 83       	std	Y+5, r22	; 0x05
	u8 equal = 0;
    3de2:	1a 82       	std	Y+2, r1	; 0x02
	equal = LengthString(str1, str2);
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	2d 81       	ldd	r18, Y+5	; 0x05
    3dea:	3e 81       	ldd	r19, Y+6	; 0x06
    3dec:	b9 01       	movw	r22, r18
    3dee:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <LengthString>
    3df2:	8a 83       	std	Y+2, r24	; 0x02
	if(equal)
    3df4:	8a 81       	ldd	r24, Y+2	; 0x02
    3df6:	88 23       	and	r24, r24
    3df8:	49 f1       	breq	.+82     	; 0x3e4c <CompareString+0x86>
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    3dfa:	19 82       	std	Y+1, r1	; 0x01
    3dfc:	19 c0       	rjmp	.+50     	; 0x3e30 <CompareString+0x6a>
		{
			if(str1[i] != str2[i])
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	8b 81       	ldd	r24, Y+3	; 0x03
    3e06:	9c 81       	ldd	r25, Y+4	; 0x04
    3e08:	fc 01       	movw	r30, r24
    3e0a:	e2 0f       	add	r30, r18
    3e0c:	f3 1f       	adc	r31, r19
    3e0e:	40 81       	ld	r20, Z
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	28 2f       	mov	r18, r24
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	8d 81       	ldd	r24, Y+5	; 0x05
    3e18:	9e 81       	ldd	r25, Y+6	; 0x06
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	e2 0f       	add	r30, r18
    3e1e:	f3 1f       	adc	r31, r19
    3e20:	80 81       	ld	r24, Z
    3e22:	48 17       	cp	r20, r24
    3e24:	11 f0       	breq	.+4      	; 0x3e2a <CompareString+0x64>
				return false;
    3e26:	1f 82       	std	Y+7, r1	; 0x07
    3e28:	12 c0       	rjmp	.+36     	; 0x3e4e <CompareString+0x88>
{
	u8 equal = 0;
	equal = LengthString(str1, str2);
	if(equal)
	{
		for(u8 i = 0; str1[i] != '\0'; i++)
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	8f 5f       	subi	r24, 0xFF	; 255
    3e2e:	89 83       	std	Y+1, r24	; 0x01
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	28 2f       	mov	r18, r24
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	8b 81       	ldd	r24, Y+3	; 0x03
    3e38:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	e2 0f       	add	r30, r18
    3e3e:	f3 1f       	adc	r31, r19
    3e40:	80 81       	ld	r24, Z
    3e42:	88 23       	and	r24, r24
    3e44:	e1 f6       	brne	.-72     	; 0x3dfe <CompareString+0x38>
		{
			if(str1[i] != str2[i])
				return false;
		}
		return true;
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	8f 83       	std	Y+7, r24	; 0x07
    3e4a:	01 c0       	rjmp	.+2      	; 0x3e4e <CompareString+0x88>
	}
	return false;
    3e4c:	1f 82       	std	Y+7, r1	; 0x07
    3e4e:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3e50:	27 96       	adiw	r28, 0x07	; 7
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <LengthString>:


u8 LengthString(char *str1, char *str2)
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	27 97       	sbiw	r28, 0x07	; 7
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	9c 83       	std	Y+4, r25	; 0x04
    3e78:	8b 83       	std	Y+3, r24	; 0x03
    3e7a:	7e 83       	std	Y+6, r23	; 0x06
    3e7c:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, k = 0;
    3e7e:	1a 82       	std	Y+2, r1	; 0x02
    3e80:	19 82       	std	Y+1, r1	; 0x01
    3e82:	03 c0       	rjmp	.+6      	; 0x3e8a <LengthString+0x28>
	while(str1[i] != '\0')
	{
		i++;
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	8f 5f       	subi	r24, 0xFF	; 255
    3e88:	8a 83       	std	Y+2, r24	; 0x02


u8 LengthString(char *str1, char *str2)
{
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	8b 81       	ldd	r24, Y+3	; 0x03
    3e92:	9c 81       	ldd	r25, Y+4	; 0x04
    3e94:	fc 01       	movw	r30, r24
    3e96:	e2 0f       	add	r30, r18
    3e98:	f3 1f       	adc	r31, r19
    3e9a:	80 81       	ld	r24, Z
    3e9c:	88 23       	and	r24, r24
    3e9e:	91 f7       	brne	.-28     	; 0x3e84 <LengthString+0x22>
    3ea0:	03 c0       	rjmp	.+6      	; 0x3ea8 <LengthString+0x46>
	{
		i++;
	}
	while(str2[k] != '\0')
	{
		k++;
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	8f 5f       	subi	r24, 0xFF	; 255
    3ea6:	89 83       	std	Y+1, r24	; 0x01
	u8 i = 0, k = 0;
	while(str1[i] != '\0')
	{
		i++;
	}
	while(str2[k] != '\0')
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	28 2f       	mov	r18, r24
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	e2 0f       	add	r30, r18
    3eb6:	f3 1f       	adc	r31, r19
    3eb8:	80 81       	ld	r24, Z
    3eba:	88 23       	and	r24, r24
    3ebc:	91 f7       	brne	.-28     	; 0x3ea2 <LengthString+0x40>
	{
		k++;
	}

	if(k == i)
    3ebe:	99 81       	ldd	r25, Y+1	; 0x01
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	98 17       	cp	r25, r24
    3ec4:	19 f4       	brne	.+6      	; 0x3ecc <LengthString+0x6a>
	{
		return true;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	8f 83       	std	Y+7, r24	; 0x07
    3eca:	01 c0       	rjmp	.+2      	; 0x3ece <LengthString+0x6c>
	}
	return false;
    3ecc:	1f 82       	std	Y+7, r1	; 0x07
    3ece:	8f 81       	ldd	r24, Y+7	; 0x07

}
    3ed0:	27 96       	adiw	r28, 0x07	; 7
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	cf 91       	pop	r28
    3ede:	df 91       	pop	r29
    3ee0:	08 95       	ret

00003ee2 <LinkedList_vidInitialize>:


/********************************* READY *********************************/
// Initialize members list
void LinkedList_vidInitialize(void)
{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	00 d0       	rcall	.+0      	; 0x3ee8 <LinkedList_vidInitialize+0x6>
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	// Initializing list
	root_member = malloc(sizeof(members));
    3eec:	8c e0       	ldi	r24, 0x0C	; 12
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    3ef4:	90 93 2b 04 	sts	0x042B, r25
    3ef8:	80 93 2a 04 	sts	0x042A, r24
	root_member -> NAME_STRUCT = NULL;
    3efc:	e0 91 2a 04 	lds	r30, 0x042A
    3f00:	f0 91 2b 04 	lds	r31, 0x042B
    3f04:	11 82       	std	Z+1, r1	; 0x01
    3f06:	10 82       	st	Z, r1
	root_member -> NEXT_STRUCT	= NULL;
    3f08:	e0 91 2a 04 	lds	r30, 0x042A
    3f0c:	f0 91 2b 04 	lds	r31, 0x042B
    3f10:	13 86       	std	Z+11, r1	; 0x0b
    3f12:	12 86       	std	Z+10, r1	; 0x0a
	root_member -> ID_STRUCT = NULL;
    3f14:	e0 91 2a 04 	lds	r30, 0x042A
    3f18:	f0 91 2b 04 	lds	r31, 0x042B
    3f1c:	14 82       	std	Z+4, r1	; 0x04
    3f1e:	13 82       	std	Z+3, r1	; 0x03
	root_member -> INDEX_STRUCT = 0;
    3f20:	e0 91 2a 04 	lds	r30, 0x042A
    3f24:	f0 91 2b 04 	lds	r31, 0x042B
    3f28:	12 82       	std	Z+2, r1	; 0x02
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    3f2a:	1a 82       	std	Y+2, r1	; 0x02
    3f2c:	19 82       	std	Y+1, r1	; 0x01
    3f2e:	10 c0       	rjmp	.+32     	; 0x3f50 <LinkedList_vidInitialize+0x6e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
    3f30:	20 91 2a 04 	lds	r18, 0x042A
    3f34:	30 91 2b 04 	lds	r19, 0x042B
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3c:	82 0f       	add	r24, r18
    3f3e:	93 1f       	adc	r25, r19
    3f40:	fc 01       	movw	r30, r24
    3f42:	35 96       	adiw	r30, 0x05	; 5
    3f44:	10 82       	st	Z, r1
	root_member = malloc(sizeof(members));
	root_member -> NAME_STRUCT = NULL;
	root_member -> NEXT_STRUCT	= NULL;
	root_member -> ID_STRUCT = NULL;
	root_member -> INDEX_STRUCT = 0;
	for(int i = 0; i < AVAILABLE_SHARES; i++)
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	01 96       	adiw	r24, 0x01	; 1
    3f4c:	9a 83       	std	Y+2, r25	; 0x02
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	9a 81       	ldd	r25, Y+2	; 0x02
    3f54:	85 30       	cpi	r24, 0x05	; 5
    3f56:	91 05       	cpc	r25, r1
    3f58:	5c f3       	brlt	.-42     	; 0x3f30 <LinkedList_vidInitialize+0x4e>
	{
		root_member -> MEMBER_CARD_BOOKS[i] = 0;
	}
	
	ptr_member = root_member;
    3f5a:	80 91 2a 04 	lds	r24, 0x042A
    3f5e:	90 91 2b 04 	lds	r25, 0x042B
    3f62:	90 93 29 04 	sts	0x0429, r25
    3f66:	80 93 28 04 	sts	0x0428, r24
}
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <LinkedList_vidInsertion>:


/********************************* READY *********************************/
// Insertion for values from user
bool LinkedList_vidInsertion(char *id, char *name)			// if still, you can change to u8
{
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
    3f7c:	6d 97       	sbiw	r28, 0x1d	; 29
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	9a 8f       	std	Y+26, r25	; 0x1a
    3f8a:	89 8f       	std	Y+25, r24	; 0x19
    3f8c:	7c 8f       	std	Y+28, r23	; 0x1c
    3f8e:	6b 8f       	std	Y+27, r22	; 0x1b
	int k = 0, i = 0, j = 0;
    3f90:	18 8e       	std	Y+24, r1	; 0x18
    3f92:	1f 8a       	std	Y+23, r1	; 0x17
    3f94:	1e 8a       	std	Y+22, r1	; 0x16
    3f96:	1d 8a       	std	Y+21, r1	; 0x15
    3f98:	1c 8a       	std	Y+20, r1	; 0x14
    3f9a:	1b 8a       	std	Y+19, r1	; 0x13
	
	// Pointer to check for repeated IDs
	members *tmp_detect = NULL;
    3f9c:	1a 8a       	std	Y+18, r1	; 0x12
    3f9e:	19 8a       	std	Y+17, r1	; 0x11
	tmp_detect = search(id, 0);
    3fa0:	89 8d       	ldd	r24, Y+25	; 0x19
    3fa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	0e 94 99 21 	call	0x4332	; 0x4332 <search>
    3faa:	9a 8b       	std	Y+18, r25	; 0x12
    3fac:	89 8b       	std	Y+17, r24	; 0x11
	
	// Invalid ID
	if(tmp_detect)
    3fae:	89 89       	ldd	r24, Y+17	; 0x11
    3fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	31 f0       	breq	.+12     	; 0x3fc2 <LinkedList_vidInsertion+0x4e>
	{
		LCD_String("ERROR_INSERTION!");
    3fb6:	8a e0       	ldi	r24, 0x0A	; 10
    3fb8:	91 e0       	ldi	r25, 0x01	; 1
    3fba:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		return false;
    3fbe:	1d 8e       	std	Y+29, r1	; 0x1d
    3fc0:	49 c1       	rjmp	.+658    	; 0x4254 <LinkedList_vidInsertion+0x2e0>
	}
	
	
	// Inserting sequence initialized
	ptr_member = root_member;
    3fc2:	80 91 2a 04 	lds	r24, 0x042A
    3fc6:	90 91 2b 04 	lds	r25, 0x042B
    3fca:	90 93 29 04 	sts	0x0429, r25
    3fce:	80 93 28 04 	sts	0x0428, r24
	members *tmp = malloc(sizeof(members));
    3fd2:	8c e0       	ldi	r24, 0x0C	; 12
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    3fda:	98 8b       	std	Y+16, r25	; 0x10
    3fdc:	8f 87       	std	Y+15, r24	; 0x0f
	
	// For future reference
	NoOfMembers++;
    3fde:	80 91 1f 04 	lds	r24, 0x041F
    3fe2:	8f 5f       	subi	r24, 0xFF	; 255
    3fe4:	80 93 1f 04 	sts	0x041F, r24
	INDEX_MEMBERS_GLOBAL++;
    3fe8:	80 91 21 04 	lds	r24, 0x0421
    3fec:	8f 5f       	subi	r24, 0xFF	; 255
    3fee:	80 93 21 04 	sts	0x0421, r24
    3ff2:	05 c0       	rjmp	.+10     	; 0x3ffe <LinkedList_vidInsertion+0x8a>
	

	// Get member's name length
	while(name[k] != '\0')
	{
		k++;
    3ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	98 8f       	std	Y+24, r25	; 0x18
    3ffc:	8f 8b       	std	Y+23, r24	; 0x17
	INDEX_MEMBERS_GLOBAL++;

	

	// Get member's name length
	while(name[k] != '\0')
    3ffe:	2f 89       	ldd	r18, Y+23	; 0x17
    4000:	38 8d       	ldd	r19, Y+24	; 0x18
    4002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4006:	fc 01       	movw	r30, r24
    4008:	e2 0f       	add	r30, r18
    400a:	f3 1f       	adc	r31, r19
    400c:	80 81       	ld	r24, Z
    400e:	88 23       	and	r24, r24
    4010:	89 f7       	brne	.-30     	; 0x3ff4 <LinkedList_vidInsertion+0x80>
	{
		k++;
	}
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));
    4012:	8f 89       	ldd	r24, Y+23	; 0x17
    4014:	98 8d       	ldd	r25, Y+24	; 0x18
    4016:	01 96       	adiw	r24, 0x01	; 1
    4018:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    401c:	ef 85       	ldd	r30, Y+15	; 0x0f
    401e:	f8 89       	ldd	r31, Y+16	; 0x10
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	80 83       	st	Z, r24
    4024:	05 c0       	rjmp	.+10     	; 0x4030 <LinkedList_vidInsertion+0xbc>


	// Get member's id length
	while(id[j] != '\0')
	{
		j++;
    4026:	8b 89       	ldd	r24, Y+19	; 0x13
    4028:	9c 89       	ldd	r25, Y+20	; 0x14
    402a:	01 96       	adiw	r24, 0x01	; 1
    402c:	9c 8b       	std	Y+20, r25	; 0x14
    402e:	8b 8b       	std	Y+19, r24	; 0x13
	
	tmp -> NAME_STRUCT = malloc(k+1 *sizeof(char));


	// Get member's id length
	while(id[j] != '\0')
    4030:	2b 89       	ldd	r18, Y+19	; 0x13
    4032:	3c 89       	ldd	r19, Y+20	; 0x14
    4034:	89 8d       	ldd	r24, Y+25	; 0x19
    4036:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4038:	fc 01       	movw	r30, r24
    403a:	e2 0f       	add	r30, r18
    403c:	f3 1f       	adc	r31, r19
    403e:	80 81       	ld	r24, Z
    4040:	88 23       	and	r24, r24
    4042:	89 f7       	brne	.-30     	; 0x4026 <LinkedList_vidInsertion+0xb2>
	{
		j++;
	}

	tmp -> ID_STRUCT = malloc(j+1 *sizeof(char));
    4044:	8b 89       	ldd	r24, Y+19	; 0x13
    4046:	9c 89       	ldd	r25, Y+20	; 0x14
    4048:	01 96       	adiw	r24, 0x01	; 1
    404a:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    404e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4050:	f8 89       	ldd	r31, Y+16	; 0x10
    4052:	94 83       	std	Z+4, r25	; 0x04
    4054:	83 83       	std	Z+3, r24	; 0x03


	// Insert patient details
	tmp -> NEXT_STRUCT = ptr_member -> NEXT_STRUCT;
    4056:	e0 91 28 04 	lds	r30, 0x0428
    405a:	f0 91 29 04 	lds	r31, 0x0429
    405e:	82 85       	ldd	r24, Z+10	; 0x0a
    4060:	93 85       	ldd	r25, Z+11	; 0x0b
    4062:	ef 85       	ldd	r30, Y+15	; 0x0f
    4064:	f8 89       	ldd	r31, Y+16	; 0x10
    4066:	93 87       	std	Z+11, r25	; 0x0b
    4068:	82 87       	std	Z+10, r24	; 0x0a

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
    406a:	80 91 21 04 	lds	r24, 0x0421
    406e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4070:	f8 89       	ldd	r31, Y+16	; 0x10
    4072:	82 83       	std	Z+2, r24	; 0x02
	


	for(i = 0; i < k ; i++)
    4074:	1e 8a       	std	Y+22, r1	; 0x16
    4076:	1d 8a       	std	Y+21, r1	; 0x15
    4078:	17 c0       	rjmp	.+46     	; 0x40a8 <LinkedList_vidInsertion+0x134>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
    407a:	ef 85       	ldd	r30, Y+15	; 0x0f
    407c:	f8 89       	ldd	r31, Y+16	; 0x10
    407e:	20 81       	ld	r18, Z
    4080:	31 81       	ldd	r19, Z+1	; 0x01
    4082:	8d 89       	ldd	r24, Y+21	; 0x15
    4084:	9e 89       	ldd	r25, Y+22	; 0x16
    4086:	d9 01       	movw	r26, r18
    4088:	a8 0f       	add	r26, r24
    408a:	b9 1f       	adc	r27, r25
    408c:	2d 89       	ldd	r18, Y+21	; 0x15
    408e:	3e 89       	ldd	r19, Y+22	; 0x16
    4090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4094:	fc 01       	movw	r30, r24
    4096:	e2 0f       	add	r30, r18
    4098:	f3 1f       	adc	r31, r19
    409a:	80 81       	ld	r24, Z
    409c:	8c 93       	st	X, r24

	tmp -> INDEX_STRUCT = INDEX_MEMBERS_GLOBAL;
	


	for(i = 0; i < k ; i++)
    409e:	8d 89       	ldd	r24, Y+21	; 0x15
    40a0:	9e 89       	ldd	r25, Y+22	; 0x16
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	9e 8b       	std	Y+22, r25	; 0x16
    40a6:	8d 8b       	std	Y+21, r24	; 0x15
    40a8:	2d 89       	ldd	r18, Y+21	; 0x15
    40aa:	3e 89       	ldd	r19, Y+22	; 0x16
    40ac:	8f 89       	ldd	r24, Y+23	; 0x17
    40ae:	98 8d       	ldd	r25, Y+24	; 0x18
    40b0:	28 17       	cp	r18, r24
    40b2:	39 07       	cpc	r19, r25
    40b4:	14 f3       	brlt	.-60     	; 0x407a <LinkedList_vidInsertion+0x106>
	{
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
    40b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    40b8:	f8 89       	ldd	r31, Y+16	; 0x10
    40ba:	20 81       	ld	r18, Z
    40bc:	31 81       	ldd	r19, Z+1	; 0x01
    40be:	8d 89       	ldd	r24, Y+21	; 0x15
    40c0:	9e 89       	ldd	r25, Y+22	; 0x16
    40c2:	f9 01       	movw	r30, r18
    40c4:	e8 0f       	add	r30, r24
    40c6:	f9 1f       	adc	r31, r25
    40c8:	10 82       	st	Z, r1
	

	for(i = 0; i < j ; i++)
    40ca:	1e 8a       	std	Y+22, r1	; 0x16
    40cc:	1d 8a       	std	Y+21, r1	; 0x15
    40ce:	17 c0       	rjmp	.+46     	; 0x40fe <LinkedList_vidInsertion+0x18a>
	{
		tmp ->  ID_STRUCT[i] = id[i];
    40d0:	ef 85       	ldd	r30, Y+15	; 0x0f
    40d2:	f8 89       	ldd	r31, Y+16	; 0x10
    40d4:	23 81       	ldd	r18, Z+3	; 0x03
    40d6:	34 81       	ldd	r19, Z+4	; 0x04
    40d8:	8d 89       	ldd	r24, Y+21	; 0x15
    40da:	9e 89       	ldd	r25, Y+22	; 0x16
    40dc:	d9 01       	movw	r26, r18
    40de:	a8 0f       	add	r26, r24
    40e0:	b9 1f       	adc	r27, r25
    40e2:	2d 89       	ldd	r18, Y+21	; 0x15
    40e4:	3e 89       	ldd	r19, Y+22	; 0x16
    40e6:	89 8d       	ldd	r24, Y+25	; 0x19
    40e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    40ea:	fc 01       	movw	r30, r24
    40ec:	e2 0f       	add	r30, r18
    40ee:	f3 1f       	adc	r31, r19
    40f0:	80 81       	ld	r24, Z
    40f2:	8c 93       	st	X, r24
		tmp ->  NAME_STRUCT[i] = name[i];
	}
	tmp ->  NAME_STRUCT[i] = '\0';
	

	for(i = 0; i < j ; i++)
    40f4:	8d 89       	ldd	r24, Y+21	; 0x15
    40f6:	9e 89       	ldd	r25, Y+22	; 0x16
    40f8:	01 96       	adiw	r24, 0x01	; 1
    40fa:	9e 8b       	std	Y+22, r25	; 0x16
    40fc:	8d 8b       	std	Y+21, r24	; 0x15
    40fe:	2d 89       	ldd	r18, Y+21	; 0x15
    4100:	3e 89       	ldd	r19, Y+22	; 0x16
    4102:	8b 89       	ldd	r24, Y+19	; 0x13
    4104:	9c 89       	ldd	r25, Y+20	; 0x14
    4106:	28 17       	cp	r18, r24
    4108:	39 07       	cpc	r19, r25
    410a:	14 f3       	brlt	.-60     	; 0x40d0 <LinkedList_vidInsertion+0x15c>
	{
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';
    410c:	ef 85       	ldd	r30, Y+15	; 0x0f
    410e:	f8 89       	ldd	r31, Y+16	; 0x10
    4110:	23 81       	ldd	r18, Z+3	; 0x03
    4112:	34 81       	ldd	r19, Z+4	; 0x04
    4114:	8d 89       	ldd	r24, Y+21	; 0x15
    4116:	9e 89       	ldd	r25, Y+22	; 0x16
    4118:	f9 01       	movw	r30, r18
    411a:	e8 0f       	add	r30, r24
    411c:	f9 1f       	adc	r31, r25
    411e:	10 82       	st	Z, r1


	for(i = 0; i < AVAILABLE_SHARES; i++)
    4120:	1e 8a       	std	Y+22, r1	; 0x16
    4122:	1d 8a       	std	Y+21, r1	; 0x15
    4124:	0e c0       	rjmp	.+28     	; 0x4142 <LinkedList_vidInsertion+0x1ce>
	{
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
    4126:	2d 89       	ldd	r18, Y+21	; 0x15
    4128:	3e 89       	ldd	r19, Y+22	; 0x16
    412a:	8f 85       	ldd	r24, Y+15	; 0x0f
    412c:	98 89       	ldd	r25, Y+16	; 0x10
    412e:	82 0f       	add	r24, r18
    4130:	93 1f       	adc	r25, r19
    4132:	fc 01       	movw	r30, r24
    4134:	35 96       	adiw	r30, 0x05	; 5
    4136:	10 82       	st	Z, r1
		tmp ->  ID_STRUCT[i] = id[i];
	}
	tmp ->  ID_STRUCT[i] = '\0';


	for(i = 0; i < AVAILABLE_SHARES; i++)
    4138:	8d 89       	ldd	r24, Y+21	; 0x15
    413a:	9e 89       	ldd	r25, Y+22	; 0x16
    413c:	01 96       	adiw	r24, 0x01	; 1
    413e:	9e 8b       	std	Y+22, r25	; 0x16
    4140:	8d 8b       	std	Y+21, r24	; 0x15
    4142:	8d 89       	ldd	r24, Y+21	; 0x15
    4144:	9e 89       	ldd	r25, Y+22	; 0x16
    4146:	85 30       	cpi	r24, 0x05	; 5
    4148:	91 05       	cpc	r25, r1
    414a:	6c f3       	brlt	.-38     	; 0x4126 <LinkedList_vidInsertion+0x1b2>
		tmp -> MEMBER_CARD_BOOKS[i] = 0;
	}
	

	// Update list
	ptr_member -> NEXT_STRUCT = tmp;
    414c:	e0 91 28 04 	lds	r30, 0x0428
    4150:	f0 91 29 04 	lds	r31, 0x0429
    4154:	8f 85       	ldd	r24, Y+15	; 0x0f
    4156:	98 89       	ldd	r25, Y+16	; 0x10
    4158:	93 87       	std	Z+11, r25	; 0x0b
    415a:	82 87       	std	Z+10, r24	; 0x0a

	// Indicate success
	LCD_String("MEMBER INSERTED");
    415c:	8b e1       	ldi	r24, 0x1B	; 27
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	aa ef       	ldi	r26, 0xFA	; 250
    416a:	b3 e4       	ldi	r27, 0x43	; 67
    416c:	8b 87       	std	Y+11, r24	; 0x0b
    416e:	9c 87       	std	Y+12, r25	; 0x0c
    4170:	ad 87       	std	Y+13, r26	; 0x0d
    4172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4174:	6b 85       	ldd	r22, Y+11	; 0x0b
    4176:	7c 85       	ldd	r23, Y+12	; 0x0c
    4178:	8d 85       	ldd	r24, Y+13	; 0x0d
    417a:	9e 85       	ldd	r25, Y+14	; 0x0e
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	4a ef       	ldi	r20, 0xFA	; 250
    4182:	54 e4       	ldi	r21, 0x44	; 68
    4184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	8f 83       	std	Y+7, r24	; 0x07
    418e:	98 87       	std	Y+8, r25	; 0x08
    4190:	a9 87       	std	Y+9, r26	; 0x09
    4192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4194:	6f 81       	ldd	r22, Y+7	; 0x07
    4196:	78 85       	ldd	r23, Y+8	; 0x08
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e8       	ldi	r20, 0x80	; 128
    41a2:	5f e3       	ldi	r21, 0x3F	; 63
    41a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41a8:	88 23       	and	r24, r24
    41aa:	2c f4       	brge	.+10     	; 0x41b6 <LinkedList_vidInsertion+0x242>
		__ticks = 1;
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9e 83       	std	Y+6, r25	; 0x06
    41b2:	8d 83       	std	Y+5, r24	; 0x05
    41b4:	3f c0       	rjmp	.+126    	; 0x4234 <LinkedList_vidInsertion+0x2c0>
	else if (__tmp > 65535)
    41b6:	6f 81       	ldd	r22, Y+7	; 0x07
    41b8:	78 85       	ldd	r23, Y+8	; 0x08
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	3f ef       	ldi	r19, 0xFF	; 255
    41c2:	4f e7       	ldi	r20, 0x7F	; 127
    41c4:	57 e4       	ldi	r21, 0x47	; 71
    41c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41ca:	18 16       	cp	r1, r24
    41cc:	4c f5       	brge	.+82     	; 0x4220 <LinkedList_vidInsertion+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e2       	ldi	r20, 0x20	; 32
    41dc:	51 e4       	ldi	r21, 0x41	; 65
    41de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
    41f6:	0f c0       	rjmp	.+30     	; 0x4216 <LinkedList_vidInsertion+0x2a2>
    41f8:	88 ec       	ldi	r24, 0xC8	; 200
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	9c 83       	std	Y+4, r25	; 0x04
    41fe:	8b 83       	std	Y+3, r24	; 0x03
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <LinkedList_vidInsertion+0x290>
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	9e 81       	ldd	r25, Y+6	; 0x06
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	69 f7       	brne	.-38     	; 0x41f8 <LinkedList_vidInsertion+0x284>
    421e:	14 c0       	rjmp	.+40     	; 0x4248 <LinkedList_vidInsertion+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4220:	6f 81       	ldd	r22, Y+7	; 0x07
    4222:	78 85       	ldd	r23, Y+8	; 0x08
    4224:	89 85       	ldd	r24, Y+9	; 0x09
    4226:	9a 85       	ldd	r25, Y+10	; 0x0a
    4228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	9e 81       	ldd	r25, Y+6	; 0x06
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <LinkedList_vidInsertion+0x2cc>
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_vidClearOnDemand(1, 32);
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	60 e2       	ldi	r22, 0x20	; 32
    424c:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
	return true;
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	8d 8f       	std	Y+29, r24	; 0x1d
    4254:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4256:	6d 96       	adiw	r28, 0x1d	; 29
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <LinkedList_u8DeleteEntire>:



/********************************* READY *********************************/
char LinkedList_u8DeleteEntire(void)
{
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	00 d0       	rcall	.+0      	; 0x426e <LinkedList_u8DeleteEntire+0x6>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
	// Buffer to save the previous condition of ptr
	members *last_before_stack = NULL;
    4272:	1a 82       	std	Y+2, r1	; 0x02
    4274:	19 82       	std	Y+1, r1	; 0x01

	// Checking on the next field
	if(ptr_member -> NEXT_STRUCT != NULL)
    4276:	e0 91 28 04 	lds	r30, 0x0428
    427a:	f0 91 29 04 	lds	r31, 0x0429
    427e:	82 85       	ldd	r24, Z+10	; 0x0a
    4280:	93 85       	ldd	r25, Z+11	; 0x0b
    4282:	00 97       	sbiw	r24, 0x00	; 0
    4284:	c1 f0       	breq	.+48     	; 0x42b6 <LinkedList_u8DeleteEntire+0x4e>
	{
		last_before_stack = ptr_member;
    4286:	80 91 28 04 	lds	r24, 0x0428
    428a:	90 91 29 04 	lds	r25, 0x0429
    428e:	9a 83       	std	Y+2, r25	; 0x02
    4290:	89 83       	std	Y+1, r24	; 0x01
		ptr_member = ptr_member -> NEXT_STRUCT;
    4292:	e0 91 28 04 	lds	r30, 0x0428
    4296:	f0 91 29 04 	lds	r31, 0x0429
    429a:	82 85       	ldd	r24, Z+10	; 0x0a
    429c:	93 85       	ldd	r25, Z+11	; 0x0b
    429e:	90 93 29 04 	sts	0x0429, r25
    42a2:	80 93 28 04 	sts	0x0428, r24
		LinkedList_u8DeleteEntire();
    42a6:	0e 94 34 21 	call	0x4268	; 0x4268 <LinkedList_u8DeleteEntire>
		ptr_member = last_before_stack;
    42aa:	89 81       	ldd	r24, Y+1	; 0x01
    42ac:	9a 81       	ldd	r25, Y+2	; 0x02
    42ae:	90 93 29 04 	sts	0x0429, r25
    42b2:	80 93 28 04 	sts	0x0428, r24
	}

	// free current node and return
	free(ptr_member);
    42b6:	80 91 28 04 	lds	r24, 0x0428
    42ba:	90 91 29 04 	lds	r25, 0x0429
    42be:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <free>
	NoOfMembers = 0;
    42c2:	10 92 1f 04 	sts	0x041F, r1
	return 0;
    42c6:	80 e0       	ldi	r24, 0x00	; 0
}
    42c8:	0f 90       	pop	r0
    42ca:	0f 90       	pop	r0
    42cc:	cf 91       	pop	r28
    42ce:	df 91       	pop	r29
    42d0:	08 95       	ret

000042d2 <LinkedList_vidRestart>:



void LinkedList_vidRestart (void)
{
    42d2:	df 93       	push	r29
    42d4:	cf 93       	push	r28
    42d6:	cd b7       	in	r28, 0x3d	; 61
    42d8:	de b7       	in	r29, 0x3e	; 62
	restart_vip();
    42da:	0e 94 76 21 	call	0x42ec	; 0x42ec <restart_vip>
	LinkedList_u8DeleteEntire();
    42de:	0e 94 34 21 	call	0x4268	; 0x4268 <LinkedList_u8DeleteEntire>
	LinkedList_vidInitialize();
    42e2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <LinkedList_vidInitialize>
}
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <restart_vip>:


void restart_vip(void)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
	ptr_member = root_member;
    42f4:	80 91 2a 04 	lds	r24, 0x042A
    42f8:	90 91 2b 04 	lds	r25, 0x042B
    42fc:	90 93 29 04 	sts	0x0429, r25
    4300:	80 93 28 04 	sts	0x0428, r24
}
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <LinkedList_vidSearch>:

void LinkedList_vidSearch(char *ptr, char show)
{
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	00 d0       	rcall	.+0      	; 0x4310 <LinkedList_vidSearch+0x6>
    4310:	0f 92       	push	r0
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
    4316:	9a 83       	std	Y+2, r25	; 0x02
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	6b 83       	std	Y+3, r22	; 0x03
	search(ptr, show);
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	9a 81       	ldd	r25, Y+2	; 0x02
    4320:	6b 81       	ldd	r22, Y+3	; 0x03
    4322:	0e 94 99 21 	call	0x4332	; 0x4332 <search>
}
    4326:	0f 90       	pop	r0
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	cf 91       	pop	r28
    432e:	df 91       	pop	r29
    4330:	08 95       	ret

00004332 <search>:

// To search for a member
members *search (char *id, char OLD_BOOKS)
{
    4332:	df 93       	push	r29
    4334:	cf 93       	push	r28
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	69 97       	sbiw	r28, 0x19	; 25
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	9e 8b       	std	Y+22, r25	; 0x16
    4348:	8d 8b       	std	Y+21, r24	; 0x15
    434a:	6f 8b       	std	Y+23, r22	; 0x17
	// Start after the root
	ptr_member = root_member -> NEXT_STRUCT;
    434c:	e0 91 2a 04 	lds	r30, 0x042A
    4350:	f0 91 2b 04 	lds	r31, 0x042B
    4354:	82 85       	ldd	r24, Z+10	; 0x0a
    4356:	93 85       	ldd	r25, Z+11	; 0x0b
    4358:	90 93 29 04 	sts	0x0429, r25
    435c:	80 93 28 04 	sts	0x0428, r24

	bool found = false;
    4360:	1c 8a       	std	Y+20, r1	; 0x14
	
	members *tmp = NULL;
    4362:	1b 8a       	std	Y+19, r1	; 0x13
    4364:	1a 8a       	std	Y+18, r1	; 0x12
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	99 8b       	std	Y+17, r25	; 0x11
    436c:	88 8b       	std	Y+16, r24	; 0x10
    436e:	f7 c0       	rjmp	.+494    	; 0x455e <search+0x22c>
	{
		if(CompareString(id, ptr_member -> ID_STRUCT))
    4370:	e0 91 28 04 	lds	r30, 0x0428
    4374:	f0 91 29 04 	lds	r31, 0x0429
    4378:	23 81       	ldd	r18, Z+3	; 0x03
    437a:	34 81       	ldd	r19, Z+4	; 0x04
    437c:	8d 89       	ldd	r24, Y+21	; 0x15
    437e:	9e 89       	ldd	r25, Y+22	; 0x16
    4380:	b9 01       	movw	r22, r18
    4382:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <CompareString>
    4386:	88 23       	and	r24, r24
    4388:	09 f4       	brne	.+2      	; 0x438c <search+0x5a>
    438a:	da c0       	rjmp	.+436    	; 0x4540 <search+0x20e>
		{
			// Write Member Name on LCD
			LCD_vidClearOnDemand(1, 32);
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	60 e2       	ldi	r22, 0x20	; 32
    4390:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
			LCD_String("NAME: ");
    4394:	8b e2       	ldi	r24, 0x2B	; 43
    4396:	91 e0       	ldi	r25, 0x01	; 1
    4398:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_String(ptr_member -> NAME_STRUCT);
    439c:	e0 91 28 04 	lds	r30, 0x0428
    43a0:	f0 91 29 04 	lds	r31, 0x0429
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>

			// Write Member ID on LCD
			LCD_vidGoTo(1, 2);
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	62 e0       	ldi	r22, 0x02	; 2
    43b0:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			LCD_String("ID: ");
    43b4:	82 e3       	ldi	r24, 0x32	; 50
    43b6:	91 e0       	ldi	r25, 0x01	; 1
    43b8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
			LCD_String(ptr_member -> ID_STRUCT);
    43bc:	e0 91 28 04 	lds	r30, 0x0428
    43c0:	f0 91 29 04 	lds	r31, 0x0429
    43c4:	83 81       	ldd	r24, Z+3	; 0x03
    43c6:	94 81       	ldd	r25, Z+4	; 0x04
    43c8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	aa ef       	ldi	r26, 0xFA	; 250
    43d2:	b4 e4       	ldi	r27, 0x44	; 68
    43d4:	8b 87       	std	Y+11, r24	; 0x0b
    43d6:	9c 87       	std	Y+12, r25	; 0x0c
    43d8:	ad 87       	std	Y+13, r26	; 0x0d
    43da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43de:	7c 85       	ldd	r23, Y+12	; 0x0c
    43e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	4a ef       	ldi	r20, 0xFA	; 250
    43ea:	54 e4       	ldi	r21, 0x44	; 68
    43ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f0:	dc 01       	movw	r26, r24
    43f2:	cb 01       	movw	r24, r22
    43f4:	8f 83       	std	Y+7, r24	; 0x07
    43f6:	98 87       	std	Y+8, r25	; 0x08
    43f8:	a9 87       	std	Y+9, r26	; 0x09
    43fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43fc:	6f 81       	ldd	r22, Y+7	; 0x07
    43fe:	78 85       	ldd	r23, Y+8	; 0x08
    4400:	89 85       	ldd	r24, Y+9	; 0x09
    4402:	9a 85       	ldd	r25, Y+10	; 0x0a
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e8       	ldi	r20, 0x80	; 128
    440a:	5f e3       	ldi	r21, 0x3F	; 63
    440c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4410:	88 23       	and	r24, r24
    4412:	2c f4       	brge	.+10     	; 0x441e <search+0xec>
		__ticks = 1;
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	9e 83       	std	Y+6, r25	; 0x06
    441a:	8d 83       	std	Y+5, r24	; 0x05
    441c:	3f c0       	rjmp	.+126    	; 0x449c <search+0x16a>
	else if (__tmp > 65535)
    441e:	6f 81       	ldd	r22, Y+7	; 0x07
    4420:	78 85       	ldd	r23, Y+8	; 0x08
    4422:	89 85       	ldd	r24, Y+9	; 0x09
    4424:	9a 85       	ldd	r25, Y+10	; 0x0a
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	3f ef       	ldi	r19, 0xFF	; 255
    442a:	4f e7       	ldi	r20, 0x7F	; 127
    442c:	57 e4       	ldi	r21, 0x47	; 71
    442e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4432:	18 16       	cp	r1, r24
    4434:	4c f5       	brge	.+82     	; 0x4488 <search+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4436:	6b 85       	ldd	r22, Y+11	; 0x0b
    4438:	7c 85       	ldd	r23, Y+12	; 0x0c
    443a:	8d 85       	ldd	r24, Y+13	; 0x0d
    443c:	9e 85       	ldd	r25, Y+14	; 0x0e
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	40 e2       	ldi	r20, 0x20	; 32
    4444:	51 e4       	ldi	r21, 0x41	; 65
    4446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	bc 01       	movw	r22, r24
    4450:	cd 01       	movw	r24, r26
    4452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4456:	dc 01       	movw	r26, r24
    4458:	cb 01       	movw	r24, r22
    445a:	9e 83       	std	Y+6, r25	; 0x06
    445c:	8d 83       	std	Y+5, r24	; 0x05
    445e:	0f c0       	rjmp	.+30     	; 0x447e <search+0x14c>
    4460:	88 ec       	ldi	r24, 0xC8	; 200
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	9c 83       	std	Y+4, r25	; 0x04
    4466:	8b 83       	std	Y+3, r24	; 0x03
    4468:	8b 81       	ldd	r24, Y+3	; 0x03
    446a:	9c 81       	ldd	r25, Y+4	; 0x04
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	f1 f7       	brne	.-4      	; 0x446c <search+0x13a>
    4470:	9c 83       	std	Y+4, r25	; 0x04
    4472:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4474:	8d 81       	ldd	r24, Y+5	; 0x05
    4476:	9e 81       	ldd	r25, Y+6	; 0x06
    4478:	01 97       	sbiw	r24, 0x01	; 1
    447a:	9e 83       	std	Y+6, r25	; 0x06
    447c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    447e:	8d 81       	ldd	r24, Y+5	; 0x05
    4480:	9e 81       	ldd	r25, Y+6	; 0x06
    4482:	00 97       	sbiw	r24, 0x00	; 0
    4484:	69 f7       	brne	.-38     	; 0x4460 <search+0x12e>
    4486:	14 c0       	rjmp	.+40     	; 0x44b0 <search+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4488:	6f 81       	ldd	r22, Y+7	; 0x07
    448a:	78 85       	ldd	r23, Y+8	; 0x08
    448c:	89 85       	ldd	r24, Y+9	; 0x09
    448e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	9e 83       	std	Y+6, r25	; 0x06
    449a:	8d 83       	std	Y+5, r24	; 0x05
    449c:	8d 81       	ldd	r24, Y+5	; 0x05
    449e:	9e 81       	ldd	r25, Y+6	; 0x06
    44a0:	9a 83       	std	Y+2, r25	; 0x02
    44a2:	89 83       	std	Y+1, r24	; 0x01
    44a4:	89 81       	ldd	r24, Y+1	; 0x01
    44a6:	9a 81       	ldd	r25, Y+2	; 0x02
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <search+0x176>
    44ac:	9a 83       	std	Y+2, r25	; 0x02
    44ae:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);

			// Write Member BOOK's on LCD
			LCD_vidClearOnDemand(1, 32);
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	60 e2       	ldi	r22, 0x20	; 32
    44b4:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

			// Don't show the books
			if(!OLD_BOOKS);
    44b8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ba:	88 23       	and	r24, r24
    44bc:	a1 f1       	breq	.+104    	; 0x4526 <search+0x1f4>
			else
			{
				LCD_vidGoTo(1, 1);
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	61 e0       	ldi	r22, 0x01	; 1
    44c2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
				LCD_String("Borrowed BOOKS:");
    44c6:	87 e3       	ldi	r24, 0x37	; 55
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    44ce:	1f 86       	std	Y+15, r1	; 0x0f
    44d0:	27 c0       	rjmp	.+78     	; 0x4520 <search+0x1ee>
				{
					LCD_vidGoTo(i + 1, 2);
    44d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    44d4:	8f 5f       	subi	r24, 0xFF	; 255
    44d6:	62 e0       	ldi	r22, 0x02	; 2
    44d8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>

					if(!ptr_member -> MEMBER_CARD_BOOKS[i]);
    44dc:	20 91 28 04 	lds	r18, 0x0428
    44e0:	30 91 29 04 	lds	r19, 0x0429
    44e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44e6:	88 2f       	mov	r24, r24
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	82 0f       	add	r24, r18
    44ec:	93 1f       	adc	r25, r19
    44ee:	fc 01       	movw	r30, r24
    44f0:	35 96       	adiw	r30, 0x05	; 5
    44f2:	80 81       	ld	r24, Z
    44f4:	88 23       	and	r24, r24
    44f6:	89 f0       	breq	.+34     	; 0x451a <search+0x1e8>
					else
					{
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
    44f8:	20 91 28 04 	lds	r18, 0x0428
    44fc:	30 91 29 04 	lds	r19, 0x0429
    4500:	8f 85       	ldd	r24, Y+15	; 0x0f
    4502:	88 2f       	mov	r24, r24
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	82 0f       	add	r24, r18
    4508:	93 1f       	adc	r25, r19
    450a:	fc 01       	movw	r30, r24
    450c:	35 96       	adiw	r30, 0x05	; 5
    450e:	20 81       	ld	r18, Z
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	62 2f       	mov	r22, r18
    4516:	0e 94 41 1a 	call	0x3482	; 0x3482 <BOOKS_search>
			if(!OLD_BOOKS);
			else
			{
				LCD_vidGoTo(1, 1);
				LCD_String("Borrowed BOOKS:");
				for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    451a:	8f 85       	ldd	r24, Y+15	; 0x0f
    451c:	8f 5f       	subi	r24, 0xFF	; 255
    451e:	8f 87       	std	Y+15, r24	; 0x0f
    4520:	8f 85       	ldd	r24, Y+15	; 0x0f
    4522:	85 30       	cpi	r24, 0x05	; 5
    4524:	b0 f2       	brcs	.-84     	; 0x44d2 <search+0x1a0>
						BOOKS_search(0, ptr_member -> MEMBER_CARD_BOOKS[i]);
					}
				}
			}

			LCD_vidClearOnDemand(1, 32);
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	60 e2       	ldi	r22, 0x20	; 32
    452a:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
			found = true;
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	8c 8b       	std	Y+20, r24	; 0x14
			return  ptr_member;
    4532:	80 91 28 04 	lds	r24, 0x0428
    4536:	90 91 29 04 	lds	r25, 0x0429
    453a:	99 8f       	std	Y+25, r25	; 0x19
    453c:	88 8f       	std	Y+24, r24	; 0x18
    453e:	37 c0       	rjmp	.+110    	; 0x45ae <search+0x27c>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
    4540:	e0 91 28 04 	lds	r30, 0x0428
    4544:	f0 91 29 04 	lds	r31, 0x0429
    4548:	82 85       	ldd	r24, Z+10	; 0x0a
    454a:	93 85       	ldd	r25, Z+11	; 0x0b
    454c:	90 93 29 04 	sts	0x0429, r25
    4550:	80 93 28 04 	sts	0x0428, r24
	
	members *tmp = NULL;
	

	// Iterating over the linked list after root node
	for(int i = 1; i <= NoOfMembers; i++)
    4554:	88 89       	ldd	r24, Y+16	; 0x10
    4556:	99 89       	ldd	r25, Y+17	; 0x11
    4558:	01 96       	adiw	r24, 0x01	; 1
    455a:	99 8b       	std	Y+17, r25	; 0x11
    455c:	88 8b       	std	Y+16, r24	; 0x10
    455e:	80 91 1f 04 	lds	r24, 0x041F
    4562:	28 2f       	mov	r18, r24
    4564:	33 27       	eor	r19, r19
    4566:	27 fd       	sbrc	r18, 7
    4568:	30 95       	com	r19
    456a:	88 89       	ldd	r24, Y+16	; 0x10
    456c:	99 89       	ldd	r25, Y+17	; 0x11
    456e:	28 17       	cp	r18, r24
    4570:	39 07       	cpc	r19, r25
    4572:	0c f0       	brlt	.+2      	; 0x4576 <search+0x244>
    4574:	fd ce       	rjmp	.-518    	; 0x4370 <search+0x3e>

		}
		ptr_member = ptr_member -> NEXT_STRUCT;
	}

	if(!found)
    4576:	8c 89       	ldd	r24, Y+20	; 0x14
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	89 27       	eor	r24, r25
    457c:	88 23       	and	r24, r24
    457e:	59 f0       	breq	.+22     	; 0x4596 <search+0x264>
	{
		ptr_member = root_member;
    4580:	80 91 2a 04 	lds	r24, 0x042A
    4584:	90 91 2b 04 	lds	r25, 0x042B
    4588:	90 93 29 04 	sts	0x0429, r25
    458c:	80 93 28 04 	sts	0x0428, r24
		return NULL;
    4590:	19 8e       	std	Y+25, r1	; 0x19
    4592:	18 8e       	std	Y+24, r1	; 0x18
    4594:	0c c0       	rjmp	.+24     	; 0x45ae <search+0x27c>
	}

	ptr_member = root_member;
    4596:	80 91 2a 04 	lds	r24, 0x042A
    459a:	90 91 2b 04 	lds	r25, 0x042B
    459e:	90 93 29 04 	sts	0x0429, r25
    45a2:	80 93 28 04 	sts	0x0428, r24
	return tmp;
    45a6:	8a 89       	ldd	r24, Y+18	; 0x12
    45a8:	9b 89       	ldd	r25, Y+19	; 0x13
    45aa:	99 8f       	std	Y+25, r25	; 0x19
    45ac:	88 8f       	std	Y+24, r24	; 0x18
    45ae:	88 8d       	ldd	r24, Y+24	; 0x18
    45b0:	99 8d       	ldd	r25, Y+25	; 0x19
}
    45b2:	69 96       	adiw	r28, 0x19	; 25
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <Borrow_vid>:


// Borrow from books
void Borrow_vid(char *id, char *serial)
{
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	cd b7       	in	r28, 0x3d	; 61
    45ca:	de b7       	in	r29, 0x3e	; 62
    45cc:	c2 54       	subi	r28, 0x42	; 66
    45ce:	d0 40       	sbci	r29, 0x00	; 0
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	f8 94       	cli
    45d4:	de bf       	out	0x3e, r29	; 62
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	fe 01       	movw	r30, r28
    45dc:	ff 96       	adiw	r30, 0x3f	; 63
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	80 83       	st	Z, r24
    45e2:	fe 01       	movw	r30, r28
    45e4:	ef 5b       	subi	r30, 0xBF	; 191
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	71 83       	std	Z+1, r23	; 0x01
    45ea:	60 83       	st	Z, r22
	u8 B_flag = 0;
    45ec:	1e ae       	std	Y+62, r1	; 0x3e
	u8 index = 0;
    45ee:	1d ae       	std	Y+61, r1	; 0x3d
	bool valid_copies = false;
    45f0:	1c ae       	std	Y+60, r1	; 0x3c
	
	// Search for member and don't show the old books
	members *tmp = search(id, 0);
    45f2:	fe 01       	movw	r30, r28
    45f4:	ff 96       	adiw	r30, 0x3f	; 63
    45f6:	80 81       	ld	r24, Z
    45f8:	91 81       	ldd	r25, Z+1	; 0x01
    45fa:	60 e0       	ldi	r22, 0x00	; 0
    45fc:	0e 94 99 21 	call	0x4332	; 0x4332 <search>
    4600:	9b af       	std	Y+59, r25	; 0x3b
    4602:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via serial
	index = BOOKS_search(serial, 0);
    4604:	fe 01       	movw	r30, r28
    4606:	ef 5b       	subi	r30, 0xBF	; 191
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	80 81       	ld	r24, Z
    460c:	91 81       	ldd	r25, Z+1	; 0x01
    460e:	60 e0       	ldi	r22, 0x00	; 0
    4610:	0e 94 41 1a 	call	0x3482	; 0x3482 <BOOKS_search>
    4614:	8d af       	std	Y+61, r24	; 0x3d
	
	if(!tmp)
    4616:	8a ad       	ldd	r24, Y+58	; 0x3a
    4618:	9b ad       	ldd	r25, Y+59	; 0x3b
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	29 f4       	brne	.+10     	; 0x4628 <Borrow_vid+0x64>
	{
		// Invalid ID
		LCD_String("ERROR_ID!");
    461e:	87 e4       	ldi	r24, 0x47	; 71
    4620:	91 e0       	ldi	r25, 0x01	; 1
    4622:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4626:	26 c2       	rjmp	.+1100   	; 0x4a74 <Borrow_vid+0x4b0>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    4628:	8d ad       	ldd	r24, Y+61	; 0x3d
    462a:	88 23       	and	r24, r24
    462c:	09 f4       	brne	.+2      	; 0x4630 <Borrow_vid+0x6c>
    462e:	2a c1       	rjmp	.+596    	; 0x4884 <Borrow_vid+0x2c0>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    4630:	19 ae       	std	Y+57, r1	; 0x39
    4632:	23 c1       	rjmp	.+582    	; 0x487a <Borrow_vid+0x2b6>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == 0)
    4634:	89 ad       	ldd	r24, Y+57	; 0x39
    4636:	28 2f       	mov	r18, r24
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	8a ad       	ldd	r24, Y+58	; 0x3a
    463c:	9b ad       	ldd	r25, Y+59	; 0x3b
    463e:	82 0f       	add	r24, r18
    4640:	93 1f       	adc	r25, r19
    4642:	fc 01       	movw	r30, r24
    4644:	35 96       	adiw	r30, 0x05	; 5
    4646:	80 81       	ld	r24, Z
    4648:	88 23       	and	r24, r24
    464a:	09 f0       	breq	.+2      	; 0x464e <Borrow_vid+0x8a>
    464c:	13 c1       	rjmp	.+550    	; 0x4874 <Borrow_vid+0x2b0>
				{		
					valid_copies = BOOKS_COPIES_DECAY();
    464e:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <BOOKS_COPIES_DECAY>
    4652:	8c af       	std	Y+60, r24	; 0x3c
					if(valid_copies)
    4654:	8c ad       	ldd	r24, Y+60	; 0x3c
    4656:	88 23       	and	r24, r24
    4658:	09 f4       	brne	.+2      	; 0x465c <Borrow_vid+0x98>
    465a:	92 c0       	rjmp	.+292    	; 0x4780 <Borrow_vid+0x1bc>
					{
						// Borrow and submit in MEMBER_CARD_BOOKS[] with Book index in BOOKS list
						tmp -> MEMBER_CARD_BOOKS[j] = index;
    465c:	89 ad       	ldd	r24, Y+57	; 0x39
    465e:	28 2f       	mov	r18, r24
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	8a ad       	ldd	r24, Y+58	; 0x3a
    4664:	9b ad       	ldd	r25, Y+59	; 0x3b
    4666:	82 0f       	add	r24, r18
    4668:	93 1f       	adc	r25, r19
    466a:	fc 01       	movw	r30, r24
    466c:	35 96       	adiw	r30, 0x05	; 5
    466e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4670:	80 83       	st	Z, r24

						LCD_String("BORROW -> SUCCESS:");
    4672:	81 e5       	ldi	r24, 0x51	; 81
    4674:	91 e0       	ldi	r25, 0x01	; 1
    4676:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
						LCD_vidGoTo(1, 2);
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	62 e0       	ldi	r22, 0x02	; 2
    467e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
						LCD_String("Copies - 1.");
    4682:	84 e6       	ldi	r24, 0x64	; 100
    4684:	91 e0       	ldi	r25, 0x01	; 1
    4686:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	aa ef       	ldi	r26, 0xFA	; 250
    4690:	b4 e4       	ldi	r27, 0x44	; 68
    4692:	8d ab       	std	Y+53, r24	; 0x35
    4694:	9e ab       	std	Y+54, r25	; 0x36
    4696:	af ab       	std	Y+55, r26	; 0x37
    4698:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469a:	6d a9       	ldd	r22, Y+53	; 0x35
    469c:	7e a9       	ldd	r23, Y+54	; 0x36
    469e:	8f a9       	ldd	r24, Y+55	; 0x37
    46a0:	98 ad       	ldd	r25, Y+56	; 0x38
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	4a ef       	ldi	r20, 0xFA	; 250
    46a8:	54 e4       	ldi	r21, 0x44	; 68
    46aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	89 ab       	std	Y+49, r24	; 0x31
    46b4:	9a ab       	std	Y+50, r25	; 0x32
    46b6:	ab ab       	std	Y+51, r26	; 0x33
    46b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46ba:	69 a9       	ldd	r22, Y+49	; 0x31
    46bc:	7a a9       	ldd	r23, Y+50	; 0x32
    46be:	8b a9       	ldd	r24, Y+51	; 0x33
    46c0:	9c a9       	ldd	r25, Y+52	; 0x34
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	40 e8       	ldi	r20, 0x80	; 128
    46c8:	5f e3       	ldi	r21, 0x3F	; 63
    46ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ce:	88 23       	and	r24, r24
    46d0:	2c f4       	brge	.+10     	; 0x46dc <Borrow_vid+0x118>
		__ticks = 1;
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	98 ab       	std	Y+48, r25	; 0x30
    46d8:	8f a7       	std	Y+47, r24	; 0x2f
    46da:	3f c0       	rjmp	.+126    	; 0x475a <Borrow_vid+0x196>
	else if (__tmp > 65535)
    46dc:	69 a9       	ldd	r22, Y+49	; 0x31
    46de:	7a a9       	ldd	r23, Y+50	; 0x32
    46e0:	8b a9       	ldd	r24, Y+51	; 0x33
    46e2:	9c a9       	ldd	r25, Y+52	; 0x34
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	3f ef       	ldi	r19, 0xFF	; 255
    46e8:	4f e7       	ldi	r20, 0x7F	; 127
    46ea:	57 e4       	ldi	r21, 0x47	; 71
    46ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f0:	18 16       	cp	r1, r24
    46f2:	4c f5       	brge	.+82     	; 0x4746 <Borrow_vid+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f4:	6d a9       	ldd	r22, Y+53	; 0x35
    46f6:	7e a9       	ldd	r23, Y+54	; 0x36
    46f8:	8f a9       	ldd	r24, Y+55	; 0x37
    46fa:	98 ad       	ldd	r25, Y+56	; 0x38
    46fc:	20 e0       	ldi	r18, 0x00	; 0
    46fe:	30 e0       	ldi	r19, 0x00	; 0
    4700:	40 e2       	ldi	r20, 0x20	; 32
    4702:	51 e4       	ldi	r21, 0x41	; 65
    4704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4708:	dc 01       	movw	r26, r24
    470a:	cb 01       	movw	r24, r22
    470c:	bc 01       	movw	r22, r24
    470e:	cd 01       	movw	r24, r26
    4710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	98 ab       	std	Y+48, r25	; 0x30
    471a:	8f a7       	std	Y+47, r24	; 0x2f
    471c:	0f c0       	rjmp	.+30     	; 0x473c <Borrow_vid+0x178>
    471e:	88 ec       	ldi	r24, 0xC8	; 200
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	9e a7       	std	Y+46, r25	; 0x2e
    4724:	8d a7       	std	Y+45, r24	; 0x2d
    4726:	8d a5       	ldd	r24, Y+45	; 0x2d
    4728:	9e a5       	ldd	r25, Y+46	; 0x2e
    472a:	01 97       	sbiw	r24, 0x01	; 1
    472c:	f1 f7       	brne	.-4      	; 0x472a <Borrow_vid+0x166>
    472e:	9e a7       	std	Y+46, r25	; 0x2e
    4730:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4732:	8f a5       	ldd	r24, Y+47	; 0x2f
    4734:	98 a9       	ldd	r25, Y+48	; 0x30
    4736:	01 97       	sbiw	r24, 0x01	; 1
    4738:	98 ab       	std	Y+48, r25	; 0x30
    473a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473c:	8f a5       	ldd	r24, Y+47	; 0x2f
    473e:	98 a9       	ldd	r25, Y+48	; 0x30
    4740:	00 97       	sbiw	r24, 0x00	; 0
    4742:	69 f7       	brne	.-38     	; 0x471e <Borrow_vid+0x15a>
    4744:	14 c0       	rjmp	.+40     	; 0x476e <Borrow_vid+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4746:	69 a9       	ldd	r22, Y+49	; 0x31
    4748:	7a a9       	ldd	r23, Y+50	; 0x32
    474a:	8b a9       	ldd	r24, Y+51	; 0x33
    474c:	9c a9       	ldd	r25, Y+52	; 0x34
    474e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	98 ab       	std	Y+48, r25	; 0x30
    4758:	8f a7       	std	Y+47, r24	; 0x2f
    475a:	8f a5       	ldd	r24, Y+47	; 0x2f
    475c:	98 a9       	ldd	r25, Y+48	; 0x30
    475e:	9c a7       	std	Y+44, r25	; 0x2c
    4760:	8b a7       	std	Y+43, r24	; 0x2b
    4762:	8b a5       	ldd	r24, Y+43	; 0x2b
    4764:	9c a5       	ldd	r25, Y+44	; 0x2c
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <Borrow_vid+0x1a2>
    476a:	9c a7       	std	Y+44, r25	; 0x2c
    476c:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    476e:	81 e0       	ldi	r24, 0x01	; 1
    4770:	60 e2       	ldi	r22, 0x20	; 32
    4772:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

						B_flag = 1;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	8e af       	std	Y+62, r24	; 0x3e
						j = AVAILABLE_SHARES;					
    477a:	85 e0       	ldi	r24, 0x05	; 5
    477c:	89 af       	std	Y+57, r24	; 0x39
    477e:	7a c0       	rjmp	.+244    	; 0x4874 <Borrow_vid+0x2b0>
					}
					else
					{
						LCD_String("Out of copies!");
    4780:	80 e7       	ldi	r24, 0x70	; 112
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	aa ef       	ldi	r26, 0xFA	; 250
    478e:	b4 e4       	ldi	r27, 0x44	; 68
    4790:	8f a3       	std	Y+39, r24	; 0x27
    4792:	98 a7       	std	Y+40, r25	; 0x28
    4794:	a9 a7       	std	Y+41, r26	; 0x29
    4796:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4798:	6f a1       	ldd	r22, Y+39	; 0x27
    479a:	78 a5       	ldd	r23, Y+40	; 0x28
    479c:	89 a5       	ldd	r24, Y+41	; 0x29
    479e:	9a a5       	ldd	r25, Y+42	; 0x2a
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	4a ef       	ldi	r20, 0xFA	; 250
    47a6:	54 e4       	ldi	r21, 0x44	; 68
    47a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	8b a3       	std	Y+35, r24	; 0x23
    47b2:	9c a3       	std	Y+36, r25	; 0x24
    47b4:	ad a3       	std	Y+37, r26	; 0x25
    47b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47b8:	6b a1       	ldd	r22, Y+35	; 0x23
    47ba:	7c a1       	ldd	r23, Y+36	; 0x24
    47bc:	8d a1       	ldd	r24, Y+37	; 0x25
    47be:	9e a1       	ldd	r25, Y+38	; 0x26
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	2c f4       	brge	.+10     	; 0x47da <Borrow_vid+0x216>
		__ticks = 1;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	9a a3       	std	Y+34, r25	; 0x22
    47d6:	89 a3       	std	Y+33, r24	; 0x21
    47d8:	3f c0       	rjmp	.+126    	; 0x4858 <Borrow_vid+0x294>
	else if (__tmp > 65535)
    47da:	6b a1       	ldd	r22, Y+35	; 0x23
    47dc:	7c a1       	ldd	r23, Y+36	; 0x24
    47de:	8d a1       	ldd	r24, Y+37	; 0x25
    47e0:	9e a1       	ldd	r25, Y+38	; 0x26
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	4f e7       	ldi	r20, 0x7F	; 127
    47e8:	57 e4       	ldi	r21, 0x47	; 71
    47ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47ee:	18 16       	cp	r1, r24
    47f0:	4c f5       	brge	.+82     	; 0x4844 <Borrow_vid+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	6f a1       	ldd	r22, Y+39	; 0x27
    47f4:	78 a5       	ldd	r23, Y+40	; 0x28
    47f6:	89 a5       	ldd	r24, Y+41	; 0x29
    47f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    47fa:	20 e0       	ldi	r18, 0x00	; 0
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	40 e2       	ldi	r20, 0x20	; 32
    4800:	51 e4       	ldi	r21, 0x41	; 65
    4802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	bc 01       	movw	r22, r24
    480c:	cd 01       	movw	r24, r26
    480e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4812:	dc 01       	movw	r26, r24
    4814:	cb 01       	movw	r24, r22
    4816:	9a a3       	std	Y+34, r25	; 0x22
    4818:	89 a3       	std	Y+33, r24	; 0x21
    481a:	0f c0       	rjmp	.+30     	; 0x483a <Borrow_vid+0x276>
    481c:	88 ec       	ldi	r24, 0xC8	; 200
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	98 a3       	std	Y+32, r25	; 0x20
    4822:	8f 8f       	std	Y+31, r24	; 0x1f
    4824:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4826:	98 a1       	ldd	r25, Y+32	; 0x20
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <Borrow_vid+0x264>
    482c:	98 a3       	std	Y+32, r25	; 0x20
    482e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4830:	89 a1       	ldd	r24, Y+33	; 0x21
    4832:	9a a1       	ldd	r25, Y+34	; 0x22
    4834:	01 97       	sbiw	r24, 0x01	; 1
    4836:	9a a3       	std	Y+34, r25	; 0x22
    4838:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483a:	89 a1       	ldd	r24, Y+33	; 0x21
    483c:	9a a1       	ldd	r25, Y+34	; 0x22
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	69 f7       	brne	.-38     	; 0x481c <Borrow_vid+0x258>
    4842:	14 c0       	rjmp	.+40     	; 0x486c <Borrow_vid+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4844:	6b a1       	ldd	r22, Y+35	; 0x23
    4846:	7c a1       	ldd	r23, Y+36	; 0x24
    4848:	8d a1       	ldd	r24, Y+37	; 0x25
    484a:	9e a1       	ldd	r25, Y+38	; 0x26
    484c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	9a a3       	std	Y+34, r25	; 0x22
    4856:	89 a3       	std	Y+33, r24	; 0x21
    4858:	89 a1       	ldd	r24, Y+33	; 0x21
    485a:	9a a1       	ldd	r25, Y+34	; 0x22
    485c:	9e 8f       	std	Y+30, r25	; 0x1e
    485e:	8d 8f       	std	Y+29, r24	; 0x1d
    4860:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4862:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <Borrow_vid+0x2a0>
    4868:	9e 8f       	std	Y+30, r25	; 0x1e
    486a:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2000);
						LCD_vidClearOnDemand(1, 32);
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	60 e2       	ldi	r22, 0x20	; 32
    4870:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    4874:	89 ad       	ldd	r24, Y+57	; 0x39
    4876:	8f 5f       	subi	r24, 0xFF	; 255
    4878:	89 af       	std	Y+57, r24	; 0x39
    487a:	89 ad       	ldd	r24, Y+57	; 0x39
    487c:	85 30       	cpi	r24, 0x05	; 5
    487e:	08 f4       	brcc	.+2      	; 0x4882 <Borrow_vid+0x2be>
    4880:	d9 ce       	rjmp	.-590    	; 0x4634 <Borrow_vid+0x70>
    4882:	7a c0       	rjmp	.+244    	; 0x4978 <Borrow_vid+0x3b4>
				else;
			}
		}
		else
		{
			LCD_String("Invalid ISBN");
    4884:	8f e7       	ldi	r24, 0x7F	; 127
    4886:	91 e0       	ldi	r25, 0x01	; 1
    4888:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	aa ef       	ldi	r26, 0xFA	; 250
    4892:	b4 e4       	ldi	r27, 0x44	; 68
    4894:	89 8f       	std	Y+25, r24	; 0x19
    4896:	9a 8f       	std	Y+26, r25	; 0x1a
    4898:	ab 8f       	std	Y+27, r26	; 0x1b
    489a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    489c:	69 8d       	ldd	r22, Y+25	; 0x19
    489e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	4a ef       	ldi	r20, 0xFA	; 250
    48aa:	54 e4       	ldi	r21, 0x44	; 68
    48ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	8d 8b       	std	Y+21, r24	; 0x15
    48b6:	9e 8b       	std	Y+22, r25	; 0x16
    48b8:	af 8b       	std	Y+23, r26	; 0x17
    48ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48bc:	6d 89       	ldd	r22, Y+21	; 0x15
    48be:	7e 89       	ldd	r23, Y+22	; 0x16
    48c0:	8f 89       	ldd	r24, Y+23	; 0x17
    48c2:	98 8d       	ldd	r25, Y+24	; 0x18
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	40 e8       	ldi	r20, 0x80	; 128
    48ca:	5f e3       	ldi	r21, 0x3F	; 63
    48cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d0:	88 23       	and	r24, r24
    48d2:	2c f4       	brge	.+10     	; 0x48de <Borrow_vid+0x31a>
		__ticks = 1;
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	9c 8b       	std	Y+20, r25	; 0x14
    48da:	8b 8b       	std	Y+19, r24	; 0x13
    48dc:	3f c0       	rjmp	.+126    	; 0x495c <Borrow_vid+0x398>
	else if (__tmp > 65535)
    48de:	6d 89       	ldd	r22, Y+21	; 0x15
    48e0:	7e 89       	ldd	r23, Y+22	; 0x16
    48e2:	8f 89       	ldd	r24, Y+23	; 0x17
    48e4:	98 8d       	ldd	r25, Y+24	; 0x18
    48e6:	20 e0       	ldi	r18, 0x00	; 0
    48e8:	3f ef       	ldi	r19, 0xFF	; 255
    48ea:	4f e7       	ldi	r20, 0x7F	; 127
    48ec:	57 e4       	ldi	r21, 0x47	; 71
    48ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48f2:	18 16       	cp	r1, r24
    48f4:	4c f5       	brge	.+82     	; 0x4948 <Borrow_vid+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48f6:	69 8d       	ldd	r22, Y+25	; 0x19
    48f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	40 e2       	ldi	r20, 0x20	; 32
    4904:	51 e4       	ldi	r21, 0x41	; 65
    4906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	9c 8b       	std	Y+20, r25	; 0x14
    491c:	8b 8b       	std	Y+19, r24	; 0x13
    491e:	0f c0       	rjmp	.+30     	; 0x493e <Borrow_vid+0x37a>
    4920:	88 ec       	ldi	r24, 0xC8	; 200
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9a 8b       	std	Y+18, r25	; 0x12
    4926:	89 8b       	std	Y+17, r24	; 0x11
    4928:	89 89       	ldd	r24, Y+17	; 0x11
    492a:	9a 89       	ldd	r25, Y+18	; 0x12
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	f1 f7       	brne	.-4      	; 0x492c <Borrow_vid+0x368>
    4930:	9a 8b       	std	Y+18, r25	; 0x12
    4932:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4934:	8b 89       	ldd	r24, Y+19	; 0x13
    4936:	9c 89       	ldd	r25, Y+20	; 0x14
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	9c 8b       	std	Y+20, r25	; 0x14
    493c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493e:	8b 89       	ldd	r24, Y+19	; 0x13
    4940:	9c 89       	ldd	r25, Y+20	; 0x14
    4942:	00 97       	sbiw	r24, 0x00	; 0
    4944:	69 f7       	brne	.-38     	; 0x4920 <Borrow_vid+0x35c>
    4946:	14 c0       	rjmp	.+40     	; 0x4970 <Borrow_vid+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4948:	6d 89       	ldd	r22, Y+21	; 0x15
    494a:	7e 89       	ldd	r23, Y+22	; 0x16
    494c:	8f 89       	ldd	r24, Y+23	; 0x17
    494e:	98 8d       	ldd	r25, Y+24	; 0x18
    4950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	9c 8b       	std	Y+20, r25	; 0x14
    495a:	8b 8b       	std	Y+19, r24	; 0x13
    495c:	8b 89       	ldd	r24, Y+19	; 0x13
    495e:	9c 89       	ldd	r25, Y+20	; 0x14
    4960:	98 8b       	std	Y+16, r25	; 0x10
    4962:	8f 87       	std	Y+15, r24	; 0x0f
    4964:	8f 85       	ldd	r24, Y+15	; 0x0f
    4966:	98 89       	ldd	r25, Y+16	; 0x10
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <Borrow_vid+0x3a4>
    496c:	98 8b       	std	Y+16, r25	; 0x10
    496e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	60 e2       	ldi	r22, 0x20	; 32
    4974:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		}
		
		if(!B_flag)
    4978:	8e ad       	ldd	r24, Y+62	; 0x3e
    497a:	88 23       	and	r24, r24
    497c:	09 f0       	breq	.+2      	; 0x4980 <Borrow_vid+0x3bc>
    497e:	7a c0       	rjmp	.+244    	; 0x4a74 <Borrow_vid+0x4b0>
		{
			LCD_String("Card_full");
    4980:	8c e8       	ldi	r24, 0x8C	; 140
    4982:	91 e0       	ldi	r25, 0x01	; 1
    4984:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	aa ef       	ldi	r26, 0xFA	; 250
    498e:	b4 e4       	ldi	r27, 0x44	; 68
    4990:	8b 87       	std	Y+11, r24	; 0x0b
    4992:	9c 87       	std	Y+12, r25	; 0x0c
    4994:	ad 87       	std	Y+13, r26	; 0x0d
    4996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4998:	6b 85       	ldd	r22, Y+11	; 0x0b
    499a:	7c 85       	ldd	r23, Y+12	; 0x0c
    499c:	8d 85       	ldd	r24, Y+13	; 0x0d
    499e:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	4a ef       	ldi	r20, 0xFA	; 250
    49a6:	54 e4       	ldi	r21, 0x44	; 68
    49a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ac:	dc 01       	movw	r26, r24
    49ae:	cb 01       	movw	r24, r22
    49b0:	8f 83       	std	Y+7, r24	; 0x07
    49b2:	98 87       	std	Y+8, r25	; 0x08
    49b4:	a9 87       	std	Y+9, r26	; 0x09
    49b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49b8:	6f 81       	ldd	r22, Y+7	; 0x07
    49ba:	78 85       	ldd	r23, Y+8	; 0x08
    49bc:	89 85       	ldd	r24, Y+9	; 0x09
    49be:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	40 e8       	ldi	r20, 0x80	; 128
    49c6:	5f e3       	ldi	r21, 0x3F	; 63
    49c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49cc:	88 23       	and	r24, r24
    49ce:	2c f4       	brge	.+10     	; 0x49da <Borrow_vid+0x416>
		__ticks = 1;
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	9e 83       	std	Y+6, r25	; 0x06
    49d6:	8d 83       	std	Y+5, r24	; 0x05
    49d8:	3f c0       	rjmp	.+126    	; 0x4a58 <Borrow_vid+0x494>
	else if (__tmp > 65535)
    49da:	6f 81       	ldd	r22, Y+7	; 0x07
    49dc:	78 85       	ldd	r23, Y+8	; 0x08
    49de:	89 85       	ldd	r24, Y+9	; 0x09
    49e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	3f ef       	ldi	r19, 0xFF	; 255
    49e6:	4f e7       	ldi	r20, 0x7F	; 127
    49e8:	57 e4       	ldi	r21, 0x47	; 71
    49ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ee:	18 16       	cp	r1, r24
    49f0:	4c f5       	brge	.+82     	; 0x4a44 <Borrow_vid+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    49f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    49f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	40 e2       	ldi	r20, 0x20	; 32
    4a00:	51 e4       	ldi	r21, 0x41	; 65
    4a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	bc 01       	movw	r22, r24
    4a0c:	cd 01       	movw	r24, r26
    4a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	9e 83       	std	Y+6, r25	; 0x06
    4a18:	8d 83       	std	Y+5, r24	; 0x05
    4a1a:	0f c0       	rjmp	.+30     	; 0x4a3a <Borrow_vid+0x476>
    4a1c:	88 ec       	ldi	r24, 0xC8	; 200
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	9c 83       	std	Y+4, r25	; 0x04
    4a22:	8b 83       	std	Y+3, r24	; 0x03
    4a24:	8b 81       	ldd	r24, Y+3	; 0x03
    4a26:	9c 81       	ldd	r25, Y+4	; 0x04
    4a28:	01 97       	sbiw	r24, 0x01	; 1
    4a2a:	f1 f7       	brne	.-4      	; 0x4a28 <Borrow_vid+0x464>
    4a2c:	9c 83       	std	Y+4, r25	; 0x04
    4a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a30:	8d 81       	ldd	r24, Y+5	; 0x05
    4a32:	9e 81       	ldd	r25, Y+6	; 0x06
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	9e 83       	std	Y+6, r25	; 0x06
    4a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a3e:	00 97       	sbiw	r24, 0x00	; 0
    4a40:	69 f7       	brne	.-38     	; 0x4a1c <Borrow_vid+0x458>
    4a42:	14 c0       	rjmp	.+40     	; 0x4a6c <Borrow_vid+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a44:	6f 81       	ldd	r22, Y+7	; 0x07
    4a46:	78 85       	ldd	r23, Y+8	; 0x08
    4a48:	89 85       	ldd	r24, Y+9	; 0x09
    4a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	9e 83       	std	Y+6, r25	; 0x06
    4a56:	8d 83       	std	Y+5, r24	; 0x05
    4a58:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5c:	9a 83       	std	Y+2, r25	; 0x02
    4a5e:	89 83       	std	Y+1, r24	; 0x01
    4a60:	89 81       	ldd	r24, Y+1	; 0x01
    4a62:	9a 81       	ldd	r25, Y+2	; 0x02
    4a64:	01 97       	sbiw	r24, 0x01	; 1
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <Borrow_vid+0x4a0>
    4a68:	9a 83       	std	Y+2, r25	; 0x02
    4a6a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	60 e2       	ldi	r22, 0x20	; 32
    4a70:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		}
	}
}
    4a74:	ce 5b       	subi	r28, 0xBE	; 190
    4a76:	df 4f       	sbci	r29, 0xFF	; 255
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	f8 94       	cli
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	cf 91       	pop	r28
    4a84:	df 91       	pop	r29
    4a86:	08 95       	ret

00004a88 <LinkedList_show>:
}
*/

// Show all members
bool LinkedList_show(void)
{
    4a88:	df 93       	push	r29
    4a8a:	cf 93       	push	r28
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	ea 97       	sbiw	r28, 0x3a	; 58
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	f8 94       	cli
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	cd bf       	out	0x3d, r28	; 61
	ptr_member = root_member -> NEXT_STRUCT;
    4a9c:	e0 91 2a 04 	lds	r30, 0x042A
    4aa0:	f0 91 2b 04 	lds	r31, 0x042B
    4aa4:	82 85       	ldd	r24, Z+10	; 0x0a
    4aa6:	93 85       	ldd	r25, Z+11	; 0x0b
    4aa8:	90 93 29 04 	sts	0x0429, r25
    4aac:	80 93 28 04 	sts	0x0428, r24

	LCD_vidGoTo(1, 1);
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	61 e0       	ldi	r22, 0x01	; 1
    4ab4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
	LCD_String("NoOfMembers are:");
    4ab8:	86 e9       	ldi	r24, 0x96	; 150
    4aba:	91 e0       	ldi	r25, 0x01	; 1
    4abc:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
	LCD_vidGoTo(1, 2);
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	62 e0       	ldi	r22, 0x02	; 2
    4ac4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
	LinkedList_vidCompanion(NoOfMembers);
    4ac8:	80 91 1f 04 	lds	r24, 0x041F
    4acc:	99 27       	eor	r25, r25
    4ace:	87 fd       	sbrc	r24, 7
    4ad0:	90 95       	com	r25
    4ad2:	0e 94 0a 2a 	call	0x5414	; 0x5414 <LinkedList_vidCompanion>
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	aa e7       	ldi	r26, 0x7A	; 122
    4adc:	b4 e4       	ldi	r27, 0x44	; 68
    4ade:	8d ab       	std	Y+53, r24	; 0x35
    4ae0:	9e ab       	std	Y+54, r25	; 0x36
    4ae2:	af ab       	std	Y+55, r26	; 0x37
    4ae4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae6:	6d a9       	ldd	r22, Y+53	; 0x35
    4ae8:	7e a9       	ldd	r23, Y+54	; 0x36
    4aea:	8f a9       	ldd	r24, Y+55	; 0x37
    4aec:	98 ad       	ldd	r25, Y+56	; 0x38
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	4a ef       	ldi	r20, 0xFA	; 250
    4af4:	54 e4       	ldi	r21, 0x44	; 68
    4af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	89 ab       	std	Y+49, r24	; 0x31
    4b00:	9a ab       	std	Y+50, r25	; 0x32
    4b02:	ab ab       	std	Y+51, r26	; 0x33
    4b04:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4b06:	69 a9       	ldd	r22, Y+49	; 0x31
    4b08:	7a a9       	ldd	r23, Y+50	; 0x32
    4b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    4b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    4b0e:	20 e0       	ldi	r18, 0x00	; 0
    4b10:	30 e0       	ldi	r19, 0x00	; 0
    4b12:	40 e8       	ldi	r20, 0x80	; 128
    4b14:	5f e3       	ldi	r21, 0x3F	; 63
    4b16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b1a:	88 23       	and	r24, r24
    4b1c:	2c f4       	brge	.+10     	; 0x4b28 <LinkedList_show+0xa0>
		__ticks = 1;
    4b1e:	81 e0       	ldi	r24, 0x01	; 1
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	98 ab       	std	Y+48, r25	; 0x30
    4b24:	8f a7       	std	Y+47, r24	; 0x2f
    4b26:	3f c0       	rjmp	.+126    	; 0x4ba6 <LinkedList_show+0x11e>
	else if (__tmp > 65535)
    4b28:	69 a9       	ldd	r22, Y+49	; 0x31
    4b2a:	7a a9       	ldd	r23, Y+50	; 0x32
    4b2c:	8b a9       	ldd	r24, Y+51	; 0x33
    4b2e:	9c a9       	ldd	r25, Y+52	; 0x34
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	3f ef       	ldi	r19, 0xFF	; 255
    4b34:	4f e7       	ldi	r20, 0x7F	; 127
    4b36:	57 e4       	ldi	r21, 0x47	; 71
    4b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b3c:	18 16       	cp	r1, r24
    4b3e:	4c f5       	brge	.+82     	; 0x4b92 <LinkedList_show+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b40:	6d a9       	ldd	r22, Y+53	; 0x35
    4b42:	7e a9       	ldd	r23, Y+54	; 0x36
    4b44:	8f a9       	ldd	r24, Y+55	; 0x37
    4b46:	98 ad       	ldd	r25, Y+56	; 0x38
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e2       	ldi	r20, 0x20	; 32
    4b4e:	51 e4       	ldi	r21, 0x41	; 65
    4b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	bc 01       	movw	r22, r24
    4b5a:	cd 01       	movw	r24, r26
    4b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	98 ab       	std	Y+48, r25	; 0x30
    4b66:	8f a7       	std	Y+47, r24	; 0x2f
    4b68:	0f c0       	rjmp	.+30     	; 0x4b88 <LinkedList_show+0x100>
    4b6a:	88 ec       	ldi	r24, 0xC8	; 200
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	9e a7       	std	Y+46, r25	; 0x2e
    4b70:	8d a7       	std	Y+45, r24	; 0x2d
    4b72:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b74:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b76:	01 97       	sbiw	r24, 0x01	; 1
    4b78:	f1 f7       	brne	.-4      	; 0x4b76 <LinkedList_show+0xee>
    4b7a:	9e a7       	std	Y+46, r25	; 0x2e
    4b7c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b80:	98 a9       	ldd	r25, Y+48	; 0x30
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	98 ab       	std	Y+48, r25	; 0x30
    4b86:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    4b8c:	00 97       	sbiw	r24, 0x00	; 0
    4b8e:	69 f7       	brne	.-38     	; 0x4b6a <LinkedList_show+0xe2>
    4b90:	14 c0       	rjmp	.+40     	; 0x4bba <LinkedList_show+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b92:	69 a9       	ldd	r22, Y+49	; 0x31
    4b94:	7a a9       	ldd	r23, Y+50	; 0x32
    4b96:	8b a9       	ldd	r24, Y+51	; 0x33
    4b98:	9c a9       	ldd	r25, Y+52	; 0x34
    4b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	98 ab       	std	Y+48, r25	; 0x30
    4ba4:	8f a7       	std	Y+47, r24	; 0x2f
    4ba6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ba8:	98 a9       	ldd	r25, Y+48	; 0x30
    4baa:	9c a7       	std	Y+44, r25	; 0x2c
    4bac:	8b a7       	std	Y+43, r24	; 0x2b
    4bae:	8b a5       	ldd	r24, Y+43	; 0x2b
    4bb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <LinkedList_show+0x12a>
    4bb6:	9c a7       	std	Y+44, r25	; 0x2c
    4bb8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_vidClearOnDemand(1, 32);
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	60 e2       	ldi	r22, 0x20	; 32
    4bbe:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>


	// Only root is no valid list
	if(!ptr_member)
    4bc2:	80 91 28 04 	lds	r24, 0x0428
    4bc6:	90 91 29 04 	lds	r25, 0x0429
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	09 f0       	breq	.+2      	; 0x4bd0 <LinkedList_show+0x148>
    4bce:	84 c0       	rjmp	.+264    	; 0x4cd8 <LinkedList_show+0x250>
	{
		LCD_String("NO Members");
    4bd0:	87 ea       	ldi	r24, 0xA7	; 167
    4bd2:	91 e0       	ldi	r25, 0x01	; 1
    4bd4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	aa ef       	ldi	r26, 0xFA	; 250
    4bde:	b4 e4       	ldi	r27, 0x44	; 68
    4be0:	8f a3       	std	Y+39, r24	; 0x27
    4be2:	98 a7       	std	Y+40, r25	; 0x28
    4be4:	a9 a7       	std	Y+41, r26	; 0x29
    4be6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4be8:	6f a1       	ldd	r22, Y+39	; 0x27
    4bea:	78 a5       	ldd	r23, Y+40	; 0x28
    4bec:	89 a5       	ldd	r24, Y+41	; 0x29
    4bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	4a ef       	ldi	r20, 0xFA	; 250
    4bf6:	54 e4       	ldi	r21, 0x44	; 68
    4bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	8b a3       	std	Y+35, r24	; 0x23
    4c02:	9c a3       	std	Y+36, r25	; 0x24
    4c04:	ad a3       	std	Y+37, r26	; 0x25
    4c06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4c08:	6b a1       	ldd	r22, Y+35	; 0x23
    4c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    4c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    4c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e8       	ldi	r20, 0x80	; 128
    4c16:	5f e3       	ldi	r21, 0x3F	; 63
    4c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c1c:	88 23       	and	r24, r24
    4c1e:	2c f4       	brge	.+10     	; 0x4c2a <LinkedList_show+0x1a2>
		__ticks = 1;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	9a a3       	std	Y+34, r25	; 0x22
    4c26:	89 a3       	std	Y+33, r24	; 0x21
    4c28:	3f c0       	rjmp	.+126    	; 0x4ca8 <LinkedList_show+0x220>
	else if (__tmp > 65535)
    4c2a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c2c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c2e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c30:	9e a1       	ldd	r25, Y+38	; 0x26
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	3f ef       	ldi	r19, 0xFF	; 255
    4c36:	4f e7       	ldi	r20, 0x7F	; 127
    4c38:	57 e4       	ldi	r21, 0x47	; 71
    4c3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c3e:	18 16       	cp	r1, r24
    4c40:	4c f5       	brge	.+82     	; 0x4c94 <LinkedList_show+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c42:	6f a1       	ldd	r22, Y+39	; 0x27
    4c44:	78 a5       	ldd	r23, Y+40	; 0x28
    4c46:	89 a5       	ldd	r24, Y+41	; 0x29
    4c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	40 e2       	ldi	r20, 0x20	; 32
    4c50:	51 e4       	ldi	r21, 0x41	; 65
    4c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	bc 01       	movw	r22, r24
    4c5c:	cd 01       	movw	r24, r26
    4c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	9a a3       	std	Y+34, r25	; 0x22
    4c68:	89 a3       	std	Y+33, r24	; 0x21
    4c6a:	0f c0       	rjmp	.+30     	; 0x4c8a <LinkedList_show+0x202>
    4c6c:	88 ec       	ldi	r24, 0xC8	; 200
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	98 a3       	std	Y+32, r25	; 0x20
    4c72:	8f 8f       	std	Y+31, r24	; 0x1f
    4c74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c76:	98 a1       	ldd	r25, Y+32	; 0x20
    4c78:	01 97       	sbiw	r24, 0x01	; 1
    4c7a:	f1 f7       	brne	.-4      	; 0x4c78 <LinkedList_show+0x1f0>
    4c7c:	98 a3       	std	Y+32, r25	; 0x20
    4c7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c80:	89 a1       	ldd	r24, Y+33	; 0x21
    4c82:	9a a1       	ldd	r25, Y+34	; 0x22
    4c84:	01 97       	sbiw	r24, 0x01	; 1
    4c86:	9a a3       	std	Y+34, r25	; 0x22
    4c88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	69 f7       	brne	.-38     	; 0x4c6c <LinkedList_show+0x1e4>
    4c92:	14 c0       	rjmp	.+40     	; 0x4cbc <LinkedList_show+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c94:	6b a1       	ldd	r22, Y+35	; 0x23
    4c96:	7c a1       	ldd	r23, Y+36	; 0x24
    4c98:	8d a1       	ldd	r24, Y+37	; 0x25
    4c9a:	9e a1       	ldd	r25, Y+38	; 0x26
    4c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	cb 01       	movw	r24, r22
    4ca4:	9a a3       	std	Y+34, r25	; 0x22
    4ca6:	89 a3       	std	Y+33, r24	; 0x21
    4ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    4caa:	9a a1       	ldd	r25, Y+34	; 0x22
    4cac:	9e 8f       	std	Y+30, r25	; 0x1e
    4cae:	8d 8f       	std	Y+29, r24	; 0x1d
    4cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <LinkedList_show+0x22c>
    4cb8:	9e 8f       	std	Y+30, r25	; 0x1e
    4cba:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	60 e2       	ldi	r22, 0x20	; 32
    4cc0:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		ptr_member = root_member;
    4cc4:	80 91 2a 04 	lds	r24, 0x042A
    4cc8:	90 91 2b 04 	lds	r25, 0x042B
    4ccc:	90 93 29 04 	sts	0x0429, r25
    4cd0:	80 93 28 04 	sts	0x0428, r24
		return false;
    4cd4:	1a ae       	std	Y+58, r1	; 0x3a
    4cd6:	48 c1       	rjmp	.+656    	; 0x4f68 <LinkedList_show+0x4e0>
	}


	do
	{
		LCD_vidGoTo(1, 2);
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	62 e0       	ldi	r22, 0x02	; 2
    4cdc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String("MEMB_ID:");
    4ce0:	82 eb       	ldi	r24, 0xB2	; 178
    4ce2:	91 e0       	ldi	r25, 0x01	; 1
    4ce4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LCD_String(ptr_member -> ID_STRUCT);
    4ce8:	e0 91 28 04 	lds	r30, 0x0428
    4cec:	f0 91 29 04 	lds	r31, 0x0429
    4cf0:	83 81       	ldd	r24, Z+3	; 0x03
    4cf2:	94 81       	ldd	r25, Z+4	; 0x04
    4cf4:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>

		LCD_vidGoTo(1, 1);
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	61 e0       	ldi	r22, 0x01	; 1
    4cfc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
		LCD_String("MEMB_NAME:");
    4d00:	8b eb       	ldi	r24, 0xBB	; 187
    4d02:	91 e0       	ldi	r25, 0x01	; 1
    4d04:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LCD_String(ptr_member -> NAME_STRUCT);
    4d08:	e0 91 28 04 	lds	r30, 0x0428
    4d0c:	f0 91 29 04 	lds	r31, 0x0429
    4d10:	80 81       	ld	r24, Z
    4d12:	91 81       	ldd	r25, Z+1	; 0x01
    4d14:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	aa ef       	ldi	r26, 0xFA	; 250
    4d1e:	b4 e4       	ldi	r27, 0x44	; 68
    4d20:	89 8f       	std	Y+25, r24	; 0x19
    4d22:	9a 8f       	std	Y+26, r25	; 0x1a
    4d24:	ab 8f       	std	Y+27, r26	; 0x1b
    4d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d28:	69 8d       	ldd	r22, Y+25	; 0x19
    4d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	4a ef       	ldi	r20, 0xFA	; 250
    4d36:	54 e4       	ldi	r21, 0x44	; 68
    4d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	8d 8b       	std	Y+21, r24	; 0x15
    4d42:	9e 8b       	std	Y+22, r25	; 0x16
    4d44:	af 8b       	std	Y+23, r26	; 0x17
    4d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d48:	6d 89       	ldd	r22, Y+21	; 0x15
    4d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e8       	ldi	r20, 0x80	; 128
    4d56:	5f e3       	ldi	r21, 0x3F	; 63
    4d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5c:	88 23       	and	r24, r24
    4d5e:	2c f4       	brge	.+10     	; 0x4d6a <LinkedList_show+0x2e2>
		__ticks = 1;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	9c 8b       	std	Y+20, r25	; 0x14
    4d66:	8b 8b       	std	Y+19, r24	; 0x13
    4d68:	3f c0       	rjmp	.+126    	; 0x4de8 <LinkedList_show+0x360>
	else if (__tmp > 65535)
    4d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d70:	98 8d       	ldd	r25, Y+24	; 0x18
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	3f ef       	ldi	r19, 0xFF	; 255
    4d76:	4f e7       	ldi	r20, 0x7F	; 127
    4d78:	57 e4       	ldi	r21, 0x47	; 71
    4d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d7e:	18 16       	cp	r1, r24
    4d80:	4c f5       	brge	.+82     	; 0x4dd4 <LinkedList_show+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d82:	69 8d       	ldd	r22, Y+25	; 0x19
    4d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	40 e2       	ldi	r20, 0x20	; 32
    4d90:	51 e4       	ldi	r21, 0x41	; 65
    4d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	bc 01       	movw	r22, r24
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9c 8b       	std	Y+20, r25	; 0x14
    4da8:	8b 8b       	std	Y+19, r24	; 0x13
    4daa:	0f c0       	rjmp	.+30     	; 0x4dca <LinkedList_show+0x342>
    4dac:	88 ec       	ldi	r24, 0xC8	; 200
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	9a 8b       	std	Y+18, r25	; 0x12
    4db2:	89 8b       	std	Y+17, r24	; 0x11
    4db4:	89 89       	ldd	r24, Y+17	; 0x11
    4db6:	9a 89       	ldd	r25, Y+18	; 0x12
    4db8:	01 97       	sbiw	r24, 0x01	; 1
    4dba:	f1 f7       	brne	.-4      	; 0x4db8 <LinkedList_show+0x330>
    4dbc:	9a 8b       	std	Y+18, r25	; 0x12
    4dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    4dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	9c 8b       	std	Y+20, r25	; 0x14
    4dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dca:	8b 89       	ldd	r24, Y+19	; 0x13
    4dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	69 f7       	brne	.-38     	; 0x4dac <LinkedList_show+0x324>
    4dd2:	14 c0       	rjmp	.+40     	; 0x4dfc <LinkedList_show+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    4dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    4dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    4dda:	98 8d       	ldd	r25, Y+24	; 0x18
    4ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	9c 8b       	std	Y+20, r25	; 0x14
    4de6:	8b 8b       	std	Y+19, r24	; 0x13
    4de8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dea:	9c 89       	ldd	r25, Y+20	; 0x14
    4dec:	98 8b       	std	Y+16, r25	; 0x10
    4dee:	8f 87       	std	Y+15, r24	; 0x0f
    4df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4df2:	98 89       	ldd	r25, Y+16	; 0x10
    4df4:	01 97       	sbiw	r24, 0x01	; 1
    4df6:	f1 f7       	brne	.-4      	; 0x4df4 <LinkedList_show+0x36c>
    4df8:	98 8b       	std	Y+16, r25	; 0x10
    4dfa:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	60 e2       	ldi	r22, 0x20	; 32
    4e00:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

		LCD_String("ID_BOOKS:");
    4e04:	86 ec       	ldi	r24, 0xC6	; 198
    4e06:	91 e0       	ldi	r25, 0x01	; 1
    4e08:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e0c:	19 ae       	std	Y+57, r1	; 0x39
    4e0e:	18 c0       	rjmp	.+48     	; 0x4e40 <LinkedList_show+0x3b8>
		{
			LCD_vidGoTo(i + 1, 2);
    4e10:	89 ad       	ldd	r24, Y+57	; 0x39
    4e12:	8f 5f       	subi	r24, 0xFF	; 255
    4e14:	62 e0       	ldi	r22, 0x02	; 2
    4e16:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
    4e1a:	20 91 28 04 	lds	r18, 0x0428
    4e1e:	30 91 29 04 	lds	r19, 0x0429
    4e22:	89 ad       	ldd	r24, Y+57	; 0x39
    4e24:	88 2f       	mov	r24, r24
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	82 0f       	add	r24, r18
    4e2a:	93 1f       	adc	r25, r19
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	35 96       	adiw	r30, 0x05	; 5
    4e30:	80 81       	ld	r24, Z
    4e32:	88 2f       	mov	r24, r24
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	0e 94 0a 2a 	call	0x5414	; 0x5414 <LinkedList_vidCompanion>

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);

		LCD_String("ID_BOOKS:");
		for(u8 i = 0; i < AVAILABLE_SHARES; i++)
    4e3a:	89 ad       	ldd	r24, Y+57	; 0x39
    4e3c:	8f 5f       	subi	r24, 0xFF	; 255
    4e3e:	89 af       	std	Y+57, r24	; 0x39
    4e40:	89 ad       	ldd	r24, Y+57	; 0x39
    4e42:	85 30       	cpi	r24, 0x05	; 5
    4e44:	28 f3       	brcs	.-54     	; 0x4e10 <LinkedList_show+0x388>
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	aa ef       	ldi	r26, 0xFA	; 250
    4e4c:	b4 e4       	ldi	r27, 0x44	; 68
    4e4e:	8b 87       	std	Y+11, r24	; 0x0b
    4e50:	9c 87       	std	Y+12, r25	; 0x0c
    4e52:	ad 87       	std	Y+13, r26	; 0x0d
    4e54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	4a ef       	ldi	r20, 0xFA	; 250
    4e64:	54 e4       	ldi	r21, 0x44	; 68
    4e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e6a:	dc 01       	movw	r26, r24
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	8f 83       	std	Y+7, r24	; 0x07
    4e70:	98 87       	std	Y+8, r25	; 0x08
    4e72:	a9 87       	std	Y+9, r26	; 0x09
    4e74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e76:	6f 81       	ldd	r22, Y+7	; 0x07
    4e78:	78 85       	ldd	r23, Y+8	; 0x08
    4e7a:	89 85       	ldd	r24, Y+9	; 0x09
    4e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e7e:	20 e0       	ldi	r18, 0x00	; 0
    4e80:	30 e0       	ldi	r19, 0x00	; 0
    4e82:	40 e8       	ldi	r20, 0x80	; 128
    4e84:	5f e3       	ldi	r21, 0x3F	; 63
    4e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e8a:	88 23       	and	r24, r24
    4e8c:	2c f4       	brge	.+10     	; 0x4e98 <LinkedList_show+0x410>
		__ticks = 1;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	9e 83       	std	Y+6, r25	; 0x06
    4e94:	8d 83       	std	Y+5, r24	; 0x05
    4e96:	3f c0       	rjmp	.+126    	; 0x4f16 <LinkedList_show+0x48e>
	else if (__tmp > 65535)
    4e98:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9a:	78 85       	ldd	r23, Y+8	; 0x08
    4e9c:	89 85       	ldd	r24, Y+9	; 0x09
    4e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	3f ef       	ldi	r19, 0xFF	; 255
    4ea4:	4f e7       	ldi	r20, 0x7F	; 127
    4ea6:	57 e4       	ldi	r21, 0x47	; 71
    4ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eac:	18 16       	cp	r1, r24
    4eae:	4c f5       	brge	.+82     	; 0x4f02 <LinkedList_show+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	40 e2       	ldi	r20, 0x20	; 32
    4ebe:	51 e4       	ldi	r21, 0x41	; 65
    4ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	bc 01       	movw	r22, r24
    4eca:	cd 01       	movw	r24, r26
    4ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	9e 83       	std	Y+6, r25	; 0x06
    4ed6:	8d 83       	std	Y+5, r24	; 0x05
    4ed8:	0f c0       	rjmp	.+30     	; 0x4ef8 <LinkedList_show+0x470>
    4eda:	88 ec       	ldi	r24, 0xC8	; 200
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	9c 83       	std	Y+4, r25	; 0x04
    4ee0:	8b 83       	std	Y+3, r24	; 0x03
    4ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee6:	01 97       	sbiw	r24, 0x01	; 1
    4ee8:	f1 f7       	brne	.-4      	; 0x4ee6 <LinkedList_show+0x45e>
    4eea:	9c 83       	std	Y+4, r25	; 0x04
    4eec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef2:	01 97       	sbiw	r24, 0x01	; 1
    4ef4:	9e 83       	std	Y+6, r25	; 0x06
    4ef6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    4efa:	9e 81       	ldd	r25, Y+6	; 0x06
    4efc:	00 97       	sbiw	r24, 0x00	; 0
    4efe:	69 f7       	brne	.-38     	; 0x4eda <LinkedList_show+0x452>
    4f00:	14 c0       	rjmp	.+40     	; 0x4f2a <LinkedList_show+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f02:	6f 81       	ldd	r22, Y+7	; 0x07
    4f04:	78 85       	ldd	r23, Y+8	; 0x08
    4f06:	89 85       	ldd	r24, Y+9	; 0x09
    4f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	9e 83       	std	Y+6, r25	; 0x06
    4f14:	8d 83       	std	Y+5, r24	; 0x05
    4f16:	8d 81       	ldd	r24, Y+5	; 0x05
    4f18:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1a:	9a 83       	std	Y+2, r25	; 0x02
    4f1c:	89 83       	std	Y+1, r24	; 0x01
    4f1e:	89 81       	ldd	r24, Y+1	; 0x01
    4f20:	9a 81       	ldd	r25, Y+2	; 0x02
    4f22:	01 97       	sbiw	r24, 0x01	; 1
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <LinkedList_show+0x49a>
    4f26:	9a 83       	std	Y+2, r25	; 0x02
    4f28:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidGoTo(i + 1, 2);
			LinkedList_vidCompanion(ptr_member -> MEMBER_CARD_BOOKS[i]);
		}

		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	60 e2       	ldi	r22, 0x20	; 32
    4f2e:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		ptr_member = ptr_member -> NEXT_STRUCT;
    4f32:	e0 91 28 04 	lds	r30, 0x0428
    4f36:	f0 91 29 04 	lds	r31, 0x0429
    4f3a:	82 85       	ldd	r24, Z+10	; 0x0a
    4f3c:	93 85       	ldd	r25, Z+11	; 0x0b
    4f3e:	90 93 29 04 	sts	0x0429, r25
    4f42:	80 93 28 04 	sts	0x0428, r24
	}
	while(ptr_member != NULL);
    4f46:	80 91 28 04 	lds	r24, 0x0428
    4f4a:	90 91 29 04 	lds	r25, 0x0429
    4f4e:	00 97       	sbiw	r24, 0x00	; 0
    4f50:	09 f0       	breq	.+2      	; 0x4f54 <LinkedList_show+0x4cc>
    4f52:	c2 ce       	rjmp	.-636    	; 0x4cd8 <LinkedList_show+0x250>
	
	ptr_member = root_member;
    4f54:	80 91 2a 04 	lds	r24, 0x042A
    4f58:	90 91 2b 04 	lds	r25, 0x042B
    4f5c:	90 93 29 04 	sts	0x0429, r25
    4f60:	80 93 28 04 	sts	0x0428, r24

	return true;
    4f64:	81 e0       	ldi	r24, 0x01	; 1
    4f66:	8a af       	std	Y+58, r24	; 0x3a
    4f68:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    4f6a:	ea 96       	adiw	r28, 0x3a	; 58
    4f6c:	0f b6       	in	r0, 0x3f	; 63
    4f6e:	f8 94       	cli
    4f70:	de bf       	out	0x3e, r29	; 62
    4f72:	0f be       	out	0x3f, r0	; 63
    4f74:	cd bf       	out	0x3d, r28	; 61
    4f76:	cf 91       	pop	r28
    4f78:	df 91       	pop	r29
    4f7a:	08 95       	ret

00004f7c <RETURN_vid>:



// RETURN from books
void RETURN_vid(char *id, char *serial)
{
    4f7c:	df 93       	push	r29
    4f7e:	cf 93       	push	r28
    4f80:	cd b7       	in	r28, 0x3d	; 61
    4f82:	de b7       	in	r29, 0x3e	; 62
    4f84:	c1 54       	subi	r28, 0x41	; 65
    4f86:	d0 40       	sbci	r29, 0x00	; 0
    4f88:	0f b6       	in	r0, 0x3f	; 63
    4f8a:	f8 94       	cli
    4f8c:	de bf       	out	0x3e, r29	; 62
    4f8e:	0f be       	out	0x3f, r0	; 63
    4f90:	cd bf       	out	0x3d, r28	; 61
    4f92:	9f af       	std	Y+63, r25	; 0x3f
    4f94:	8e af       	std	Y+62, r24	; 0x3e
    4f96:	fe 01       	movw	r30, r28
    4f98:	e0 5c       	subi	r30, 0xC0	; 192
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	71 83       	std	Z+1, r23	; 0x01
    4f9e:	60 83       	st	Z, r22
	char R_flag = 0;
    4fa0:	1d ae       	std	Y+61, r1	; 0x3d
	u8 index = 0;
    4fa2:	1c ae       	std	Y+60, r1	; 0x3c
	

	// Search for member and don't show old books
	members *tmp = search(id, 0);
    4fa4:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fa8:	60 e0       	ldi	r22, 0x00	; 0
    4faa:	0e 94 99 21 	call	0x4332	; 0x4332 <search>
    4fae:	9b af       	std	Y+59, r25	; 0x3b
    4fb0:	8a af       	std	Y+58, r24	; 0x3a
	
	// Search for the book via ISBN
	index = BOOKS_search(serial, 0);
    4fb2:	fe 01       	movw	r30, r28
    4fb4:	e0 5c       	subi	r30, 0xC0	; 192
    4fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb8:	80 81       	ld	r24, Z
    4fba:	91 81       	ldd	r25, Z+1	; 0x01
    4fbc:	60 e0       	ldi	r22, 0x00	; 0
    4fbe:	0e 94 41 1a 	call	0x3482	; 0x3482 <BOOKS_search>
    4fc2:	8c af       	std	Y+60, r24	; 0x3c
	
	if(!tmp)
    4fc4:	8a ad       	ldd	r24, Y+58	; 0x3a
    4fc6:	9b ad       	ldd	r25, Y+59	; 0x3b
    4fc8:	00 97       	sbiw	r24, 0x00	; 0
    4fca:	09 f0       	breq	.+2      	; 0x4fce <RETURN_vid+0x52>
    4fcc:	7b c0       	rjmp	.+246    	; 0x50c4 <RETURN_vid+0x148>
	{
		// Invalid ID
		LCD_String("ERROR:Inv_ID");
    4fce:	80 ed       	ldi	r24, 0xD0	; 208
    4fd0:	91 e0       	ldi	r25, 0x01	; 1
    4fd2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	aa ef       	ldi	r26, 0xFA	; 250
    4fdc:	b4 e4       	ldi	r27, 0x44	; 68
    4fde:	8d ab       	std	Y+53, r24	; 0x35
    4fe0:	9e ab       	std	Y+54, r25	; 0x36
    4fe2:	af ab       	std	Y+55, r26	; 0x37
    4fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fe6:	6d a9       	ldd	r22, Y+53	; 0x35
    4fe8:	7e a9       	ldd	r23, Y+54	; 0x36
    4fea:	8f a9       	ldd	r24, Y+55	; 0x37
    4fec:	98 ad       	ldd	r25, Y+56	; 0x38
    4fee:	20 e0       	ldi	r18, 0x00	; 0
    4ff0:	30 e0       	ldi	r19, 0x00	; 0
    4ff2:	4a ef       	ldi	r20, 0xFA	; 250
    4ff4:	54 e4       	ldi	r21, 0x44	; 68
    4ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	89 ab       	std	Y+49, r24	; 0x31
    5000:	9a ab       	std	Y+50, r25	; 0x32
    5002:	ab ab       	std	Y+51, r26	; 0x33
    5004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5006:	69 a9       	ldd	r22, Y+49	; 0x31
    5008:	7a a9       	ldd	r23, Y+50	; 0x32
    500a:	8b a9       	ldd	r24, Y+51	; 0x33
    500c:	9c a9       	ldd	r25, Y+52	; 0x34
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	40 e8       	ldi	r20, 0x80	; 128
    5014:	5f e3       	ldi	r21, 0x3F	; 63
    5016:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    501a:	88 23       	and	r24, r24
    501c:	2c f4       	brge	.+10     	; 0x5028 <RETURN_vid+0xac>
		__ticks = 1;
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	98 ab       	std	Y+48, r25	; 0x30
    5024:	8f a7       	std	Y+47, r24	; 0x2f
    5026:	3f c0       	rjmp	.+126    	; 0x50a6 <RETURN_vid+0x12a>
	else if (__tmp > 65535)
    5028:	69 a9       	ldd	r22, Y+49	; 0x31
    502a:	7a a9       	ldd	r23, Y+50	; 0x32
    502c:	8b a9       	ldd	r24, Y+51	; 0x33
    502e:	9c a9       	ldd	r25, Y+52	; 0x34
    5030:	20 e0       	ldi	r18, 0x00	; 0
    5032:	3f ef       	ldi	r19, 0xFF	; 255
    5034:	4f e7       	ldi	r20, 0x7F	; 127
    5036:	57 e4       	ldi	r21, 0x47	; 71
    5038:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    503c:	18 16       	cp	r1, r24
    503e:	4c f5       	brge	.+82     	; 0x5092 <RETURN_vid+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5040:	6d a9       	ldd	r22, Y+53	; 0x35
    5042:	7e a9       	ldd	r23, Y+54	; 0x36
    5044:	8f a9       	ldd	r24, Y+55	; 0x37
    5046:	98 ad       	ldd	r25, Y+56	; 0x38
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	40 e2       	ldi	r20, 0x20	; 32
    504e:	51 e4       	ldi	r21, 0x41	; 65
    5050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	bc 01       	movw	r22, r24
    505a:	cd 01       	movw	r24, r26
    505c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	98 ab       	std	Y+48, r25	; 0x30
    5066:	8f a7       	std	Y+47, r24	; 0x2f
    5068:	0f c0       	rjmp	.+30     	; 0x5088 <RETURN_vid+0x10c>
    506a:	88 ec       	ldi	r24, 0xC8	; 200
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	9e a7       	std	Y+46, r25	; 0x2e
    5070:	8d a7       	std	Y+45, r24	; 0x2d
    5072:	8d a5       	ldd	r24, Y+45	; 0x2d
    5074:	9e a5       	ldd	r25, Y+46	; 0x2e
    5076:	01 97       	sbiw	r24, 0x01	; 1
    5078:	f1 f7       	brne	.-4      	; 0x5076 <RETURN_vid+0xfa>
    507a:	9e a7       	std	Y+46, r25	; 0x2e
    507c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    507e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5080:	98 a9       	ldd	r25, Y+48	; 0x30
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	98 ab       	std	Y+48, r25	; 0x30
    5086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5088:	8f a5       	ldd	r24, Y+47	; 0x2f
    508a:	98 a9       	ldd	r25, Y+48	; 0x30
    508c:	00 97       	sbiw	r24, 0x00	; 0
    508e:	69 f7       	brne	.-38     	; 0x506a <RETURN_vid+0xee>
    5090:	14 c0       	rjmp	.+40     	; 0x50ba <RETURN_vid+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5092:	69 a9       	ldd	r22, Y+49	; 0x31
    5094:	7a a9       	ldd	r23, Y+50	; 0x32
    5096:	8b a9       	ldd	r24, Y+51	; 0x33
    5098:	9c a9       	ldd	r25, Y+52	; 0x34
    509a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	98 ab       	std	Y+48, r25	; 0x30
    50a4:	8f a7       	std	Y+47, r24	; 0x2f
    50a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    50a8:	98 a9       	ldd	r25, Y+48	; 0x30
    50aa:	9c a7       	std	Y+44, r25	; 0x2c
    50ac:	8b a7       	std	Y+43, r24	; 0x2b
    50ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    50b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	f1 f7       	brne	.-4      	; 0x50b2 <RETURN_vid+0x136>
    50b6:	9c a7       	std	Y+44, r25	; 0x2c
    50b8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		LCD_vidClearOnDemand(1, 32);
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	60 e2       	ldi	r22, 0x20	; 32
    50be:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
    50c2:	9e c1       	rjmp	.+828    	; 0x5400 <RETURN_vid+0x484>
	}
	else
	{
		// Valid Serial 
		if( index != DoesNot_exist)
    50c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    50c6:	88 23       	and	r24, r24
    50c8:	09 f4       	brne	.+2      	; 0x50cc <RETURN_vid+0x150>
    50ca:	a2 c0       	rjmp	.+324    	; 0x5210 <RETURN_vid+0x294>
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    50cc:	19 ae       	std	Y+57, r1	; 0x39
    50ce:	9b c0       	rjmp	.+310    	; 0x5206 <RETURN_vid+0x28a>
			{
				if(tmp -> MEMBER_CARD_BOOKS[j] == index)
    50d0:	89 ad       	ldd	r24, Y+57	; 0x39
    50d2:	28 2f       	mov	r18, r24
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    50d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    50da:	82 0f       	add	r24, r18
    50dc:	93 1f       	adc	r25, r19
    50de:	fc 01       	movw	r30, r24
    50e0:	35 96       	adiw	r30, 0x05	; 5
    50e2:	90 81       	ld	r25, Z
    50e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    50e6:	98 17       	cp	r25, r24
    50e8:	09 f0       	breq	.+2      	; 0x50ec <RETURN_vid+0x170>
    50ea:	8a c0       	rjmp	.+276    	; 0x5200 <RETURN_vid+0x284>
				{		
					BOOKS_COPIES_INCREASE();
    50ec:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <BOOKS_COPIES_INCREASE>
					
					// Return and remove from MEMBER_CARD_BOOKS[]
					tmp -> MEMBER_CARD_BOOKS[j] = 0;
    50f0:	89 ad       	ldd	r24, Y+57	; 0x39
    50f2:	28 2f       	mov	r18, r24
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    50f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    50fa:	82 0f       	add	r24, r18
    50fc:	93 1f       	adc	r25, r19
    50fe:	fc 01       	movw	r30, r24
    5100:	35 96       	adiw	r30, 0x05	; 5
    5102:	10 82       	st	Z, r1

					LCD_String("RETURNED SUCCESSFULLY:");
    5104:	8d ed       	ldi	r24, 0xDD	; 221
    5106:	91 e0       	ldi	r25, 0x01	; 1
    5108:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	aa ef       	ldi	r26, 0xFA	; 250
    5112:	b4 e4       	ldi	r27, 0x44	; 68
    5114:	8f a3       	std	Y+39, r24	; 0x27
    5116:	98 a7       	std	Y+40, r25	; 0x28
    5118:	a9 a7       	std	Y+41, r26	; 0x29
    511a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    511c:	6f a1       	ldd	r22, Y+39	; 0x27
    511e:	78 a5       	ldd	r23, Y+40	; 0x28
    5120:	89 a5       	ldd	r24, Y+41	; 0x29
    5122:	9a a5       	ldd	r25, Y+42	; 0x2a
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	4a ef       	ldi	r20, 0xFA	; 250
    512a:	54 e4       	ldi	r21, 0x44	; 68
    512c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	8b a3       	std	Y+35, r24	; 0x23
    5136:	9c a3       	std	Y+36, r25	; 0x24
    5138:	ad a3       	std	Y+37, r26	; 0x25
    513a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    513c:	6b a1       	ldd	r22, Y+35	; 0x23
    513e:	7c a1       	ldd	r23, Y+36	; 0x24
    5140:	8d a1       	ldd	r24, Y+37	; 0x25
    5142:	9e a1       	ldd	r25, Y+38	; 0x26
    5144:	20 e0       	ldi	r18, 0x00	; 0
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e8       	ldi	r20, 0x80	; 128
    514a:	5f e3       	ldi	r21, 0x3F	; 63
    514c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5150:	88 23       	and	r24, r24
    5152:	2c f4       	brge	.+10     	; 0x515e <RETURN_vid+0x1e2>
		__ticks = 1;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	9a a3       	std	Y+34, r25	; 0x22
    515a:	89 a3       	std	Y+33, r24	; 0x21
    515c:	3f c0       	rjmp	.+126    	; 0x51dc <RETURN_vid+0x260>
	else if (__tmp > 65535)
    515e:	6b a1       	ldd	r22, Y+35	; 0x23
    5160:	7c a1       	ldd	r23, Y+36	; 0x24
    5162:	8d a1       	ldd	r24, Y+37	; 0x25
    5164:	9e a1       	ldd	r25, Y+38	; 0x26
    5166:	20 e0       	ldi	r18, 0x00	; 0
    5168:	3f ef       	ldi	r19, 0xFF	; 255
    516a:	4f e7       	ldi	r20, 0x7F	; 127
    516c:	57 e4       	ldi	r21, 0x47	; 71
    516e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5172:	18 16       	cp	r1, r24
    5174:	4c f5       	brge	.+82     	; 0x51c8 <RETURN_vid+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5176:	6f a1       	ldd	r22, Y+39	; 0x27
    5178:	78 a5       	ldd	r23, Y+40	; 0x28
    517a:	89 a5       	ldd	r24, Y+41	; 0x29
    517c:	9a a5       	ldd	r25, Y+42	; 0x2a
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	40 e2       	ldi	r20, 0x20	; 32
    5184:	51 e4       	ldi	r21, 0x41	; 65
    5186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    518a:	dc 01       	movw	r26, r24
    518c:	cb 01       	movw	r24, r22
    518e:	bc 01       	movw	r22, r24
    5190:	cd 01       	movw	r24, r26
    5192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5196:	dc 01       	movw	r26, r24
    5198:	cb 01       	movw	r24, r22
    519a:	9a a3       	std	Y+34, r25	; 0x22
    519c:	89 a3       	std	Y+33, r24	; 0x21
    519e:	0f c0       	rjmp	.+30     	; 0x51be <RETURN_vid+0x242>
    51a0:	88 ec       	ldi	r24, 0xC8	; 200
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	98 a3       	std	Y+32, r25	; 0x20
    51a6:	8f 8f       	std	Y+31, r24	; 0x1f
    51a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51aa:	98 a1       	ldd	r25, Y+32	; 0x20
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	f1 f7       	brne	.-4      	; 0x51ac <RETURN_vid+0x230>
    51b0:	98 a3       	std	Y+32, r25	; 0x20
    51b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b4:	89 a1       	ldd	r24, Y+33	; 0x21
    51b6:	9a a1       	ldd	r25, Y+34	; 0x22
    51b8:	01 97       	sbiw	r24, 0x01	; 1
    51ba:	9a a3       	std	Y+34, r25	; 0x22
    51bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51be:	89 a1       	ldd	r24, Y+33	; 0x21
    51c0:	9a a1       	ldd	r25, Y+34	; 0x22
    51c2:	00 97       	sbiw	r24, 0x00	; 0
    51c4:	69 f7       	brne	.-38     	; 0x51a0 <RETURN_vid+0x224>
    51c6:	14 c0       	rjmp	.+40     	; 0x51f0 <RETURN_vid+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c8:	6b a1       	ldd	r22, Y+35	; 0x23
    51ca:	7c a1       	ldd	r23, Y+36	; 0x24
    51cc:	8d a1       	ldd	r24, Y+37	; 0x25
    51ce:	9e a1       	ldd	r25, Y+38	; 0x26
    51d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51d4:	dc 01       	movw	r26, r24
    51d6:	cb 01       	movw	r24, r22
    51d8:	9a a3       	std	Y+34, r25	; 0x22
    51da:	89 a3       	std	Y+33, r24	; 0x21
    51dc:	89 a1       	ldd	r24, Y+33	; 0x21
    51de:	9a a1       	ldd	r25, Y+34	; 0x22
    51e0:	9e 8f       	std	Y+30, r25	; 0x1e
    51e2:	8d 8f       	std	Y+29, r24	; 0x1d
    51e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	f1 f7       	brne	.-4      	; 0x51e8 <RETURN_vid+0x26c>
    51ec:	9e 8f       	std	Y+30, r25	; 0x1e
    51ee:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
					LCD_vidClearOnDemand(1, 32);
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	60 e2       	ldi	r22, 0x20	; 32
    51f4:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
					R_flag = 1;
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	8d af       	std	Y+61, r24	; 0x3d
					j = AVAILABLE_SHARES;					
    51fc:	85 e0       	ldi	r24, 0x05	; 5
    51fe:	89 af       	std	Y+57, r24	; 0x39
	{
		// Valid Serial 
		if( index != DoesNot_exist)
		{
			// Scan for empty member card index
			for(u8 j = 0; j < AVAILABLE_SHARES; j++)
    5200:	89 ad       	ldd	r24, Y+57	; 0x39
    5202:	8f 5f       	subi	r24, 0xFF	; 255
    5204:	89 af       	std	Y+57, r24	; 0x39
    5206:	89 ad       	ldd	r24, Y+57	; 0x39
    5208:	85 30       	cpi	r24, 0x05	; 5
    520a:	08 f4       	brcc	.+2      	; 0x520e <RETURN_vid+0x292>
    520c:	61 cf       	rjmp	.-318    	; 0x50d0 <RETURN_vid+0x154>
    520e:	7a c0       	rjmp	.+244    	; 0x5304 <RETURN_vid+0x388>
				else;
			}
		}
		else
		{
			LCD_String("Invalid ISBN");
    5210:	8f e7       	ldi	r24, 0x7F	; 127
    5212:	91 e0       	ldi	r25, 0x01	; 1
    5214:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	aa ef       	ldi	r26, 0xFA	; 250
    521e:	b4 e4       	ldi	r27, 0x44	; 68
    5220:	89 8f       	std	Y+25, r24	; 0x19
    5222:	9a 8f       	std	Y+26, r25	; 0x1a
    5224:	ab 8f       	std	Y+27, r26	; 0x1b
    5226:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5228:	69 8d       	ldd	r22, Y+25	; 0x19
    522a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    522c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    522e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	4a ef       	ldi	r20, 0xFA	; 250
    5236:	54 e4       	ldi	r21, 0x44	; 68
    5238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    523c:	dc 01       	movw	r26, r24
    523e:	cb 01       	movw	r24, r22
    5240:	8d 8b       	std	Y+21, r24	; 0x15
    5242:	9e 8b       	std	Y+22, r25	; 0x16
    5244:	af 8b       	std	Y+23, r26	; 0x17
    5246:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5248:	6d 89       	ldd	r22, Y+21	; 0x15
    524a:	7e 89       	ldd	r23, Y+22	; 0x16
    524c:	8f 89       	ldd	r24, Y+23	; 0x17
    524e:	98 8d       	ldd	r25, Y+24	; 0x18
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 e8       	ldi	r20, 0x80	; 128
    5256:	5f e3       	ldi	r21, 0x3F	; 63
    5258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    525c:	88 23       	and	r24, r24
    525e:	2c f4       	brge	.+10     	; 0x526a <RETURN_vid+0x2ee>
		__ticks = 1;
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	9c 8b       	std	Y+20, r25	; 0x14
    5266:	8b 8b       	std	Y+19, r24	; 0x13
    5268:	3f c0       	rjmp	.+126    	; 0x52e8 <RETURN_vid+0x36c>
	else if (__tmp > 65535)
    526a:	6d 89       	ldd	r22, Y+21	; 0x15
    526c:	7e 89       	ldd	r23, Y+22	; 0x16
    526e:	8f 89       	ldd	r24, Y+23	; 0x17
    5270:	98 8d       	ldd	r25, Y+24	; 0x18
    5272:	20 e0       	ldi	r18, 0x00	; 0
    5274:	3f ef       	ldi	r19, 0xFF	; 255
    5276:	4f e7       	ldi	r20, 0x7F	; 127
    5278:	57 e4       	ldi	r21, 0x47	; 71
    527a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    527e:	18 16       	cp	r1, r24
    5280:	4c f5       	brge	.+82     	; 0x52d4 <RETURN_vid+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5282:	69 8d       	ldd	r22, Y+25	; 0x19
    5284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	40 e2       	ldi	r20, 0x20	; 32
    5290:	51 e4       	ldi	r21, 0x41	; 65
    5292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5296:	dc 01       	movw	r26, r24
    5298:	cb 01       	movw	r24, r22
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	9c 8b       	std	Y+20, r25	; 0x14
    52a8:	8b 8b       	std	Y+19, r24	; 0x13
    52aa:	0f c0       	rjmp	.+30     	; 0x52ca <RETURN_vid+0x34e>
    52ac:	88 ec       	ldi	r24, 0xC8	; 200
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	9a 8b       	std	Y+18, r25	; 0x12
    52b2:	89 8b       	std	Y+17, r24	; 0x11
    52b4:	89 89       	ldd	r24, Y+17	; 0x11
    52b6:	9a 89       	ldd	r25, Y+18	; 0x12
    52b8:	01 97       	sbiw	r24, 0x01	; 1
    52ba:	f1 f7       	brne	.-4      	; 0x52b8 <RETURN_vid+0x33c>
    52bc:	9a 8b       	std	Y+18, r25	; 0x12
    52be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c0:	8b 89       	ldd	r24, Y+19	; 0x13
    52c2:	9c 89       	ldd	r25, Y+20	; 0x14
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	9c 8b       	std	Y+20, r25	; 0x14
    52c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ca:	8b 89       	ldd	r24, Y+19	; 0x13
    52cc:	9c 89       	ldd	r25, Y+20	; 0x14
    52ce:	00 97       	sbiw	r24, 0x00	; 0
    52d0:	69 f7       	brne	.-38     	; 0x52ac <RETURN_vid+0x330>
    52d2:	14 c0       	rjmp	.+40     	; 0x52fc <RETURN_vid+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d4:	6d 89       	ldd	r22, Y+21	; 0x15
    52d6:	7e 89       	ldd	r23, Y+22	; 0x16
    52d8:	8f 89       	ldd	r24, Y+23	; 0x17
    52da:	98 8d       	ldd	r25, Y+24	; 0x18
    52dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	9c 8b       	std	Y+20, r25	; 0x14
    52e6:	8b 8b       	std	Y+19, r24	; 0x13
    52e8:	8b 89       	ldd	r24, Y+19	; 0x13
    52ea:	9c 89       	ldd	r25, Y+20	; 0x14
    52ec:	98 8b       	std	Y+16, r25	; 0x10
    52ee:	8f 87       	std	Y+15, r24	; 0x0f
    52f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    52f2:	98 89       	ldd	r25, Y+16	; 0x10
    52f4:	01 97       	sbiw	r24, 0x01	; 1
    52f6:	f1 f7       	brne	.-4      	; 0x52f4 <RETURN_vid+0x378>
    52f8:	98 8b       	std	Y+16, r25	; 0x10
    52fa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	60 e2       	ldi	r22, 0x20	; 32
    5300:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		}
		
		if(!R_flag)
    5304:	8d ad       	ldd	r24, Y+61	; 0x3d
    5306:	88 23       	and	r24, r24
    5308:	09 f0       	breq	.+2      	; 0x530c <RETURN_vid+0x390>
    530a:	7a c0       	rjmp	.+244    	; 0x5400 <RETURN_vid+0x484>
		{
			LCD_String("ERROR:Card_full");
    530c:	84 ef       	ldi	r24, 0xF4	; 244
    530e:	91 e0       	ldi	r25, 0x01	; 1
    5310:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	aa ef       	ldi	r26, 0xFA	; 250
    531a:	b4 e4       	ldi	r27, 0x44	; 68
    531c:	8b 87       	std	Y+11, r24	; 0x0b
    531e:	9c 87       	std	Y+12, r25	; 0x0c
    5320:	ad 87       	std	Y+13, r26	; 0x0d
    5322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5324:	6b 85       	ldd	r22, Y+11	; 0x0b
    5326:	7c 85       	ldd	r23, Y+12	; 0x0c
    5328:	8d 85       	ldd	r24, Y+13	; 0x0d
    532a:	9e 85       	ldd	r25, Y+14	; 0x0e
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	4a ef       	ldi	r20, 0xFA	; 250
    5332:	54 e4       	ldi	r21, 0x44	; 68
    5334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	8f 83       	std	Y+7, r24	; 0x07
    533e:	98 87       	std	Y+8, r25	; 0x08
    5340:	a9 87       	std	Y+9, r26	; 0x09
    5342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5344:	6f 81       	ldd	r22, Y+7	; 0x07
    5346:	78 85       	ldd	r23, Y+8	; 0x08
    5348:	89 85       	ldd	r24, Y+9	; 0x09
    534a:	9a 85       	ldd	r25, Y+10	; 0x0a
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e8       	ldi	r20, 0x80	; 128
    5352:	5f e3       	ldi	r21, 0x3F	; 63
    5354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5358:	88 23       	and	r24, r24
    535a:	2c f4       	brge	.+10     	; 0x5366 <RETURN_vid+0x3ea>
		__ticks = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9e 83       	std	Y+6, r25	; 0x06
    5362:	8d 83       	std	Y+5, r24	; 0x05
    5364:	3f c0       	rjmp	.+126    	; 0x53e4 <RETURN_vid+0x468>
	else if (__tmp > 65535)
    5366:	6f 81       	ldd	r22, Y+7	; 0x07
    5368:	78 85       	ldd	r23, Y+8	; 0x08
    536a:	89 85       	ldd	r24, Y+9	; 0x09
    536c:	9a 85       	ldd	r25, Y+10	; 0x0a
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	3f ef       	ldi	r19, 0xFF	; 255
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	57 e4       	ldi	r21, 0x47	; 71
    5376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    537a:	18 16       	cp	r1, r24
    537c:	4c f5       	brge	.+82     	; 0x53d0 <RETURN_vid+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5380:	7c 85       	ldd	r23, Y+12	; 0x0c
    5382:	8d 85       	ldd	r24, Y+13	; 0x0d
    5384:	9e 85       	ldd	r25, Y+14	; 0x0e
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e2       	ldi	r20, 0x20	; 32
    538c:	51 e4       	ldi	r21, 0x41	; 65
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	bc 01       	movw	r22, r24
    5398:	cd 01       	movw	r24, r26
    539a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9e 83       	std	Y+6, r25	; 0x06
    53a4:	8d 83       	std	Y+5, r24	; 0x05
    53a6:	0f c0       	rjmp	.+30     	; 0x53c6 <RETURN_vid+0x44a>
    53a8:	88 ec       	ldi	r24, 0xC8	; 200
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	9c 83       	std	Y+4, r25	; 0x04
    53ae:	8b 83       	std	Y+3, r24	; 0x03
    53b0:	8b 81       	ldd	r24, Y+3	; 0x03
    53b2:	9c 81       	ldd	r25, Y+4	; 0x04
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	f1 f7       	brne	.-4      	; 0x53b4 <RETURN_vid+0x438>
    53b8:	9c 83       	std	Y+4, r25	; 0x04
    53ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	9e 83       	std	Y+6, r25	; 0x06
    53c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c6:	8d 81       	ldd	r24, Y+5	; 0x05
    53c8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ca:	00 97       	sbiw	r24, 0x00	; 0
    53cc:	69 f7       	brne	.-38     	; 0x53a8 <RETURN_vid+0x42c>
    53ce:	14 c0       	rjmp	.+40     	; 0x53f8 <RETURN_vid+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d0:	6f 81       	ldd	r22, Y+7	; 0x07
    53d2:	78 85       	ldd	r23, Y+8	; 0x08
    53d4:	89 85       	ldd	r24, Y+9	; 0x09
    53d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	9e 83       	std	Y+6, r25	; 0x06
    53e2:	8d 83       	std	Y+5, r24	; 0x05
    53e4:	8d 81       	ldd	r24, Y+5	; 0x05
    53e6:	9e 81       	ldd	r25, Y+6	; 0x06
    53e8:	9a 83       	std	Y+2, r25	; 0x02
    53ea:	89 83       	std	Y+1, r24	; 0x01
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	9a 81       	ldd	r25, Y+2	; 0x02
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	f1 f7       	brne	.-4      	; 0x53f0 <RETURN_vid+0x474>
    53f4:	9a 83       	std	Y+2, r25	; 0x02
    53f6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			LCD_vidClearOnDemand(1, 32);
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	60 e2       	ldi	r22, 0x20	; 32
    53fc:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
		}
	}
}
    5400:	cf 5b       	subi	r28, 0xBF	; 191
    5402:	df 4f       	sbci	r29, 0xFF	; 255
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	cf 91       	pop	r28
    5410:	df 91       	pop	r29
    5412:	08 95       	ret

00005414 <LinkedList_vidCompanion>:


//  for user screen output
void LinkedList_vidCompanion(u16 show)
{
    5414:	df 93       	push	r29
    5416:	cf 93       	push	r28
    5418:	cd b7       	in	r28, 0x3d	; 61
    541a:	de b7       	in	r29, 0x3e	; 62
    541c:	27 97       	sbiw	r28, 0x07	; 7
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	f8 94       	cli
    5422:	de bf       	out	0x3e, r29	; 62
    5424:	0f be       	out	0x3f, r0	; 63
    5426:	cd bf       	out	0x3d, r28	; 61
    5428:	9f 83       	std	Y+7, r25	; 0x07
    542a:	8e 83       	std	Y+6, r24	; 0x06

	u16 *ptr = malloc(5 * sizeof(u16));
    542c:	8a e0       	ldi	r24, 0x0A	; 10
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <malloc>
    5434:	9d 83       	std	Y+5, r25	; 0x05
    5436:	8c 83       	std	Y+4, r24	; 0x04
	s8 k = 0, i = 0 ;
    5438:	1b 82       	std	Y+3, r1	; 0x03
    543a:	1a 82       	std	Y+2, r1	; 0x02

	// get values in order
	do
	{
		ptr[i] = (show%10) + 0x30;
    543c:	8a 81       	ldd	r24, Y+2	; 0x02
    543e:	99 27       	eor	r25, r25
    5440:	87 fd       	sbrc	r24, 7
    5442:	90 95       	com	r25
    5444:	9c 01       	movw	r18, r24
    5446:	22 0f       	add	r18, r18
    5448:	33 1f       	adc	r19, r19
    544a:	8c 81       	ldd	r24, Y+4	; 0x04
    544c:	9d 81       	ldd	r25, Y+5	; 0x05
    544e:	fc 01       	movw	r30, r24
    5450:	e2 0f       	add	r30, r18
    5452:	f3 1f       	adc	r31, r19
    5454:	8e 81       	ldd	r24, Y+6	; 0x06
    5456:	9f 81       	ldd	r25, Y+7	; 0x07
    5458:	2a e0       	ldi	r18, 0x0A	; 10
    545a:	30 e0       	ldi	r19, 0x00	; 0
    545c:	b9 01       	movw	r22, r18
    545e:	0e 94 12 2c 	call	0x5824	; 0x5824 <__udivmodhi4>
    5462:	c0 96       	adiw	r24, 0x30	; 48
    5464:	91 83       	std	Z+1, r25	; 0x01
    5466:	80 83       	st	Z, r24
		i++;
    5468:	8a 81       	ldd	r24, Y+2	; 0x02
    546a:	8f 5f       	subi	r24, 0xFF	; 255
    546c:	8a 83       	std	Y+2, r24	; 0x02
		show /= 10;
    546e:	8e 81       	ldd	r24, Y+6	; 0x06
    5470:	9f 81       	ldd	r25, Y+7	; 0x07
    5472:	2a e0       	ldi	r18, 0x0A	; 10
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	b9 01       	movw	r22, r18
    5478:	0e 94 12 2c 	call	0x5824	; 0x5824 <__udivmodhi4>
    547c:	cb 01       	movw	r24, r22
    547e:	9f 83       	std	Y+7, r25	; 0x07
    5480:	8e 83       	std	Y+6, r24	; 0x06
	}while(show);
    5482:	8e 81       	ldd	r24, Y+6	; 0x06
    5484:	9f 81       	ldd	r25, Y+7	; 0x07
    5486:	00 97       	sbiw	r24, 0x00	; 0
    5488:	c9 f6       	brne	.-78     	; 0x543c <LinkedList_vidCompanion+0x28>

	ptr[i] = '\0';
    548a:	8a 81       	ldd	r24, Y+2	; 0x02
    548c:	99 27       	eor	r25, r25
    548e:	87 fd       	sbrc	r24, 7
    5490:	90 95       	com	r25
    5492:	9c 01       	movw	r18, r24
    5494:	22 0f       	add	r18, r18
    5496:	33 1f       	adc	r19, r19
    5498:	8c 81       	ldd	r24, Y+4	; 0x04
    549a:	9d 81       	ldd	r25, Y+5	; 0x05
    549c:	fc 01       	movw	r30, r24
    549e:	e2 0f       	add	r30, r18
    54a0:	f3 1f       	adc	r31, r19
    54a2:	11 82       	std	Z+1, r1	; 0x01
    54a4:	10 82       	st	Z, r1

	// get string length
	for(k = 0; ptr[k] != '\0'; k++);
    54a6:	1b 82       	std	Y+3, r1	; 0x03
    54a8:	03 c0       	rjmp	.+6      	; 0x54b0 <LinkedList_vidCompanion+0x9c>
    54aa:	8b 81       	ldd	r24, Y+3	; 0x03
    54ac:	8f 5f       	subi	r24, 0xFF	; 255
    54ae:	8b 83       	std	Y+3, r24	; 0x03
    54b0:	8b 81       	ldd	r24, Y+3	; 0x03
    54b2:	99 27       	eor	r25, r25
    54b4:	87 fd       	sbrc	r24, 7
    54b6:	90 95       	com	r25
    54b8:	9c 01       	movw	r18, r24
    54ba:	22 0f       	add	r18, r18
    54bc:	33 1f       	adc	r19, r19
    54be:	8c 81       	ldd	r24, Y+4	; 0x04
    54c0:	9d 81       	ldd	r25, Y+5	; 0x05
    54c2:	fc 01       	movw	r30, r24
    54c4:	e2 0f       	add	r30, r18
    54c6:	f3 1f       	adc	r31, r19
    54c8:	80 81       	ld	r24, Z
    54ca:	91 81       	ldd	r25, Z+1	; 0x01
    54cc:	00 97       	sbiw	r24, 0x00	; 0
    54ce:	69 f7       	brne	.-38     	; 0x54aa <LinkedList_vidCompanion+0x96>

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    54d0:	8b 81       	ldd	r24, Y+3	; 0x03
    54d2:	81 50       	subi	r24, 0x01	; 1
    54d4:	89 83       	std	Y+1, r24	; 0x01
    54d6:	13 c0       	rjmp	.+38     	; 0x54fe <LinkedList_vidCompanion+0xea>
	{
		LCD_vidData(ptr[kk]);
    54d8:	89 81       	ldd	r24, Y+1	; 0x01
    54da:	99 27       	eor	r25, r25
    54dc:	87 fd       	sbrc	r24, 7
    54de:	90 95       	com	r25
    54e0:	9c 01       	movw	r18, r24
    54e2:	22 0f       	add	r18, r18
    54e4:	33 1f       	adc	r19, r19
    54e6:	8c 81       	ldd	r24, Y+4	; 0x04
    54e8:	9d 81       	ldd	r25, Y+5	; 0x05
    54ea:	fc 01       	movw	r30, r24
    54ec:	e2 0f       	add	r30, r18
    54ee:	f3 1f       	adc	r31, r19
    54f0:	80 81       	ld	r24, Z
    54f2:	91 81       	ldd	r25, Z+1	; 0x01
    54f4:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <LCD_vidData>
	for(k = 0; ptr[k] != '\0'; k++);

	//LCD_vidGoTo(1,2);

	// reverse the string sent
	for(s8 kk = k-1; kk >= 0; kk-- )
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	81 50       	subi	r24, 0x01	; 1
    54fc:	89 83       	std	Y+1, r24	; 0x01
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	88 23       	and	r24, r24
    5502:	54 f7       	brge	.-44     	; 0x54d8 <LinkedList_vidCompanion+0xc4>
	{
		LCD_vidData(ptr[kk]);
	}


	free(ptr);
    5504:	8c 81       	ldd	r24, Y+4	; 0x04
    5506:	9d 81       	ldd	r25, Y+5	; 0x05
    5508:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <free>
}
    550c:	27 96       	adiw	r28, 0x07	; 7
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	f8 94       	cli
    5512:	de bf       	out	0x3e, r29	; 62
    5514:	0f be       	out	0x3f, r0	; 63
    5516:	cd bf       	out	0x3d, r28	; 61
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <main>:

void DISPLAY_OnDemand(char *str1, char *str2);


int main(void)
{
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
	LCD_vidInitialize();
    5526:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <LCD_vidInitialize>
	BOOKS_vidInitialize();
    552a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <BOOKS_vidInitialize>
	LinkedList_vidInitialize();
    552e:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <LinkedList_vidInitialize>

	LinkedList_vidInsertion("1", "Mohamed");
    5532:	84 e0       	ldi	r24, 0x04	; 4
    5534:	92 e0       	ldi	r25, 0x02	; 2
    5536:	26 e0       	ldi	r18, 0x06	; 6
    5538:	32 e0       	ldi	r19, 0x02	; 2
    553a:	b9 01       	movw	r22, r18
    553c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("2", "John");
    5540:	8e e0       	ldi	r24, 0x0E	; 14
    5542:	92 e0       	ldi	r25, 0x02	; 2
    5544:	20 e1       	ldi	r18, 0x10	; 16
    5546:	32 e0       	ldi	r19, 0x02	; 2
    5548:	b9 01       	movw	r22, r18
    554a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("11", "Mark");
    554e:	85 e1       	ldi	r24, 0x15	; 21
    5550:	92 e0       	ldi	r25, 0x02	; 2
    5552:	28 e1       	ldi	r18, 0x18	; 24
    5554:	32 e0       	ldi	r19, 0x02	; 2
    5556:	b9 01       	movw	r22, r18
    5558:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("13", "Rose");
    555c:	8d e1       	ldi	r24, 0x1D	; 29
    555e:	92 e0       	ldi	r25, 0x02	; 2
    5560:	20 e2       	ldi	r18, 0x20	; 32
    5562:	32 e0       	ldi	r19, 0x02	; 2
    5564:	b9 01       	movw	r22, r18
    5566:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("15", "Sarah");
    556a:	85 e2       	ldi	r24, 0x25	; 37
    556c:	92 e0       	ldi	r25, 0x02	; 2
    556e:	28 e2       	ldi	r18, 0x28	; 40
    5570:	32 e0       	ldi	r19, 0x02	; 2
    5572:	b9 01       	movw	r22, r18
    5574:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("18", "Aya");
    5578:	8e e2       	ldi	r24, 0x2E	; 46
    557a:	92 e0       	ldi	r25, 0x02	; 2
    557c:	21 e3       	ldi	r18, 0x31	; 49
    557e:	32 e0       	ldi	r19, 0x02	; 2
    5580:	b9 01       	movw	r22, r18
    5582:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("20", "Mona");
    5586:	85 e3       	ldi	r24, 0x35	; 53
    5588:	92 e0       	ldi	r25, 0x02	; 2
    558a:	28 e3       	ldi	r18, 0x38	; 56
    558c:	32 e0       	ldi	r19, 0x02	; 2
    558e:	b9 01       	movw	r22, r18
    5590:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("4", "Newname");
    5594:	8d e3       	ldi	r24, 0x3D	; 61
    5596:	92 e0       	ldi	r25, 0x02	; 2
    5598:	2f e3       	ldi	r18, 0x3F	; 63
    559a:	32 e0       	ldi	r19, 0x02	; 2
    559c:	b9 01       	movw	r22, r18
    559e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>
	LinkedList_vidInsertion("12", "Joey");
    55a2:	87 e4       	ldi	r24, 0x47	; 71
    55a4:	92 e0       	ldi	r25, 0x02	; 2
    55a6:	2a e4       	ldi	r18, 0x4A	; 74
    55a8:	32 e0       	ldi	r19, 0x02	; 2
    55aa:	b9 01       	movw	r22, r18
    55ac:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LinkedList_vidInsertion>


	BOOKS_vidInsertion("019", "Charles Dickens", 5);	//281785
    55b0:	8f e4       	ldi	r24, 0x4F	; 79
    55b2:	92 e0       	ldi	r25, 0x02	; 2
    55b4:	23 e5       	ldi	r18, 0x53	; 83
    55b6:	32 e0       	ldi	r19, 0x02	; 2
    55b8:	b9 01       	movw	r22, r18
    55ba:	45 e0       	ldi	r20, 0x05	; 5
    55bc:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("025", "Paulo Coelho", 5);		//486198
    55c0:	83 e6       	ldi	r24, 0x63	; 99
    55c2:	92 e0       	ldi	r25, 0x02	; 2
    55c4:	27 e6       	ldi	r18, 0x67	; 103
    55c6:	32 e0       	ldi	r19, 0x02	; 2
    55c8:	b9 01       	movw	r22, r18
    55ca:	45 e0       	ldi	r20, 0x05	; 5
    55cc:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("033", "Emily Bronte", 5);		//010690
    55d0:	84 e7       	ldi	r24, 0x74	; 116
    55d2:	92 e0       	ldi	r25, 0x02	; 2
    55d4:	28 e7       	ldi	r18, 0x78	; 120
    55d6:	32 e0       	ldi	r19, 0x02	; 2
    55d8:	b9 01       	movw	r22, r18
    55da:	45 e0       	ldi	r20, 0x05	; 5
    55dc:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("058", "Jane Eyre", 5);			//207719
    55e0:	85 e8       	ldi	r24, 0x85	; 133
    55e2:	92 e0       	ldi	r25, 0x02	; 2
    55e4:	29 e8       	ldi	r18, 0x89	; 137
    55e6:	32 e0       	ldi	r19, 0x02	; 2
    55e8:	b9 01       	movw	r22, r18
    55ea:	45 e0       	ldi	r20, 0x05	; 5
    55ec:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("075", "Eileen Power", 5);		//149253
    55f0:	83 e9       	ldi	r24, 0x93	; 147
    55f2:	92 e0       	ldi	r25, 0x02	; 2
    55f4:	27 e9       	ldi	r18, 0x97	; 151
    55f6:	32 e0       	ldi	r19, 0x02	; 2
    55f8:	b9 01       	movw	r22, r18
    55fa:	45 e0       	ldi	r20, 0x05	; 5
    55fc:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("111", "The Zahir", 5);	//281785
    5600:	84 ea       	ldi	r24, 0xA4	; 164
    5602:	92 e0       	ldi	r25, 0x02	; 2
    5604:	28 ea       	ldi	r18, 0xA8	; 168
    5606:	32 e0       	ldi	r19, 0x02	; 2
    5608:	b9 01       	movw	r22, r18
    560a:	45 e0       	ldi	r20, 0x05	; 5
    560c:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("222", "The Alchemist", 5);		//486198
    5610:	82 eb       	ldi	r24, 0xB2	; 178
    5612:	92 e0       	ldi	r25, 0x02	; 2
    5614:	26 eb       	ldi	r18, 0xB6	; 182
    5616:	32 e0       	ldi	r19, 0x02	; 2
    5618:	b9 01       	movw	r22, r18
    561a:	45 e0       	ldi	r20, 0x05	; 5
    561c:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("333", "For one more Day", 5);		//010690
    5620:	84 ec       	ldi	r24, 0xC4	; 196
    5622:	92 e0       	ldi	r25, 0x02	; 2
    5624:	28 ec       	ldi	r18, 0xC8	; 200
    5626:	32 e0       	ldi	r19, 0x02	; 2
    5628:	b9 01       	movw	r22, r18
    562a:	45 e0       	ldi	r20, 0x05	; 5
    562c:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("444", "Hard times", 5);			//207719
    5630:	89 ed       	ldi	r24, 0xD9	; 217
    5632:	92 e0       	ldi	r25, 0x02	; 2
    5634:	2d ed       	ldi	r18, 0xDD	; 221
    5636:	32 e0       	ldi	r19, 0x02	; 2
    5638:	b9 01       	movw	r22, r18
    563a:	45 e0       	ldi	r20, 0x05	; 5
    563c:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	BOOKS_vidInsertion("555", "Stands alone", 5);		//149253
    5640:	88 ee       	ldi	r24, 0xE8	; 232
    5642:	92 e0       	ldi	r25, 0x02	; 2
    5644:	2c ee       	ldi	r18, 0xEC	; 236
    5646:	32 e0       	ldi	r19, 0x02	; 2
    5648:	b9 01       	movw	r22, r18
    564a:	45 e0       	ldi	r20, 0x05	; 5
    564c:	0e 94 9c 18 	call	0x3138	; 0x3138 <BOOKS_vidInsertion>
	//BOOKS_show();
	//LinkedList_show();

	while(1)
	{
		LCD_vidClearOnDemand(1, 32);
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	60 e2       	ldi	r22, 0x20	; 32
    5654:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>

		DISPLAY_OnDemand("1-INSER BOOK", "2-INSER MEMBER");
    5658:	89 ef       	ldi	r24, 0xF9	; 249
    565a:	92 e0       	ldi	r25, 0x02	; 2
    565c:	26 e0       	ldi	r18, 0x06	; 6
    565e:	33 e0       	ldi	r19, 0x03	; 3
    5660:	b9 01       	movw	r22, r18
    5662:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DISPLAY_OnDemand>

		DISPLAY_OnDemand("3-BORROW BOOK", "4-RETURN BOOK");
    5666:	85 e1       	ldi	r24, 0x15	; 21
    5668:	93 e0       	ldi	r25, 0x03	; 3
    566a:	23 e2       	ldi	r18, 0x23	; 35
    566c:	33 e0       	ldi	r19, 0x03	; 3
    566e:	b9 01       	movw	r22, r18
    5670:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DISPLAY_OnDemand>

		DISPLAY_OnDemand("5-Show all books", "6-Show all members");
    5674:	81 e3       	ldi	r24, 0x31	; 49
    5676:	93 e0       	ldi	r25, 0x03	; 3
    5678:	22 e4       	ldi	r18, 0x42	; 66
    567a:	33 e0       	ldi	r19, 0x03	; 3
    567c:	b9 01       	movw	r22, r18
    567e:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DISPLAY_OnDemand>

		DISPLAY_OnDemand("7-Member's INFO.", "                 ");
    5682:	85 e5       	ldi	r24, 0x55	; 85
    5684:	93 e0       	ldi	r25, 0x03	; 3
    5686:	26 e6       	ldi	r18, 0x66	; 102
    5688:	33 e0       	ldi	r19, 0x03	; 3
    568a:	b9 01       	movw	r22, r18
    568c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <DISPLAY_OnDemand>

		LCD_String("OPERATION NO. :");
    5690:	88 e7       	ldi	r24, 0x78	; 120
    5692:	93 e0       	ldi	r25, 0x03	; 3
    5694:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
		LCD_vidGoTo(1, 2);
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	62 e0       	ldi	r22, 0x02	; 2
    569c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>


		KeyPad_vidInitialize();
    56a0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <KeyPad_vidInitialize>

		if(DEAD_SIGNAL_TERMINATE)
    56a4:	80 91 c6 03 	lds	r24, 0x03C6
    56a8:	88 23       	and	r24, r24
    56aa:	91 f2       	breq	.-92     	; 0x5650 <main+0x132>
		{
			DEAD_SIGNAL_TERMINATE = 0;
    56ac:	10 92 c6 03 	sts	0x03C6, r1

			// Reset pointers to the head ot its linked list
			restart_vip();
    56b0:	0e 94 76 21 	call	0x42ec	; 0x42ec <restart_vip>
			BOOKS_restart_vip();
    56b4:	0e 94 32 1a 	call	0x3464	; 0x3464 <BOOKS_restart_vip>

			// Delete the whole data base
			LinkedList_u8DeleteEntire();
    56b8:	0e 94 34 21 	call	0x4268	; 0x4268 <LinkedList_u8DeleteEntire>
			BOOKS_u8DeleteEntire();
    56bc:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <BOOKS_u8DeleteEntire>
    56c0:	80 e0       	ldi	r24, 0x00	; 0
    56c2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
}
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <DISPLAY_OnDemand>:

void DISPLAY_OnDemand(char *str1, char *str2)
{
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    56d2:	62 97       	sbiw	r28, 0x12	; 18
    56d4:	0f b6       	in	r0, 0x3f	; 63
    56d6:	f8 94       	cli
    56d8:	de bf       	out	0x3e, r29	; 62
    56da:	0f be       	out	0x3f, r0	; 63
    56dc:	cd bf       	out	0x3d, r28	; 61
    56de:	98 8b       	std	Y+16, r25	; 0x10
    56e0:	8f 87       	std	Y+15, r24	; 0x0f
    56e2:	7a 8b       	std	Y+18, r23	; 0x12
    56e4:	69 8b       	std	Y+17, r22	; 0x11
	LCD_vidClearOnDemand(1, 32);
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	60 e2       	ldi	r22, 0x20	; 32
    56ea:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
	// Display 1st string
	LCD_vidGoTo(1, 1);
    56ee:	81 e0       	ldi	r24, 0x01	; 1
    56f0:	61 e0       	ldi	r22, 0x01	; 1
    56f2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
	LCD_String(str1);
    56f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    56f8:	98 89       	ldd	r25, Y+16	; 0x10
    56fa:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
	// Display 2nd string
	LCD_vidGoTo(1, 2);
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	62 e0       	ldi	r22, 0x02	; 2
    5702:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <LCD_vidGoTo>
	LCD_String(str2);
    5706:	89 89       	ldd	r24, Y+17	; 0x11
    5708:	9a 89       	ldd	r25, Y+18	; 0x12
    570a:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_String>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	90 e8       	ldi	r25, 0x80	; 128
    5712:	a2 ea       	ldi	r26, 0xA2	; 162
    5714:	b4 e4       	ldi	r27, 0x44	; 68
    5716:	8b 87       	std	Y+11, r24	; 0x0b
    5718:	9c 87       	std	Y+12, r25	; 0x0c
    571a:	ad 87       	std	Y+13, r26	; 0x0d
    571c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    571e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5720:	7c 85       	ldd	r23, Y+12	; 0x0c
    5722:	8d 85       	ldd	r24, Y+13	; 0x0d
    5724:	9e 85       	ldd	r25, Y+14	; 0x0e
    5726:	20 e0       	ldi	r18, 0x00	; 0
    5728:	30 e0       	ldi	r19, 0x00	; 0
    572a:	4a ef       	ldi	r20, 0xFA	; 250
    572c:	54 e4       	ldi	r21, 0x44	; 68
    572e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	8f 83       	std	Y+7, r24	; 0x07
    5738:	98 87       	std	Y+8, r25	; 0x08
    573a:	a9 87       	std	Y+9, r26	; 0x09
    573c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    573e:	6f 81       	ldd	r22, Y+7	; 0x07
    5740:	78 85       	ldd	r23, Y+8	; 0x08
    5742:	89 85       	ldd	r24, Y+9	; 0x09
    5744:	9a 85       	ldd	r25, Y+10	; 0x0a
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 e8       	ldi	r20, 0x80	; 128
    574c:	5f e3       	ldi	r21, 0x3F	; 63
    574e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5752:	88 23       	and	r24, r24
    5754:	2c f4       	brge	.+10     	; 0x5760 <DISPLAY_OnDemand+0x96>
		__ticks = 1;
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	9e 83       	std	Y+6, r25	; 0x06
    575c:	8d 83       	std	Y+5, r24	; 0x05
    575e:	3f c0       	rjmp	.+126    	; 0x57de <DISPLAY_OnDemand+0x114>
	else if (__tmp > 65535)
    5760:	6f 81       	ldd	r22, Y+7	; 0x07
    5762:	78 85       	ldd	r23, Y+8	; 0x08
    5764:	89 85       	ldd	r24, Y+9	; 0x09
    5766:	9a 85       	ldd	r25, Y+10	; 0x0a
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	3f ef       	ldi	r19, 0xFF	; 255
    576c:	4f e7       	ldi	r20, 0x7F	; 127
    576e:	57 e4       	ldi	r21, 0x47	; 71
    5770:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5774:	18 16       	cp	r1, r24
    5776:	4c f5       	brge	.+82     	; 0x57ca <DISPLAY_OnDemand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5778:	6b 85       	ldd	r22, Y+11	; 0x0b
    577a:	7c 85       	ldd	r23, Y+12	; 0x0c
    577c:	8d 85       	ldd	r24, Y+13	; 0x0d
    577e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5780:	20 e0       	ldi	r18, 0x00	; 0
    5782:	30 e0       	ldi	r19, 0x00	; 0
    5784:	40 e2       	ldi	r20, 0x20	; 32
    5786:	51 e4       	ldi	r21, 0x41	; 65
    5788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    578c:	dc 01       	movw	r26, r24
    578e:	cb 01       	movw	r24, r22
    5790:	bc 01       	movw	r22, r24
    5792:	cd 01       	movw	r24, r26
    5794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5798:	dc 01       	movw	r26, r24
    579a:	cb 01       	movw	r24, r22
    579c:	9e 83       	std	Y+6, r25	; 0x06
    579e:	8d 83       	std	Y+5, r24	; 0x05
    57a0:	0f c0       	rjmp	.+30     	; 0x57c0 <DISPLAY_OnDemand+0xf6>
    57a2:	88 ec       	ldi	r24, 0xC8	; 200
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	9c 83       	std	Y+4, r25	; 0x04
    57a8:	8b 83       	std	Y+3, r24	; 0x03
    57aa:	8b 81       	ldd	r24, Y+3	; 0x03
    57ac:	9c 81       	ldd	r25, Y+4	; 0x04
    57ae:	01 97       	sbiw	r24, 0x01	; 1
    57b0:	f1 f7       	brne	.-4      	; 0x57ae <DISPLAY_OnDemand+0xe4>
    57b2:	9c 83       	std	Y+4, r25	; 0x04
    57b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57b6:	8d 81       	ldd	r24, Y+5	; 0x05
    57b8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ba:	01 97       	sbiw	r24, 0x01	; 1
    57bc:	9e 83       	std	Y+6, r25	; 0x06
    57be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57c0:	8d 81       	ldd	r24, Y+5	; 0x05
    57c2:	9e 81       	ldd	r25, Y+6	; 0x06
    57c4:	00 97       	sbiw	r24, 0x00	; 0
    57c6:	69 f7       	brne	.-38     	; 0x57a2 <DISPLAY_OnDemand+0xd8>
    57c8:	14 c0       	rjmp	.+40     	; 0x57f2 <DISPLAY_OnDemand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ca:	6f 81       	ldd	r22, Y+7	; 0x07
    57cc:	78 85       	ldd	r23, Y+8	; 0x08
    57ce:	89 85       	ldd	r24, Y+9	; 0x09
    57d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d6:	dc 01       	movw	r26, r24
    57d8:	cb 01       	movw	r24, r22
    57da:	9e 83       	std	Y+6, r25	; 0x06
    57dc:	8d 83       	std	Y+5, r24	; 0x05
    57de:	8d 81       	ldd	r24, Y+5	; 0x05
    57e0:	9e 81       	ldd	r25, Y+6	; 0x06
    57e2:	9a 83       	std	Y+2, r25	; 0x02
    57e4:	89 83       	std	Y+1, r24	; 0x01
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ea:	01 97       	sbiw	r24, 0x01	; 1
    57ec:	f1 f7       	brne	.-4      	; 0x57ea <DISPLAY_OnDemand+0x120>
    57ee:	9a 83       	std	Y+2, r25	; 0x02
    57f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1300);
	// Clear whole display
	LCD_vidClearOnDemand(1, 32);
    57f2:	81 e0       	ldi	r24, 0x01	; 1
    57f4:	60 e2       	ldi	r22, 0x20	; 32
    57f6:	0e 94 3c 18 	call	0x3078	; 0x3078 <LCD_vidClearOnDemand>
}
    57fa:	62 96       	adiw	r28, 0x12	; 18
    57fc:	0f b6       	in	r0, 0x3f	; 63
    57fe:	f8 94       	cli
    5800:	de bf       	out	0x3e, r29	; 62
    5802:	0f be       	out	0x3f, r0	; 63
    5804:	cd bf       	out	0x3d, r28	; 61
    5806:	cf 91       	pop	r28
    5808:	df 91       	pop	r29
    580a:	08 95       	ret

0000580c <__udivmodqi4>:
    580c:	99 1b       	sub	r25, r25
    580e:	79 e0       	ldi	r23, 0x09	; 9
    5810:	04 c0       	rjmp	.+8      	; 0x581a <__udivmodqi4_ep>

00005812 <__udivmodqi4_loop>:
    5812:	99 1f       	adc	r25, r25
    5814:	96 17       	cp	r25, r22
    5816:	08 f0       	brcs	.+2      	; 0x581a <__udivmodqi4_ep>
    5818:	96 1b       	sub	r25, r22

0000581a <__udivmodqi4_ep>:
    581a:	88 1f       	adc	r24, r24
    581c:	7a 95       	dec	r23
    581e:	c9 f7       	brne	.-14     	; 0x5812 <__udivmodqi4_loop>
    5820:	80 95       	com	r24
    5822:	08 95       	ret

00005824 <__udivmodhi4>:
    5824:	aa 1b       	sub	r26, r26
    5826:	bb 1b       	sub	r27, r27
    5828:	51 e1       	ldi	r21, 0x11	; 17
    582a:	07 c0       	rjmp	.+14     	; 0x583a <__udivmodhi4_ep>

0000582c <__udivmodhi4_loop>:
    582c:	aa 1f       	adc	r26, r26
    582e:	bb 1f       	adc	r27, r27
    5830:	a6 17       	cp	r26, r22
    5832:	b7 07       	cpc	r27, r23
    5834:	10 f0       	brcs	.+4      	; 0x583a <__udivmodhi4_ep>
    5836:	a6 1b       	sub	r26, r22
    5838:	b7 0b       	sbc	r27, r23

0000583a <__udivmodhi4_ep>:
    583a:	88 1f       	adc	r24, r24
    583c:	99 1f       	adc	r25, r25
    583e:	5a 95       	dec	r21
    5840:	a9 f7       	brne	.-22     	; 0x582c <__udivmodhi4_loop>
    5842:	80 95       	com	r24
    5844:	90 95       	com	r25
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	08 95       	ret

0000584c <__divmodhi4>:
    584c:	97 fb       	bst	r25, 7
    584e:	09 2e       	mov	r0, r25
    5850:	07 26       	eor	r0, r23
    5852:	0a d0       	rcall	.+20     	; 0x5868 <__divmodhi4_neg1>
    5854:	77 fd       	sbrc	r23, 7
    5856:	04 d0       	rcall	.+8      	; 0x5860 <__divmodhi4_neg2>
    5858:	e5 df       	rcall	.-54     	; 0x5824 <__udivmodhi4>
    585a:	06 d0       	rcall	.+12     	; 0x5868 <__divmodhi4_neg1>
    585c:	00 20       	and	r0, r0
    585e:	1a f4       	brpl	.+6      	; 0x5866 <__divmodhi4_exit>

00005860 <__divmodhi4_neg2>:
    5860:	70 95       	com	r23
    5862:	61 95       	neg	r22
    5864:	7f 4f       	sbci	r23, 0xFF	; 255

00005866 <__divmodhi4_exit>:
    5866:	08 95       	ret

00005868 <__divmodhi4_neg1>:
    5868:	f6 f7       	brtc	.-4      	; 0x5866 <__divmodhi4_exit>
    586a:	90 95       	com	r25
    586c:	81 95       	neg	r24
    586e:	9f 4f       	sbci	r25, 0xFF	; 255
    5870:	08 95       	ret

00005872 <__prologue_saves__>:
    5872:	2f 92       	push	r2
    5874:	3f 92       	push	r3
    5876:	4f 92       	push	r4
    5878:	5f 92       	push	r5
    587a:	6f 92       	push	r6
    587c:	7f 92       	push	r7
    587e:	8f 92       	push	r8
    5880:	9f 92       	push	r9
    5882:	af 92       	push	r10
    5884:	bf 92       	push	r11
    5886:	cf 92       	push	r12
    5888:	df 92       	push	r13
    588a:	ef 92       	push	r14
    588c:	ff 92       	push	r15
    588e:	0f 93       	push	r16
    5890:	1f 93       	push	r17
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	ca 1b       	sub	r28, r26
    589c:	db 0b       	sbc	r29, r27
    589e:	0f b6       	in	r0, 0x3f	; 63
    58a0:	f8 94       	cli
    58a2:	de bf       	out	0x3e, r29	; 62
    58a4:	0f be       	out	0x3f, r0	; 63
    58a6:	cd bf       	out	0x3d, r28	; 61
    58a8:	09 94       	ijmp

000058aa <__epilogue_restores__>:
    58aa:	2a 88       	ldd	r2, Y+18	; 0x12
    58ac:	39 88       	ldd	r3, Y+17	; 0x11
    58ae:	48 88       	ldd	r4, Y+16	; 0x10
    58b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    58b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    58b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    58b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    58b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    58ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    58bc:	b9 84       	ldd	r11, Y+9	; 0x09
    58be:	c8 84       	ldd	r12, Y+8	; 0x08
    58c0:	df 80       	ldd	r13, Y+7	; 0x07
    58c2:	ee 80       	ldd	r14, Y+6	; 0x06
    58c4:	fd 80       	ldd	r15, Y+5	; 0x05
    58c6:	0c 81       	ldd	r16, Y+4	; 0x04
    58c8:	1b 81       	ldd	r17, Y+3	; 0x03
    58ca:	aa 81       	ldd	r26, Y+2	; 0x02
    58cc:	b9 81       	ldd	r27, Y+1	; 0x01
    58ce:	ce 0f       	add	r28, r30
    58d0:	d1 1d       	adc	r29, r1
    58d2:	0f b6       	in	r0, 0x3f	; 63
    58d4:	f8 94       	cli
    58d6:	de bf       	out	0x3e, r29	; 62
    58d8:	0f be       	out	0x3f, r0	; 63
    58da:	cd bf       	out	0x3d, r28	; 61
    58dc:	ed 01       	movw	r28, r26
    58de:	08 95       	ret

000058e0 <malloc>:
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	bc 01       	movw	r22, r24
    58e6:	82 30       	cpi	r24, 0x02	; 2
    58e8:	91 05       	cpc	r25, r1
    58ea:	10 f4       	brcc	.+4      	; 0x58f0 <malloc+0x10>
    58ec:	62 e0       	ldi	r22, 0x02	; 2
    58ee:	70 e0       	ldi	r23, 0x00	; 0
    58f0:	a0 91 2e 04 	lds	r26, 0x042E
    58f4:	b0 91 2f 04 	lds	r27, 0x042F
    58f8:	ed 01       	movw	r28, r26
    58fa:	e0 e0       	ldi	r30, 0x00	; 0
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	40 e0       	ldi	r20, 0x00	; 0
    5900:	50 e0       	ldi	r21, 0x00	; 0
    5902:	21 c0       	rjmp	.+66     	; 0x5946 <malloc+0x66>
    5904:	88 81       	ld	r24, Y
    5906:	99 81       	ldd	r25, Y+1	; 0x01
    5908:	86 17       	cp	r24, r22
    590a:	97 07       	cpc	r25, r23
    590c:	69 f4       	brne	.+26     	; 0x5928 <malloc+0x48>
    590e:	8a 81       	ldd	r24, Y+2	; 0x02
    5910:	9b 81       	ldd	r25, Y+3	; 0x03
    5912:	30 97       	sbiw	r30, 0x00	; 0
    5914:	19 f0       	breq	.+6      	; 0x591c <malloc+0x3c>
    5916:	93 83       	std	Z+3, r25	; 0x03
    5918:	82 83       	std	Z+2, r24	; 0x02
    591a:	04 c0       	rjmp	.+8      	; 0x5924 <malloc+0x44>
    591c:	90 93 2f 04 	sts	0x042F, r25
    5920:	80 93 2e 04 	sts	0x042E, r24
    5924:	fe 01       	movw	r30, r28
    5926:	34 c0       	rjmp	.+104    	; 0x5990 <malloc+0xb0>
    5928:	68 17       	cp	r22, r24
    592a:	79 07       	cpc	r23, r25
    592c:	38 f4       	brcc	.+14     	; 0x593c <malloc+0x5c>
    592e:	41 15       	cp	r20, r1
    5930:	51 05       	cpc	r21, r1
    5932:	19 f0       	breq	.+6      	; 0x593a <malloc+0x5a>
    5934:	84 17       	cp	r24, r20
    5936:	95 07       	cpc	r25, r21
    5938:	08 f4       	brcc	.+2      	; 0x593c <malloc+0x5c>
    593a:	ac 01       	movw	r20, r24
    593c:	fe 01       	movw	r30, r28
    593e:	8a 81       	ldd	r24, Y+2	; 0x02
    5940:	9b 81       	ldd	r25, Y+3	; 0x03
    5942:	9c 01       	movw	r18, r24
    5944:	e9 01       	movw	r28, r18
    5946:	20 97       	sbiw	r28, 0x00	; 0
    5948:	e9 f6       	brne	.-70     	; 0x5904 <malloc+0x24>
    594a:	41 15       	cp	r20, r1
    594c:	51 05       	cpc	r21, r1
    594e:	a9 f1       	breq	.+106    	; 0x59ba <malloc+0xda>
    5950:	ca 01       	movw	r24, r20
    5952:	86 1b       	sub	r24, r22
    5954:	97 0b       	sbc	r25, r23
    5956:	04 97       	sbiw	r24, 0x04	; 4
    5958:	08 f4       	brcc	.+2      	; 0x595c <malloc+0x7c>
    595a:	ba 01       	movw	r22, r20
    595c:	e0 e0       	ldi	r30, 0x00	; 0
    595e:	f0 e0       	ldi	r31, 0x00	; 0
    5960:	2a c0       	rjmp	.+84     	; 0x59b6 <malloc+0xd6>
    5962:	8d 91       	ld	r24, X+
    5964:	9c 91       	ld	r25, X
    5966:	11 97       	sbiw	r26, 0x01	; 1
    5968:	84 17       	cp	r24, r20
    596a:	95 07       	cpc	r25, r21
    596c:	f9 f4       	brne	.+62     	; 0x59ac <malloc+0xcc>
    596e:	64 17       	cp	r22, r20
    5970:	75 07       	cpc	r23, r21
    5972:	81 f4       	brne	.+32     	; 0x5994 <malloc+0xb4>
    5974:	12 96       	adiw	r26, 0x02	; 2
    5976:	8d 91       	ld	r24, X+
    5978:	9c 91       	ld	r25, X
    597a:	13 97       	sbiw	r26, 0x03	; 3
    597c:	30 97       	sbiw	r30, 0x00	; 0
    597e:	19 f0       	breq	.+6      	; 0x5986 <malloc+0xa6>
    5980:	93 83       	std	Z+3, r25	; 0x03
    5982:	82 83       	std	Z+2, r24	; 0x02
    5984:	04 c0       	rjmp	.+8      	; 0x598e <malloc+0xae>
    5986:	90 93 2f 04 	sts	0x042F, r25
    598a:	80 93 2e 04 	sts	0x042E, r24
    598e:	fd 01       	movw	r30, r26
    5990:	32 96       	adiw	r30, 0x02	; 2
    5992:	4f c0       	rjmp	.+158    	; 0x5a32 <malloc+0x152>
    5994:	ca 01       	movw	r24, r20
    5996:	86 1b       	sub	r24, r22
    5998:	97 0b       	sbc	r25, r23
    599a:	fd 01       	movw	r30, r26
    599c:	e8 0f       	add	r30, r24
    599e:	f9 1f       	adc	r31, r25
    59a0:	61 93       	st	Z+, r22
    59a2:	71 93       	st	Z+, r23
    59a4:	02 97       	sbiw	r24, 0x02	; 2
    59a6:	8d 93       	st	X+, r24
    59a8:	9c 93       	st	X, r25
    59aa:	43 c0       	rjmp	.+134    	; 0x5a32 <malloc+0x152>
    59ac:	fd 01       	movw	r30, r26
    59ae:	82 81       	ldd	r24, Z+2	; 0x02
    59b0:	93 81       	ldd	r25, Z+3	; 0x03
    59b2:	9c 01       	movw	r18, r24
    59b4:	d9 01       	movw	r26, r18
    59b6:	10 97       	sbiw	r26, 0x00	; 0
    59b8:	a1 f6       	brne	.-88     	; 0x5962 <malloc+0x82>
    59ba:	80 91 2c 04 	lds	r24, 0x042C
    59be:	90 91 2d 04 	lds	r25, 0x042D
    59c2:	89 2b       	or	r24, r25
    59c4:	41 f4       	brne	.+16     	; 0x59d6 <malloc+0xf6>
    59c6:	80 91 92 03 	lds	r24, 0x0392
    59ca:	90 91 93 03 	lds	r25, 0x0393
    59ce:	90 93 2d 04 	sts	0x042D, r25
    59d2:	80 93 2c 04 	sts	0x042C, r24
    59d6:	40 91 94 03 	lds	r20, 0x0394
    59da:	50 91 95 03 	lds	r21, 0x0395
    59de:	41 15       	cp	r20, r1
    59e0:	51 05       	cpc	r21, r1
    59e2:	41 f4       	brne	.+16     	; 0x59f4 <malloc+0x114>
    59e4:	4d b7       	in	r20, 0x3d	; 61
    59e6:	5e b7       	in	r21, 0x3e	; 62
    59e8:	80 91 90 03 	lds	r24, 0x0390
    59ec:	90 91 91 03 	lds	r25, 0x0391
    59f0:	48 1b       	sub	r20, r24
    59f2:	59 0b       	sbc	r21, r25
    59f4:	20 91 2c 04 	lds	r18, 0x042C
    59f8:	30 91 2d 04 	lds	r19, 0x042D
    59fc:	24 17       	cp	r18, r20
    59fe:	35 07       	cpc	r19, r21
    5a00:	b0 f4       	brcc	.+44     	; 0x5a2e <malloc+0x14e>
    5a02:	ca 01       	movw	r24, r20
    5a04:	82 1b       	sub	r24, r18
    5a06:	93 0b       	sbc	r25, r19
    5a08:	86 17       	cp	r24, r22
    5a0a:	97 07       	cpc	r25, r23
    5a0c:	80 f0       	brcs	.+32     	; 0x5a2e <malloc+0x14e>
    5a0e:	ab 01       	movw	r20, r22
    5a10:	4e 5f       	subi	r20, 0xFE	; 254
    5a12:	5f 4f       	sbci	r21, 0xFF	; 255
    5a14:	84 17       	cp	r24, r20
    5a16:	95 07       	cpc	r25, r21
    5a18:	50 f0       	brcs	.+20     	; 0x5a2e <malloc+0x14e>
    5a1a:	42 0f       	add	r20, r18
    5a1c:	53 1f       	adc	r21, r19
    5a1e:	50 93 2d 04 	sts	0x042D, r21
    5a22:	40 93 2c 04 	sts	0x042C, r20
    5a26:	f9 01       	movw	r30, r18
    5a28:	61 93       	st	Z+, r22
    5a2a:	71 93       	st	Z+, r23
    5a2c:	02 c0       	rjmp	.+4      	; 0x5a32 <malloc+0x152>
    5a2e:	e0 e0       	ldi	r30, 0x00	; 0
    5a30:	f0 e0       	ldi	r31, 0x00	; 0
    5a32:	cf 01       	movw	r24, r30
    5a34:	df 91       	pop	r29
    5a36:	cf 91       	pop	r28
    5a38:	08 95       	ret

00005a3a <free>:
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	00 97       	sbiw	r24, 0x00	; 0
    5a40:	09 f4       	brne	.+2      	; 0x5a44 <free+0xa>
    5a42:	50 c0       	rjmp	.+160    	; 0x5ae4 <free+0xaa>
    5a44:	ec 01       	movw	r28, r24
    5a46:	22 97       	sbiw	r28, 0x02	; 2
    5a48:	1b 82       	std	Y+3, r1	; 0x03
    5a4a:	1a 82       	std	Y+2, r1	; 0x02
    5a4c:	a0 91 2e 04 	lds	r26, 0x042E
    5a50:	b0 91 2f 04 	lds	r27, 0x042F
    5a54:	10 97       	sbiw	r26, 0x00	; 0
    5a56:	09 f1       	breq	.+66     	; 0x5a9a <free+0x60>
    5a58:	40 e0       	ldi	r20, 0x00	; 0
    5a5a:	50 e0       	ldi	r21, 0x00	; 0
    5a5c:	ac 17       	cp	r26, r28
    5a5e:	bd 07       	cpc	r27, r29
    5a60:	08 f1       	brcs	.+66     	; 0x5aa4 <free+0x6a>
    5a62:	bb 83       	std	Y+3, r27	; 0x03
    5a64:	aa 83       	std	Y+2, r26	; 0x02
    5a66:	fe 01       	movw	r30, r28
    5a68:	21 91       	ld	r18, Z+
    5a6a:	31 91       	ld	r19, Z+
    5a6c:	e2 0f       	add	r30, r18
    5a6e:	f3 1f       	adc	r31, r19
    5a70:	ae 17       	cp	r26, r30
    5a72:	bf 07       	cpc	r27, r31
    5a74:	79 f4       	brne	.+30     	; 0x5a94 <free+0x5a>
    5a76:	8d 91       	ld	r24, X+
    5a78:	9c 91       	ld	r25, X
    5a7a:	11 97       	sbiw	r26, 0x01	; 1
    5a7c:	28 0f       	add	r18, r24
    5a7e:	39 1f       	adc	r19, r25
    5a80:	2e 5f       	subi	r18, 0xFE	; 254
    5a82:	3f 4f       	sbci	r19, 0xFF	; 255
    5a84:	39 83       	std	Y+1, r19	; 0x01
    5a86:	28 83       	st	Y, r18
    5a88:	12 96       	adiw	r26, 0x02	; 2
    5a8a:	8d 91       	ld	r24, X+
    5a8c:	9c 91       	ld	r25, X
    5a8e:	13 97       	sbiw	r26, 0x03	; 3
    5a90:	9b 83       	std	Y+3, r25	; 0x03
    5a92:	8a 83       	std	Y+2, r24	; 0x02
    5a94:	41 15       	cp	r20, r1
    5a96:	51 05       	cpc	r21, r1
    5a98:	71 f4       	brne	.+28     	; 0x5ab6 <free+0x7c>
    5a9a:	d0 93 2f 04 	sts	0x042F, r29
    5a9e:	c0 93 2e 04 	sts	0x042E, r28
    5aa2:	20 c0       	rjmp	.+64     	; 0x5ae4 <free+0xaa>
    5aa4:	12 96       	adiw	r26, 0x02	; 2
    5aa6:	8d 91       	ld	r24, X+
    5aa8:	9c 91       	ld	r25, X
    5aaa:	13 97       	sbiw	r26, 0x03	; 3
    5aac:	ad 01       	movw	r20, r26
    5aae:	00 97       	sbiw	r24, 0x00	; 0
    5ab0:	11 f0       	breq	.+4      	; 0x5ab6 <free+0x7c>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	d3 cf       	rjmp	.-90     	; 0x5a5c <free+0x22>
    5ab6:	fa 01       	movw	r30, r20
    5ab8:	d3 83       	std	Z+3, r29	; 0x03
    5aba:	c2 83       	std	Z+2, r28	; 0x02
    5abc:	21 91       	ld	r18, Z+
    5abe:	31 91       	ld	r19, Z+
    5ac0:	e2 0f       	add	r30, r18
    5ac2:	f3 1f       	adc	r31, r19
    5ac4:	ce 17       	cp	r28, r30
    5ac6:	df 07       	cpc	r29, r31
    5ac8:	69 f4       	brne	.+26     	; 0x5ae4 <free+0xaa>
    5aca:	88 81       	ld	r24, Y
    5acc:	99 81       	ldd	r25, Y+1	; 0x01
    5ace:	28 0f       	add	r18, r24
    5ad0:	39 1f       	adc	r19, r25
    5ad2:	2e 5f       	subi	r18, 0xFE	; 254
    5ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ad6:	fa 01       	movw	r30, r20
    5ad8:	31 83       	std	Z+1, r19	; 0x01
    5ada:	20 83       	st	Z, r18
    5adc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ade:	9b 81       	ldd	r25, Y+3	; 0x03
    5ae0:	93 83       	std	Z+3, r25	; 0x03
    5ae2:	82 83       	std	Z+2, r24	; 0x02
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	08 95       	ret

00005aea <_exit>:
    5aea:	f8 94       	cli

00005aec <__stop_program>:
    5aec:	ff cf       	rjmp	.-2      	; 0x5aec <__stop_program>
